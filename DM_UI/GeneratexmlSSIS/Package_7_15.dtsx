<?xml version="1.0"?>
<DTS:Executable
  DTS:refId="Package" xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:CreatorName="CORP\30655"
  DTS:CreatorComputerName="EBII433F1"
  DTS:CreationDate="10/20/2015 4:24:32 PM"
  DTS:PackageType="5"
  DTS:VersionBuild="778"
  DTS:VersionGUID="{F72F9E09-B8EB-41C2-835A-F577232D7F90}"
  DTS:LastModifiedProductVersion="11.0.2100.60"
  DTS:LocaleID="1033"
  DTS:ObjectName="Automaton"
  DTS:DTSID="{93C41225-8214-4F3D-B3A3-0FE2F7EC56BB}"
  DTS:CreationName="SSIS.Package.3">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="Client_ID"
      DTS:DTSID="{572184DF-867A-4B43-982F-D13E7DCB57C4}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">0001</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="MetaDataConn"
      DTS:DTSID="{43158A1B-3448-463E-9253-A18D0DFD8AB2}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="PackageSaveLocation"
      DTS:DTSID="{EEF75C9C-19CB-492B-A694-B70A78AE4AB1}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">C:\\Users\\33278\\Documents\\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="Project_ID"
      DTS:DTSID="{6F24653C-D21C-454B-8B05-2D20FD021A06}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">BaloisePOC</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="Template_Id"
      DTS:DTSID="{64FDE503-DF86-4143-AD9E-D03CF28D5AB7}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="3">10097</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="6789"
      DTS:ObjectName="Tool_ID"
      DTS:DTSID="{C29A775C-522B-46F9-9579-04D519DACCFD}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="3">1</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:ThreadHint="0"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:DTSID="{6D968888-5FBA-4110-8CA2-142299E63E26}"
      DTS:Description="Script Task"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">
      <DTS:Variables>
        <DTS:Variable
          DTS:Namespace="User"
          DTS:IncludeInDebugDump="2345"
          DTS:ObjectName="SQL_Query"
          DTS:DTSID="{C5DA083B-5245-47C6-8EB7-F62AFE1BA8CB}"
          DTS:CreationName="">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:EventHandlers>
        <DTS:EventHandler
          DTS:refId="Package\Script Task.EventHandlers[OnError]"
          DTS:EventID="153018280"
          DTS:EventName="OnError"
          DTS:LocaleID="-1"
          DTS:DTSID="{B48DB7DD-38C5-4F59-86D7-B0FC2231BA0E}"
          DTS:CreationName="OnError">
          <DTS:Variables>
            <DTS:Variable
              DTS:Namespace="System"
              DTS:IncludeInDebugDump="6789"
              DTS:ObjectName="Propagate"
              DTS:DTSID="{4E2FDBD2-78B6-445A-AFE1-F6A53924D3D0}"
              DTS:Description="The propagate property of the event"
              DTS:CreationName="">
              <DTS:VariableValue
                DTS:DataType="11">-1</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:Executables />
        </DTS:EventHandler>
      </DTS:EventHandlers>
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_0cef29a9393f4e4c8dda023d910526e5"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::SQL_Query,User::Client_ID,User::MetaDataConn,User::PackageSaveLocation,User::Project_ID,User::Template_Id,User::Tool_ID">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="st_0cef29a9393f4e4c8dda023d910526e5.csproj"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_0cef29a9393f4e4c8dda023d910526e5.csproj</RootNamespace>
    <AssemblyName>ST_0cef29a9393f4e4c8dda023d910526e5.csproj</AssemblyName>
    <ProjectGuid>{C0FCFF17-7581-4520-BCC1-8ED2A17FE389}</ProjectGuid>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>x86</PlatformTarget>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Microsoft.SqlServer.Dts.Design, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="devenv.exe" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebug519a594f-da24-4629-a875-35e4ddafb7de/357e17d4-4b90-4aaf-a2e5-26b2b96e4e1a&quot;" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
  <PropertyGroup>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Data;
using System.Data.SqlClient;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using System.Data.Sql;
using Microsoft.SqlServer.Dts.Tasks;
using Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask;
using ExecuteSQLTask=Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask;
using Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.Connections;

using System.Data.SqlTypes;
using Microsoft.SqlServer.Server;
using System.IO;
using System.Collections.Generic;

namespace ST_e9c9cb3a5ac449d293ddeb5242adec78.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/
        public void Main()
        {
            Package p = new Package();
            Sequence exec_SEQ = (Sequence)p.Executables.Add("STOCK:SEQUENCE");
            exec_SEQ.FailPackageOnFailure = true;
            exec_SEQ.FailParentOnFailure = true;
            exec_SEQ.Name = @"Sequence Container";
            exec_SEQ.Description = @"Sequence Container";
            Application Automaton_app = new Application();
            try
            {
                string SQL_Query = Dts.Variables["SQL_Query"].Value.ToString().Trim();
                int test = SQL_Query.IndexOf("SELECT");
                Executable exec = null;

                if (!SQL_Query.Equals(""))
                {
                    if (test.Equals(-1))
                    {
                        SQL_Query = "Exec " + SQL_Query;
                    }
                    ConnectionManager cm = p.Connections.Add("OLEDB");
                    cm.Name = "OLEDB Source";
                    cm.ConnectionString = string.Format("Provider=SQLOLEDB.1;Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False; User ID=sa;Password=Password123;");
                    exec = exec_SEQ.Executables.Add("STOCK:SQLTask");
                    TaskHost th = exec as TaskHost;

                    th.Properties["Name"].SetValue(th, "Execute Procedure");
                    th.Properties["Description"].SetValue(th, "Execute Procedure");
                    th.Properties["Connection"].SetValue(th, "OLEDB Source");
                    //th.Properties["SqlStatementSource"].SetValue(th, "Truncate table dbo.Employee_TGT");
                    th.Properties["SqlStatementSource"].SetValue(th, SQL_Query);
                    //Automaton_app.SaveToSqlServer(p, null, "172.25.164.63", "sa", "Password123");
                    //Automaton_app.SaveToSqlServer(p, null, "172.25.121.105", null, null);

                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + SQL_Query + ".dtsx", p, null);
                }
                else
                {
                    SqlCommand Sqlcmd1 = new SqlCommand();
                    SqlConnection SqlConn1 = new SqlConnection();                    
                    
                    //SqlConn1.ConnectionString = @"Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;";
                    SqlConn1.ConnectionString = Dts.Variables["MetaDataConn"].Value.ToString().Trim();
                    Sqlcmd1.Connection = SqlConn1;
                    Sqlcmd1.CommandType = CommandType.StoredProcedure;
                    Sqlcmd1.CommandText = "[dbo].[ATMTN_GET_CONNECTION_DETAILS_SP]";
                    SqlParameter param1;
                    string Testdata = Dts.Variables["Client_ID"].Value.ToString().Trim();
                    param1 = new SqlParameter("@Client_ID", Dts.Variables["Client_ID"].Value.ToString().Trim());
                    param1.Direction = ParameterDirection.Input;
                    param1.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param1);

                    SqlParameter param2;
                    param2 = new SqlParameter("@Project_ID", Dts.Variables["Project_ID"].Value.ToString().Trim());
                    param2.Direction = ParameterDirection.Input;
                    param2.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param2);

                    SqlParameter param3;
                    param3 = new SqlParameter("@Template_Id", Dts.Variables["Template_Id"].Value.ToString().Trim());
                    param3.Direction = ParameterDirection.Input;
                    param3.DbType = DbType.Int32;
                    Sqlcmd1.Parameters.Add(param3);

                    SqlParameter param4;
                    param4 = new SqlParameter("@PKG_Save_Location", Dts.Variables["PackageSaveLocation"].Value.ToString().Trim());
                    param4.Direction = ParameterDirection.Input;
                    param4.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param4);

                    SqlParameter param5;
                    param5 = new SqlParameter("@Status_code", "");
                    param5.Direction = ParameterDirection.Output;
                    param5.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param5);

                    SqlParameter param6;
                    param6 = new SqlParameter("@Message", "");
                    param6.Direction = ParameterDirection.Output;
                    param6.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param6);

                    SqlParameter param7;
                    param7 = new SqlParameter("@Tool_ID", Dts.Variables["Tool_ID"].Value.ToString().Trim());
                    param7.Direction = ParameterDirection.Input;
                    param7.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param7);

                    SqlDataAdapter sqlAdp1 = new SqlDataAdapter();
                    DataSet dsCols1 = new DataSet();
                    if (SqlConn1.State == ConnectionState.Closed)
                        SqlConn1.Open();
                    sqlAdp1.SelectCommand = Sqlcmd1;
                    

                    SqlDataReader rdr1 = null;
                    rdr1 = Sqlcmd1.ExecuteReader();
                    string SRC_Query = null;
                    string SRC_Query1 = null;
                    string LKP_Query = null;
                    string DST_Table = null;
                    string Template_Name = null;
                    string SRC_Table = null;
                    string TransRule = null;
                    string TransType = null;
                    string LKP_Columns = null;
                    string SRC_ConnectionString = null;
                    string DST_Connection_String = null;
                    int LookupOutput = 0;
                    
                    while (rdr1.Read())
                    {
                        SRC_Query = (string)rdr1["SRC_Query"];
                        TransType = rdr1["Trans_type"].ToString().Replace(" ", "").ToUpper();
                        if (TransType.Contains("MERGEJOIN"))
                        {
                            SRC_Query1 = (string)rdr1["SRC_Query2"];
                        }
                        if (TransType.Contains("LOOKUP"))
                        {
                            LKP_Query = (string)rdr1["LKP_Query"];
                            LKP_Columns = (string)rdr1["LKP_Columns"];
                        }                        
                        DST_Table = (string)rdr1["DST_Table"];                      
                        Template_Name = (string)rdr1["Template_Name"];
                        SRC_Table = (string)rdr1["Task_name"];
                        TransRule = (string)rdr1["Trans_Rule"];
                        DST_Connection_String = (string)rdr1["DST_Connection_String"];
                        SRC_ConnectionString = (string)rdr1["Source_Conn_String"];
                    }
                    
                    SqlConn1.Close();

                    //SqlConn1.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");    

                    SqlCommand SqlcmdType = new SqlCommand();
                    SqlConnection SqlConnType = new SqlConnection();
                    SqlDataReader rdrType = null;
                    SqlDataAdapter sqlAdpType = new SqlDataAdapter();
                    DataSet dsColsType = new DataSet();



                    SqlcmdType.CommandText = "select Type FROM ETL_TEMPLATE_MS WHERE Template_ID = " + Dts.Variables["Template_Id"].Value.ToString().Trim();

                    SqlConnType.ConnectionString = Dts.Variables["MetaDataConn"].Value.ToString().Trim();
                    SqlcmdType.Connection = SqlConnType;
                    if (SqlConnType.State == ConnectionState.Closed)
                        SqlConnType.Open();
                    SqlcmdType.Connection = SqlConnType;
                    SqlcmdType.CommandType = CommandType.Text;
                    sqlAdpType.SelectCommand = SqlcmdType;

                    rdrType = SqlcmdType.ExecuteReader();
                    
                    string TemplateType = string.Empty;
                    while (rdrType.Read())
                    {

                        TemplateType = (string)rdrType["Type"];
                    }

                    SqlConnType.Close();
                    if(TemplateType.ToUpper() == "DATATYPE")
                    {

                        SqlCommand SqlcmdExists= new SqlCommand();
                        SqlConnection SqlConnExists = new SqlConnection();
                        SqlDataReader rdrExists = null;
                        SqlDataAdapter sqlAdpExists = new SqlDataAdapter();
                        DataSet dsColsExists = new DataSet();


                        SqlConnExists.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");
                        SqlcmdExists.CommandText = "select '1' from Information_Schema.Tables where TABLE_NAME='" + DST_Table + "'";


                        SqlcmdExists.Connection = SqlConnExists;
                        if (SqlConnExists.State == ConnectionState.Closed)
                            SqlConnExists.Open();
                        SqlcmdExists.Connection = SqlConnExists;
                        SqlcmdExists.CommandType = CommandType.Text;
                        sqlAdpExists.SelectCommand = SqlcmdExists;

                        rdrExists = SqlcmdExists.ExecuteReader();
                        int TableExists = 0;

                        while (rdrExists.Read())
                        {
                            TableExists = 1;
                        }

                        SqlConnExists.Close();
                        
                        SqlCommand SqlcmdCreateTable = new SqlCommand();
                        SqlConnection SqlConnCreateTable = new SqlConnection();

                        //SqlConn1.ConnectionString = @"Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;";
                        SqlConnCreateTable.ConnectionString = Dts.Variables["MetaDataConn"].Value.ToString().Trim();
                        SqlcmdCreateTable.Connection = SqlConnCreateTable;
                        SqlcmdCreateTable.CommandType = CommandType.StoredProcedure;
                        SqlcmdCreateTable.CommandText = "[dbo].[ATMTN_GET_DATATYPE_DETAILS_SP]";
                            
                        SqlParameter paramCreate1;
                        paramCreate1 = new SqlParameter("@Client_ID", Dts.Variables["Client_ID"].Value.ToString().Trim());
                        paramCreate1.Direction = ParameterDirection.Input;
                        paramCreate1.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate1);

                        SqlParameter paramCreate2;
                        paramCreate2 = new SqlParameter("@Project_ID", Dts.Variables["Project_ID"].Value.ToString().Trim());
                        paramCreate2.Direction = ParameterDirection.Input;
                        paramCreate2.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate2);

                        SqlParameter paramCreate3;
                        paramCreate3 = new SqlParameter("@Template_Id", Dts.Variables["Template_Id"].Value.ToString().Trim());
                        paramCreate3.Direction = ParameterDirection.Input;
                        paramCreate3.DbType = DbType.Int32;
                        SqlcmdCreateTable.Parameters.Add(paramCreate3);

                        SqlParameter paramCreate4;
                        paramCreate4 = new SqlParameter("@Tool_ID", Dts.Variables["Tool_ID"].Value.ToString().Trim());
                        paramCreate4.Direction = ParameterDirection.Input;
                        paramCreate4.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate4);

                        SqlParameter paramCreate5;
                        paramCreate5 = new SqlParameter("@TableExists", TableExists);
                        paramCreate5.Direction = ParameterDirection.Input;
                        paramCreate5.DbType = DbType.Int32;
                        SqlcmdCreateTable.Parameters.Add(paramCreate5);

                        SqlParameter paramCreate6;
                        paramCreate6 = new SqlParameter("@Message", "");
                        paramCreate6.Direction = ParameterDirection.Output;
                        paramCreate6.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate6);

                           

                        SqlDataAdapter sqlAdpCreateTable = new SqlDataAdapter();

                        if (SqlConnCreateTable.State == ConnectionState.Closed)
                            SqlConnCreateTable.Open();
                        sqlAdpCreateTable.SelectCommand = SqlcmdCreateTable;


                        SqlDataReader rdrCreateTable = null;
                        rdrCreateTable = SqlcmdCreateTable.ExecuteReader();
                        SqlConnCreateTable.Close();
                        

                    }

                    
                    //Source Connection
                    ConnectionManager cm = p.Connections.Add("OLEDB");
                    cm.Name = "OLEDB Source";
                    cm.ConnectionString = SRC_ConnectionString;

                    //Destination Connection
                    ConnectionManager cm1 = p.Connections.Add("OLEDB");
                    cm1.Name = "OLEDB Destination";
                    cm1.ConnectionString = DST_Connection_String;
                    Executable e = exec_SEQ.Executables.Add("STOCK:PipelineTask");
                    

                    string ExecSQL_First = "N";
                    int parameterCount = 0;
                    string[] parameterList = null;
                    string SRC_Target = null;
                    int DType = 130;
                    Variable SQLParam;
                    p.Variables.Add("V_SourceProductName", false, "User", "TESTING");
                    

                    if (TransType.Split('~')[0].Trim() == "EXECUTESQL" && TransRule.Split('~')[0].Trim().Split('#')[0].Trim().ToUpper() == "PRE")
                    {
                        exec = exec_SEQ.Executables.Add("STOCK:SQLTask");
                        TaskHost th = exec as TaskHost;

                        string SQLConnection = null;


                        ExecuteSQLTask EXST = (ExecuteSQLTask)th.InnerObject;

                        SRC_Target = TransRule.Split('~')[0].Trim().Split('#')[2].Trim();

                        parameterList = null;
                        if (SRC_Target.Contains("$"))
                        {
                            parameterList = SRC_Target.Split('$')[1].Trim().Split(',');
                            SRC_Target = SRC_Target.Split('$')[0].Trim().ToUpper();
                        }


                        if (parameterList != null)
                        {

                            foreach (string parameter in parameterList)
                            {
                                EXST.ParameterBindings.Add();
                               
                                switch (parameter.Split('.')[0].ToUpper().Trim())
                                {
                                    case "STRING":
                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", "0");
                                        DType = 130;
                                        break;
                                    case "DATETIME":
                                    case "DATE":

                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", DateTime.Now);
                                        DType = 133;
                                        break;
                                    default:
                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", 0);
                                        DType = 3;
                                        break;
                                }


                                IDTSParameterBinding parameterBinding = EXST.ParameterBindings.GetBinding(parameterCount);
                                parameterBinding.DtsVariableName = "User::" + parameter.Split('.')[1];

                                parameterBinding.ParameterDirection = ParameterDirections.Output;
                                //parameterBinding.DataType = Dtype;
                                parameterBinding.DataType = DType;
                                //parameterBinding.DataType = (int)OleDBDataTypes.VARCHAR;
                                parameterBinding.ParameterName = parameterCount;
                                parameterBinding.ParameterSize = -1;
                                parameterCount++;

                            }

                        }




                        if (TransRule.Split('~')[0].Trim().Split('#')[2].Trim().ToUpper().Split('$')[0].Trim() == "SOURCE")
                        {
                            SQLConnection = "OLEDB Source";
                        }
                        else
                        {
                            SQLConnection = "OLEDB Destination";
                        }
                        th.Properties["Name"].SetValue(th, "Execute Procedure");
                        th.Properties["Description"].SetValue(th, "Execute Procedure");
                        th.Properties["Connection"].SetValue(th, SQLConnection);
                        th.Properties["SqlStatementSource"].SetValue(th, TransRule.Split('~')[0].Split('#')[1]);
                        
                        if (TransType.Split('~')[1].Trim() != "EXECUTESQL")
                        {
                            PrecedenceConstraint pcFileTasks1 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec, (Executable)e);
                        }
                        ExecSQL_First = "Y";
                    }
                    TaskHost thMainPipe = e as TaskHost;
                    MainPipe dataFlowTask = thMainPipe.InnerObject as MainPipe;

                    thMainPipe.Name = "DFT_" + DST_Table; 
                    
                    IDTSComponentMetaData100 component = dataFlowTask.ComponentMetaDataCollection.New();
                    component.ComponentClassID = "DTSAdapter.OleDbSource";
                    IDTSDesigntimeComponent100 instance = component.Instantiate();
                    instance.ProvideComponentProperties();
                    component.Name = "OLEDBSource";
                    component.Description = "OLEDBSource";
                    
                    //Connect the Execute SQL task to the data flow task

                    if (component.RuntimeConnectionCollection.Count > 0)
                    {
                        component.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);
                        component.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;
                    }
                                   
                    instance.SetComponentProperty("AccessMode", 2);
                    instance.SetComponentProperty("SqlCommand", SRC_Query);

                    instance.AcquireConnections(null);
                    instance.ReinitializeMetaData();
                    instance.ReleaseConnections();
                    
                    IDTSComponentMetaData100 dataConditional_Split = null;
                    IDTSComponentMetaData100 data_DerivedColumn = null;
                    IDTSComponentMetaData100 dataConvertComponent = null;
                    IDTSComponentMetaData100 aggregate = null;
                    IDTSComponentMetaData100 lookupComponent = null;
                    IDTSComponentMetaData100 componentUnionAll = null;
                    IDTSComponentMetaData100 RowCountComponent = null;
                    IDTSComponentMetaData100 sortWrapper = null;
                    IDTSComponentMetaData100 MergeSortWrapper = null;
                    IDTSComponentMetaData100 dataOLEDbCommand = null;
                    IDTSComponentMetaData100 componentMerge = null;
                    IDTSComponentMetaData100 mergeJoin = null;
                    IDTSComponentMetaData100 copyMapComponent = null;
                    IDTSComponentMetaData100 multiCastComponent = null;
                    IDTSComponentMetaData100 component1 = null;
                    IDTSComponentMetaData100 componentSCD = null;
                    string[] TransList = TransType.Split('~');
                    string[] RuleList = TransRule.Split('~');
                    string namelist = string.Empty;
                    string multiCast = "N";
                    String[] joinColumns = null;

                    string LastTrans = "OleDBSource";
                    string testsplit;
                    int condSplitCnt = 0;
                    string MulticastTargetTable = string.Empty;
                    int RuleCounter = 0;
                    if (ExecSQL_First == "Y")
                    {
                        RuleCounter = 1;
                    }

                    for (int i = RuleCounter; i < TransList.Length; i++)
                    {
                        
                        testsplit = TransType.Split(',')[0].Trim();
                        RuleList[i] = RuleList[i].Trim();
                        switch (TransList[i])
                        {
                            case "EXECUTESQL":

                                Executable exec1 = exec_SEQ.Executables.Add("STOCK:SQLTask");
                                TaskHost th1 = exec1 as TaskHost;
                               
                                ExecuteSQLTask EST = (ExecuteSQLTask)th1.InnerObject;
                                parameterCount = 0;
                                string ExecProcName = "Execute Procedure_" + i;
                                string testSql = RuleList[i];
                                string ExecSql_query = RuleList[i].Split('#')[1];
                                string SQLConnection = null;
                                SRC_Target = RuleList[i].Split('#')[2];
                                
                                parameterList = null;
                                if (SRC_Target.Contains("$"))
                                {
                                    parameterList = SRC_Target.Split('$')[1].Trim().Split(',');
                                    SRC_Target = SRC_Target.Split('$')[0].Trim().ToUpper();
                                }

                                
                                if (parameterList != null)
                                {
                                    
                                    foreach (string parameter in parameterList)
                                    {
                                        EST.ParameterBindings.Add();

                                        switch (parameter.Split('.')[0].ToUpper().Trim())
                                        {
                                            case "STRING":
                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", "0");
                                                DType = 130;
                                                break;
                                            case "DATETIME":
                                            case "DATE":

                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", DateTime.Now);
                                                DType = 133;
                                                break;
                                            default:
                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", 0);
                                                DType = 3;
                                                break;
                                        }


                                        IDTSParameterBinding parameterBinding = EST.ParameterBindings.GetBinding(parameterCount);
                                        parameterBinding.DtsVariableName = "User::" + parameter.Split('.')[1];

                                        parameterBinding.ParameterDirection = ParameterDirections.Output;
                                        //parameterBinding.DataType = Dtype;
                                        parameterBinding.DataType = DType;
                                        //parameterBinding.DataType = (int)OleDBDataTypes.VARCHAR;
                                        parameterBinding.ParameterName = parameterCount;
                                        parameterBinding.ParameterSize = -1;
                                        parameterCount++;

                                    }

                                }

                                if (RuleList[i].Split('#')[2].Trim().ToUpper().Split('$')[0].Trim() == "SOURCE")
                                {
                                    SQLConnection = "OLEDB Source";
                                }
                                else
                                {
                                    SQLConnection = "OLEDB Destination";
                                }

                                th1.Properties["Name"].SetValue(th1, ExecProcName);
                                th1.Properties["Description"].SetValue(th1, "Execute Procedure");
                                th1.Properties["Connection"].SetValue(th1, SQLConnection);
                                th1.Properties["SqlStatementSource"].SetValue(th1, ExecSql_query);

                                if (ExecSQL_First == "Y" && RuleList[i].Split('#')[0].Trim().ToUpper() == "PRE")
                                {

                                    PrecedenceConstraint pcFileTasks2 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec, (Executable)exec1);
                                    PrecedenceConstraint pcFileTasks3 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec1, (Executable)e);
                                    ExecSQL_First = "N";
                                }
                                else
                                {
                                    PrecedenceConstraint pcFileTasks4 = exec_SEQ.PrecedenceConstraints.Add((Executable)e, (Executable)exec1);
                                }

                                break;
                            case "CONDITIONALSPLIT":
                                dataConditional_Split = dataFlowTask.ComponentMetaDataCollection.New();
                                dataConditional_Split.ComponentClassID = "DTSTransform.ConditionalSplit";
                                CManagedComponentWrapper data_Split_Wrapper = dataConditional_Split.Instantiate();
                                data_Split_Wrapper.ProvideComponentProperties();
                                dataConditional_Split.Name = "Filter_Router_"+i;
                                dataConditional_Split.Description = "Evaluates and directs rows in a dataset based a column.";

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 input = dataConditional_Split.InputCollection[0];
                                IDTSVirtualInput100 dataConvertVirtualInput = input.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 destinationVirtualInputColumns = dataConvertVirtualInput.VirtualInputColumnCollection;
                                IDTSOutput100 dataConvertOutput = dataConditional_Split.OutputCollection[0];
                                IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;

                                int sourceColumnLineageId;
                                int evalOrder = 0;

                                string get_name = "";
                                string[] CondRules = RuleList[i].Split('#');

                                //get_name = ConditionalSplit.Split('>')[0].Trim();
                                foreach (string rule in CondRules)
                                {
                                    foreach (IDTSVirtualInputColumn100 virtualInputColumn in destinationVirtualInputColumns)
                                    {
                                        get_name = virtualInputColumn.Name.ToString();
                                        string getname = "[" + get_name + "]";

                                        if (rule.Trim().ToUpper().Contains(get_name.ToUpper()))
                                        {
                                            sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                            data_Split_Wrapper.SetUsageType(input.ID, dataConvertVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READONLY);
                                            IDTSOutput100 splitOutput_1 = data_Split_Wrapper.InsertOutput(DTSInsertPlacement.IP_BEFORE, dataConditional_Split.OutputCollection[evalOrder].ID);
                                            data_Split_Wrapper.SetOutputProperty(splitOutput_1.ID, "EvaluationOrder", evalOrder);
                                            data_Split_Wrapper.SetOutputProperty(splitOutput_1.ID, "FriendlyExpression", rule.Trim());
                                            evalOrder++;
                                        }
                                    }
                                    
                                    condSplitCnt = evalOrder - 1;
                                }
                                LastTrans = "ConditionalSplit";
                                break;
                            case "DERIVEDCOLUMN":
                                data_DerivedColumn = dataFlowTask.ComponentMetaDataCollection.New();
                                data_DerivedColumn.ComponentClassID = "DTSTransform.DerivedColumn";
                                CManagedComponentWrapper DesignDerivedTransformColumns = data_DerivedColumn.Instantiate();
                                DesignDerivedTransformColumns.ProvideComponentProperties();
                                data_DerivedColumn.Name = "DerivedColTransform_" + i;

                                data_DerivedColumn.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
                                data_DerivedColumn.InputCollection[0].HasSideEffects = false;
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 DerivedColumnInput = data_DerivedColumn.InputCollection[0];
                                IDTSVirtualInput100 DerivedColumnVirtualInput = DerivedColumnInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 DerivedColumnVirtualInputColumns = DerivedColumnVirtualInput.VirtualInputColumnCollection;
                                IDTSCustomProperty100 ConcatProperty = null;
                                //RuleList[i] = RuleList[i] + "#ZZ_STATUS_CODE = \"P\"";


                                string[] DerColumns = new string[10]; //create 10 empty index in array terms




                                string[] RulesList = RuleList[i].Split('#');
                                //int DerColCount = 0;

                                List<string> ColCollection = new List<string>();
                                foreach (string Rulevalues in RulesList)
                                {
                                    string _val = string.Empty;
                                    _val = Rulevalues.Split('$')[0].Trim();
                                    ColCollection.Add(_val);
                                }

                                foreach (string RuleValue in RulesList)
                                {
                                    string newDerCol = "Y";
                                    string _v = string.Empty;
                                    _v = RuleValue.Split('$')[0].Trim();


                                    // Iterate through the virtual input column collection.
                                    foreach (IDTSVirtualInputColumn100 vColumn in DerivedColumnVirtualInputColumns)
                                    {


                                        for (int j = 0; j < RulesList.Length; j++)
                                        {


                                            //DerColumns[DerColCount] = vColumn.Name;
                                            //DerColCount++;
                                            if (vColumn.Name == _v)
                                            {
                                                IDTSInputColumn100 vCol = DesignDerivedTransformColumns.SetUsageType(DerivedColumnInput.ID, DerivedColumnVirtualInput, vColumn.LineageID, DTSUsageType.UT_READWRITE);
                                                break;
                                            }

                                        }


                                    }

                                    string[] ColumnCollection = ColCollection.ToArray();

                                    foreach (IDTSVirtualInputColumn100 vColumn in DerivedColumnVirtualInputColumns)
                                    {

                                        string ColName = Array.Find(ColCollection.ToArray(), element => element.Equals(vColumn.Name, StringComparison.Ordinal));
                                        if (string.IsNullOrEmpty(ColName))
                                        {
                                            IDTSInputColumn100 vCol = DesignDerivedTransformColumns.SetUsageType(DerivedColumnInput.ID, DerivedColumnVirtualInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                        }
                                    }

                                    foreach (IDTSInputColumn100 inputColumn in DerivedColumnInput.InputColumnCollection)
                                    {
                                        if (inputColumn.Name == RuleValue.Split('$')[0].Trim())
                                        {
                                            inputColumn.Description = string.Format("Override the orginal column {0} with OTHERS if the string is NULL.", inputColumn.Name);
                                            ConcatProperty = inputColumn.CustomPropertyCollection["Expression"];

                                            ConcatProperty.Name = "Expression";
                                            ConcatProperty.Value = RuleValue.Split('$')[1].Trim();

                                            ConcatProperty = inputColumn.CustomPropertyCollection["FriendlyExpression"];
                                            ConcatProperty.Name = "FriendlyExpression";
                                            ConcatProperty.Value = ConcatProperty.Value = RuleValue.Split('$')[1].Trim();
                                            newDerCol = "N";
                                        }
                                    }

                                    if (newDerCol == "Y")
                                    {
                                        IDTSOutputColumn100 ConCatCol = data_DerivedColumn.OutputCollection[0].OutputColumnCollection.New();
                                        ConCatCol.Name = RuleValue.Split('$')[0].Trim();
                                        ConCatCol.ExternalMetadataColumnID = 0;
                                        ConCatCol.ErrorRowDisposition = DTSRowDisposition.RD_FailComponent;
                                        ConCatCol.TruncationRowDisposition = DTSRowDisposition.RD_FailComponent;
                                        IDTSCustomProperty100 ConCatProp = ConCatCol.CustomPropertyCollection.New();
                                        ConCatCol.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                                        ConCatProp.Name = "Expression";
                                        ConCatProp.Value = RuleValue.Split('$')[1].Trim();
                                        ConCatProp = ConCatCol.CustomPropertyCollection.New();
                                        ConCatProp.Name = "FriendlyExpression";
                                        ConCatProp.Value = RuleValue.Split('$')[1].Trim();
                                        ConCatCol.MappedColumnID = 0;

                                    }
                                }

                                LastTrans = "DerivedColumn";

                                break;
                            case "CHARACTERMAP":
                                dataConvertComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                dataConvertComponent.ComponentClassID = "DTSTransform.CharacterMap";
                                dataConvertComponent.Name = "capitalise all initials_"+i;
                                dataConvertComponent.Description = "capitalise all initials";
                                CManagedComponentWrapper dataConvertWrapper = dataConvertComponent.Instantiate();
                                dataConvertWrapper.ProvideComponentProperties();
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 CharMapInput = dataConvertComponent.InputCollection[0];
                                IDTSVirtualInput100 CharMapDataConvertVirtualInput = dataConvertComponent.InputCollection[0].GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 CharMapDestinationVirtualInputColumns = CharMapDataConvertVirtualInput.VirtualInputColumnCollection;
                                IDTSOutput100 CharMapDataConvertOutput = dataConvertComponent.OutputCollection[0];
                                IDTSOutputColumnCollection100 CharMapDataConvertOutputColumns = CharMapDataConvertOutput.OutputColumnCollection;
                                //IDTSOutputColumn100 newOutputColumn;
                                foreach (IDTSVirtualInputColumn100 virtualInputColumn in CharMapDestinationVirtualInputColumns)
                                {
                                    get_name = virtualInputColumn.Name.ToString();
                                    IDTSInputColumn100 inputColumn = dataConvertWrapper.SetUsageType(CharMapInput.ID, CharMapDataConvertVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READONLY);
                                    
                                    if (RuleList[i].IndexOf(get_name) > 0)
                                    {
                                        sourceColumnLineageId = CharMapDataConvertVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                        dataConvertWrapper.SetUsageType(dataConvertComponent.InputCollection[0].ID, CharMapDataConvertVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READWRITE);
                                        //dataConvertWrapper.SetOutputColumnProperty(CharMapDataConvertOutput.ID, virtualInputColumn.ID, "MapFlags", 0);
                                        
                                        /*-------------Enable this code to add a new column into the data flow --------------------*/
                                        //newOutputColumn=dataConvertWrapper.InsertOutputColumnAt(CharMapDataConvertOutput.ID, 1, get_name, string.Empty);
                                        //newOutputColumn.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, 100, 0, 0, 1252);
                                        //newOutputColumn.MappedColumnID = 0;
                                        //dataConvertWrapper.SetOutputColumnProperty(CharMapDataConvertOutput.ID, newOutputColumn.ID, "InputColumnLineageID", sourceColumnLineageId);

                                        /*  MapColumns details
                                         -----------------------------
                                            Byte reversal (2)
                                            Full width (6)
                                            Half width (5)
                                            Hiragana (3)
                                            Katakana (4)
                                            Linguistic casing (7)
                                            Lowercase (0)
                                            Simplified Chinese (8)
                                            Traditional Chinese(9)
                                            Uppercase (1)*/

                                    }
                                }
                                LastTrans = "CharacterMap";
                                break;
                            case "AGGREGATE":
                                aggregate = dataFlowTask.ComponentMetaDataCollection.New();
                                aggregate.ComponentClassID = "DTSTransform.Aggregate";
                                CManagedComponentWrapper AggregateWrapper = aggregate.Instantiate();
                                AggregateWrapper.ProvideComponentProperties();
                                aggregate.Name = "Aggregate_" + i;
                                //AggregateWrapper.AcquireConnections(null);
                                AggregateWrapper.AcquireConnections(null);
                                AggregateWrapper.ReinitializeMetaData();
                                AggregateWrapper.ReleaseConnections();

                                //aggregate.InputCollection[0].InputColumnCollection.RemoveAll();
                                //aggregate.OutputCollection[0].OutputColumnCollection.RemoveAll();

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                }

                                IDTSInput100 AggregateInput = aggregate.InputCollection[0];
                                IDTSVirtualInput100 AggregateVirtualInput = AggregateInput.GetVirtualInput();
                                IDTSOutput100 AggregateOutputCollection = aggregate.OutputCollection[0];
                                IDTSInput100 AggregateInputCollection = aggregate.InputCollection[0];
                                IDTSVirtualInputColumnCollection100 AggregateVirtualInputColumns = AggregateVirtualInput.VirtualInputColumnCollection;

                                foreach (IDTSVirtualInputColumn100 virtualInputColumn in AggregateVirtualInputColumns)
                                {
                                    get_name = virtualInputColumn.Name.ToString();
                                    //AggregateWrapper.SetUsageType(AggregateInput.ID, AggregateVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READWRITE);
                                    IDTSInputColumn100 inputColumn = AggregateWrapper.SetUsageType(AggregateInput.ID, AggregateVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READONLY);

                                    //AggregateWrapper.SetInputColumnProperty(AggregateInput.ID, inputColumn.ID, "CopyFromReferenceColumn", virtualInputColumn);
                                    
                                    string ColumnName = null;
                                    if (RuleList[i].IndexOf(get_name) != -1)
                                    {
                                        ColumnName = RuleList[i].Split('=')[0].Trim();
                                       
                                        string RuleName = RuleList[i].Split('=')[1].Trim().Split('(')[0].Trim().ToLower();
                                        int AggregateProperty = 0;
                                        switch (RuleName)
                                        {
                                            /*
                                            case "count":
                                                AggregateProperty = 1;
                                                break;
                                            case "countall":
                                                AggregateProperty = 2;
                                                break;
                                            case "countdistinct":
                                                AggregateProperty = 3;
                                                break;
                                            case "sum":
                                                AggregateProperty = 4;
                                                break;
                                            case "max":
                                                AggregateProperty = 5;
                                                break;
                                            case "min":
                                                AggregateProperty = 6;
                                                break; */

                                            case "count":
                                                AggregateProperty = 1;
                                                break;
                                            case "countall":
                                                AggregateProperty = 2;
                                                break;
                                            case "countdistinct":
                                                AggregateProperty = 3;
                                                break;
                                            case "sum":
                                                AggregateProperty = 4;
                                                break;
                                            case "avg":
                                                AggregateProperty = 5;
                                                break;
                                            case "min":
                                                AggregateProperty = 6;
                                                break;
                                            case "max":
                                                AggregateProperty = 7;
                                                break;
                                        }

                                        //AggregateWrapper.SetUsageType(AggregateInputCollection.ID, AggregateVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READWRITE);
                                        IDTSOutputColumn100 newOutputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, ColumnName, string.Empty);
                                        newOutputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                        newOutputColumn.MappedColumnID = 0;
                                        for (int x = 0; x < newOutputColumn.CustomPropertyCollection.Count; x++)
                                        {
                                            IDTSCustomProperty100 property = newOutputColumn.CustomPropertyCollection[x];
                                            switch (property.Name)
                                            {
                                                case "AggregationColumnId":
                                                    property.Value = virtualInputColumn.LineageID;
                                                    break;
                                                case "AggregationType":
                                                    property.Value = AggregateProperty;
                                                    break;
                                                case "IsBig":
                                                    property.Value = 0;
                                                    break;
                                                case "AggregationComparisonFlags":
                                                    property.Value = 0;
                                                    break;
                                            }
                                        }
                                        /*IDTSOutputColumn100 InputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, get_name, string.Empty);
                                       InputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                       InputColumn.MappedColumnID = 1;
                                       sourceColumnLineageId = AggregateVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                       for (int x = 0; x < InputColumn.CustomPropertyCollection.Count; x++)
                                       {
                                           IDTSCustomProperty100 property = InputColumn.CustomPropertyCollection[x];
                                           switch (property.Name)
                                           {
                                               case "AggregationColumnId":
                                                   property.Value = virtualInputColumn.LineageID;
                                                   break;
                                               case "AggregationType":
                                                   property.Value = 0;
                                                   break;
                                               case "IsBig":
                                                   property.Value = 0;
                                                   break;
                                               case "AggregationComparisonFlags":
                                                   property.Value = 0;
                                                   break;
                                           }
                                       } */
                                    }
                                    else
                                    {
                                        IDTSOutputColumn100 InputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, get_name, string.Empty);
                                        InputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                        for (int x = 0; x < InputColumn.CustomPropertyCollection.Count; x++)
                                        {
                                            IDTSCustomProperty100 property = InputColumn.CustomPropertyCollection[x];
                                            switch (property.Name)
                                            {
                                                case "AggregationColumnId":
                                                    property.Value = virtualInputColumn.LineageID;
                                                    break;
                                                case "AggregationType":
                                                    property.Value = 0;
                                                    break;
                                                case "IsBig":
                                                    property.Value = 0;
                                                    break;
                                                case "AggregationComparisonFlags":
                                                    property.Value = 0;
                                                    break;
                                            }
                                        }
                                    }
                                }

                                LastTrans = "Aggregate";
                                break;
                            case "LOOKUP":
                                lookupComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                lookupComponent.ComponentClassID = "DTSTransform.Lookup";

                                if(RuleList[i].Contains("$"))
                                {
                                    if (RuleList[i].Split('$')[1].Trim().Replace(" ","").ToUpper() == "NOMATCH")
                                    {
                                        LookupOutput = 1;
                                    }

                                    RuleList[i] = RuleList[i].Split('$')[0].Trim();
                                }

                                if (RuleList[i].Contains("#"))
                                {
                                    LKP_Query = LKP_Query + " WHERE " + RuleList[i].Split('#')[1].Trim();

                                    RuleList[i] = RuleList[i].Split('#')[0].Trim();
                                }
                                

                                
                                CManagedComponentWrapper lookupWrapper = lookupComponent.Instantiate();
                                lookupWrapper.ProvideComponentProperties();
                                lookupComponent.Name = "Lookup_" + i;
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], lookupComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                }
                                lookupComponent.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);

                                lookupComponent.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;

                                // Cache Type - Full = 0, Partial = 1, None = 2

                                lookupWrapper.SetComponentProperty("CacheType", 0);
                                lookupWrapper.SetComponentProperty("NoMatchBehavior", 1);// 1= Redirect rows to No Match output
                                lookupWrapper.SetComponentProperty("SqlCommand", LKP_Query);

                                // initialize metadata

                                lookupWrapper.AcquireConnections(null);
                                lookupWrapper.ReinitializeMetaData();
                                lookupWrapper.ReleaseConnections();

                                // Mark the columns we are joining on

                                IDTSInput100 lookupInput = lookupComponent.InputCollection[0];
                                IDTSInputColumnCollection100 lookupInputColumns = lookupInput.InputColumnCollection;
                                IDTSVirtualInput100 lookupVirtualInput = lookupInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 lookupVirtualInputColumns = lookupVirtualInput.VirtualInputColumnCollection;

                                // Note: join columns should be marked as READONLY

                                joinColumns = RuleList[i].Split('|');
                                foreach (string conditions in joinColumns)
                                {
                                    string columnName = conditions.Replace("IN_", "").Split('=')[1].Trim();
                                    IDTSVirtualInputColumn100 virtualColumn = lookupVirtualInputColumns[columnName];
                                    IDTSInputColumn100 inputColumn = lookupWrapper.SetUsageType(lookupInput.ID, lookupVirtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                    lookupWrapper.SetInputColumnProperty(lookupInput.ID, inputColumn.ID, "JoinToReferenceColumn", conditions.Replace("IN_", "").Split('=')[0].Trim());
                                }

                                string[] ReadWriteColumns = LKP_Query.Replace("from", "~").Split('~')[0].Replace("SELECT", "").Replace(" ", "").Split(',');
                                //var ReadWriteColumns = new string[] { "SNo" };
                                /* 
                                string columnName1;
                                foreach (string columnName in ReadWriteColumns)
                                {
                                    if(columnName.Contains("AS"))
                                    {
                                        columnName1 = columnName.Replace("AS", "~").Split('~')[1];
                                    }
                                    else
                                    {
                                        columnName1 = columnName;
                                    }
                                    IDTSVirtualInputColumn100 virtualColumn = lookupVirtualInputColumns[columnName1];
                                    IDTSInputColumn100 inputColumn = lookupWrapper.SetUsageType(lookupInput.ID, lookupVirtualInput, virtualColumn.LineageID, DTSUsageType.UT_READWRITE);

                                    lookupWrapper.SetInputColumnProperty(lookupInput.ID, inputColumn.ID, "CopyFromReferenceColumn", columnName1);
                                }                                 
                                */
                    
                                //LKP_New_Columns = "address,city,company_name,county,cust_code,email,first_name,phone1,phone2,state,zip,ZZ_STATUS_CODE";
                                string[] newColumns = LKP_Columns.Split(',');
                                IDTSOutput100 lookupMatchOutput = lookupComponent.OutputCollection[LookupOutput];
                                string SourceJoinColumn = joinColumns[0].Replace("IN_", "").Split('=')[1].Trim();
                                foreach (string sourceColumn in newColumns)
                                {
                                    if(SourceJoinColumn != sourceColumn)
                                    {
                                        //sourceColumn =  sourceColumn;
                                        string newColumnName = sourceColumn.Trim();
                                        string description = sourceColumn;

                                        // insert the new column
                                        IDTSOutputColumn100 outputColumn = lookupWrapper.InsertOutputColumnAt(lookupMatchOutput.ID, 0, newColumnName, description);
                                        outputColumn.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                                        lookupWrapper.SetOutputColumnProperty(lookupMatchOutput.ID, outputColumn.ID, "CopyFromReferenceColumn", sourceColumn);
                                    }
                                }

                                LastTrans = "Lookup";
                                break;

                            case "ROWCOUNT":
                                Variable Counter = p.Variables.Add(RuleList[i].Trim(), false, "User", 0);
                                RowCountComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                RowCountComponent.ComponentClassID = "DTSTransform.RowCount";
                                RowCountComponent.Name = "get row counter_"+i;
                                RowCountComponent.Description = "gets row counter";

                                CManagedComponentWrapper RowCountWrapper = RowCountComponent.Instantiate();
                                RowCountWrapper.ProvideComponentProperties();
                                RowCountWrapper.SetComponentProperty("VariableName", RuleList[i].Trim());

                                // Connect the source and the transform

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                }

                                LastTrans = "RowCount";
                                break;
                            case "SORT":
                            case "SORT&ELIMINATEDUPLICATES":
                                string SortColumn = RuleList[i].Split(' ')[0].Trim();
                                string SortType = RuleList[i].Split(' ')[1].Trim();
                                sortWrapper = dataFlowTask.ComponentMetaDataCollection.New();
                                
                                sortWrapper.ComponentClassID = "DTSTransform.Sort";
                                
                                CManagedComponentWrapper sortinstance = sortWrapper.Instantiate();
                                sortinstance.ProvideComponentProperties();
                                sortWrapper.Name = "SortTransform_"+i;
                                sortWrapper.Description = "Sortcomponent";

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], sortWrapper.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                }
                                string[] sortcolumns = SortColumn.Split(',');
                                IDTSInputColumn100 col = null;
                                IDTSVirtualInput100 vSortInput = sortWrapper.InputCollection[0].GetVirtualInput();
                                //IDTSVirtualInputColumn100 vColumn = null;
                                int sortPos = 1;
                                foreach (string SortColumn1 in sortcolumns)
                                {
                                    foreach (IDTSVirtualInputColumn100 vColumn in vSortInput.VirtualInputColumnCollection)
                                    {
                                        //if (SortColumn.Contains(col.Name))
                                        if (vColumn.Name == SortColumn1.Trim())
                                        {
                                            col = sortinstance.SetUsageType(sortWrapper.InputCollection[0].ID, vSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                            int sortPref;

                                            if (SortType.ToUpper() == "DESC")
                                            {
                                                sortPref = -1 * sortPos;
                                            }
                                            else
                                            {
                                                sortPref = sortPos;
                                            }
                                            if (col.CustomPropertyCollection.Count > 0)
                                            {
                                                sortinstance.SetInputColumnProperty(sortWrapper.InputCollection[0].ID, col.ID, "NewSortKeyPosition", sortPref);
                                                sortPos++;
                                            }
                                        }
                                    }
                                }
                                foreach (IDTSVirtualInputColumn100 vColumn in vSortInput.VirtualInputColumnCollection)
                                {
                                    if (!SortColumn.Contains(vColumn.Name))
                                    {
                                        col = sortinstance.SetUsageType(sortWrapper.InputCollection[0].ID, vSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                    }
                                }
                                if (TransList[i] == "SORT&ELIMINATEDUPLICATES")
                                {
                                    sortinstance.SetComponentProperty("EliminateDuplicates", 1);
                                }
                                else
                                {
                                    sortinstance.SetComponentProperty("EliminateDuplicates", 0);
                                }

                                LastTrans = "Sort";
                                break;
                            case "UNIONALL":
                                componentUnionAll = dataFlowTask.ComponentMetaDataCollection.New();
                                componentUnionAll.ComponentClassID = "DTSTransform.UnionAll";
                                CManagedComponentWrapper instanceUnionAll = componentUnionAll.Instantiate();
                                instanceUnionAll.ProvideComponentProperties();
                                componentUnionAll.Name = "Union All columns_"+i;                                

                                // connect path form source to destination
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                }

                                LastTrans = "UnionAll";
                                break;
                            case "MERGE":                               

                                componentMerge = dataFlowTask.ComponentMetaDataCollection.New();                   
                                componentMerge.ComponentClassID = "DTSTransform.Merge";
                                CManagedComponentWrapper instanceMerge = componentMerge.Instantiate();
                                instanceMerge.ProvideComponentProperties();
                                componentMerge.Name = "Merge All columns_"+i;
                                component1.OutputCollection[0].IsSorted = true;
                                component1.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;

                                // connect path form source to destination
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentMerge.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break; 
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                }
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component1.OutputCollection[0], componentMerge.InputCollection[1]);

                                LastTrans = "Merge";
                                break;

                            case "OLEDBCOMMAND":
                                dataOLEDbCommand = dataFlowTask.ComponentMetaDataCollection.New();

                                dataOLEDbCommand.ComponentClassID = "DTSTransform.OLEDBCommand";
                                CManagedComponentWrapper OLEDB_Wrapper = dataOLEDbCommand.Instantiate();
                                OLEDB_Wrapper.ProvideComponentProperties();
                                dataOLEDbCommand.Name = "OLE DB Command_"+i;                                

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    /*case "CopyColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(copyMapComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;*/
                    
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break; 
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                }
                                if (dataOLEDbCommand.RuntimeConnectionCollection.Count > 0)
                                {
                                    dataOLEDbCommand.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);
                                    dataOLEDbCommand.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                                }
                                OLEDB_Wrapper.SetComponentProperty("SqlCommand", RuleList[i].Trim());
                                LastTrans = "OLEDB";
                                break;
                            case "MERGEJOIN":
                                component1 = dataFlowTask.ComponentMetaDataCollection.New();

                                component1.ComponentClassID = "DTSAdapter.OleDbSource";
                                IDTSDesigntimeComponent100 instance1 = component1.Instantiate();
                                instance1.ProvideComponentProperties();
                                component1.Name = "OLEDBSource1";
                                component1.Description = "OLEDBSource1";
                                IDTSComponentMetaData100 MyComponentMetadata = dataFlowTask.ComponentMetaDataCollection["OLEDBSource1"];

                                MyComponentMetadata.Name = "OLEDB Source2";
                    
                                //Connect the Execute SQL task to the data flow task

                                if (component1.RuntimeConnectionCollection.Count > 0)
                                {
                                    component1.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);
                                    component1.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;
                                }

                                string MergeSortColumn = "row_id";
                                string[] MergeSortColumns = RuleList[i].Split('=');
                                string[] FirstColumn = MergeSortColumns[1].Split('.');
                                MergeSortColumn = FirstColumn[1];
                                if (!SRC_Query1.ToUpper().Contains("ORDER BY"))
                                {
                                    SRC_Query1 = SRC_Query1 + " Order by " + MergeSortColumn;
                                }
                                instance1.SetComponentProperty("AccessMode", 2);
                                instance1.SetComponentProperty("SqlCommand", SRC_Query1);
                                //instance1.SetComponentProperty("SqlCommand", "Select row_id, cust_code from Customer Order by Row_ID");

                                instance1.AcquireConnections(null);
                                instance1.ReinitializeMetaData();
                                instance1.ReleaseConnections();

                                MergeSortWrapper = dataFlowTask.ComponentMetaDataCollection.New();
                                MergeSortWrapper.ComponentClassID = "DTSTransform.Sort";
                                CManagedComponentWrapper MergeSortinstance = MergeSortWrapper.Instantiate();
                                MergeSortinstance.ProvideComponentProperties();
                                MergeSortWrapper.Name = "MergeSortTransform";
                                MergeSortWrapper.Description = "MergeSortTransform";
                                MergeSortWrapper.ContactInfo = "Sort1";
                                //MergeSortWrapper.SetComponentProperty("EliminateDuplicates", 1);                    
                                
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;

                                }
                                
                                IDTSVirtualInput100 vMergeSortInput = MergeSortWrapper.InputCollection[0].GetVirtualInput();
                                //IDTSVirtualInputColumn100 vColumn = null;
                                IDTSInputColumn100 MergeCol = null;

                                FirstColumn = MergeSortColumns[0].Split('.');
                                MergeSortColumn = FirstColumn[1];

                                foreach (IDTSVirtualInputColumn100 vColumn in vMergeSortInput.VirtualInputColumnCollection)
                                {
                                    //if (SortColumn.Contains(col.Name))
                                    if (vColumn.Name == MergeSortColumn.Trim())
                                    {
                                        MergeCol = MergeSortinstance.SetUsageType(MergeSortWrapper.InputCollection[0].ID, vMergeSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);

                                        if (MergeCol.CustomPropertyCollection.Count > 0)
                                        {
                                            MergeSortinstance.SetInputColumnProperty(MergeSortWrapper.InputCollection[0].ID, MergeCol.ID, "NewSortKeyPosition", 1);

                                        }
                                    }
                                }

                                foreach (IDTSVirtualInputColumn100 vColumn in vMergeSortInput.VirtualInputColumnCollection)
                                {
                                    if (!MergeSortColumn.Contains(vColumn.Name))
                                    {
                                        MergeCol = MergeSortinstance.SetUsageType(MergeSortWrapper.InputCollection[0].ID, vMergeSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                    }
                                }
                                //MergeSortinstance.SetComponentProperty("EliminateDuplicates", 1);
                    
                                mergeJoin = dataFlowTask.ComponentMetaDataCollection.New();
                                mergeJoin.ComponentClassID = "DTSTransform.MergeJoin";
                                mergeJoin.Name = "merge";
                                CManagedComponentWrapper mergeInstance = mergeJoin.Instantiate();
                                mergeInstance.ProvideComponentProperties();
                   
                                //create path from source1 to merge

                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(MergeSortWrapper.OutputCollection[0], mergeJoin.InputCollection[0]);
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component1.OutputCollection[0], mergeJoin.InputCollection[1]);

                                MergeSortWrapper.OutputCollection[0].IsSorted = true;
                                MergeSortWrapper.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;
                                mergeJoin.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
                                mergeJoin.InputCollection[0].HasSideEffects = false;
                                component1.OutputCollection[0].IsSorted = true;
                                component1.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;
                                mergeJoin.InputCollection[1].ExternalMetadataColumnCollection.IsUsed = false;
                                mergeJoin.InputCollection[1].HasSideEffects = false;

                               IDTSInput100 mergeInput1 = mergeJoin.InputCollection[0];
                                
                               IDTSVirtualInput100 vMergeInput1 = mergeInput1.GetVirtualInput();
                               int NumKeyColumns = 0;
                               foreach (IDTSVirtualInputColumn100 vColumn in vMergeInput1.VirtualInputColumnCollection)
                               {
                                   mergeInstance.SetUsageType(mergeInput1.ID, vMergeInput1, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                   if (vColumn.SortKeyPosition > NumKeyColumns)
                                       NumKeyColumns = vColumn.SortKeyPosition;
                               }
                                IDTSInput100 mergeInput2 = mergeJoin.InputCollection[1];
                                IDTSVirtualInput100 vMergeInput2 = mergeInput2.GetVirtualInput();            
                               foreach (IDTSVirtualInputColumn100 vColumn in vMergeInput2.VirtualInputColumnCollection)
                               {
                                   if (!MergeSortColumn.Contains(vColumn.Name))
                                   {
                                       mergeInstance.SetUsageType(mergeInput2.ID, vMergeInput2, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                       if (vColumn.SortKeyPosition > NumKeyColumns)
                                           NumKeyColumns = vColumn.SortKeyPosition;
                                   }
                               } 
                               IDTSCustomProperty100 property1 = mergeJoin.CustomPropertyCollection[0];
                               property1.Value = 2;
                               IDTSCustomProperty100 property2 = mergeJoin.CustomPropertyCollection[1];
                               property2.Value = 1;

                               IDTSOutput100 outt = mergeJoin.OutputCollection[0];

                               for (int merge_cnt = (outt.OutputColumnCollection.Count / 2); merge_cnt < outt.OutputColumnCollection.Count; merge_cnt++)
                               {
                                   if (!MergeSortColumn.Contains(outt.OutputColumnCollection[merge_cnt].Name))
                                   {                                       
                                       outt.OutputColumnCollection[merge_cnt].Name = outt.OutputColumnCollection[merge_cnt].Name;
                                   }
                               }

                               mergeInstance.SetComponentProperty("JoinType", 1); //full join (0),left outer (1),inner (2)
                               mergeInstance.AcquireConnections(null);
                               mergeInstance.ReinitializeMetaData();
                               mergeInstance.ReleaseConnections();
                    
                                LastTrans = "MergeJoin";
                                break;

                            case "MULTICAST":
                                multiCastComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                multiCastComponent.ComponentClassID = "DTSTransform.Multicast";
                                CManagedComponentWrapper multiCastWrapper = multiCastComponent.Instantiate();
                                multiCastWrapper.ProvideComponentProperties();

                                multiCastComponent.Name = "Multicast_"+i;
                                multiCastComponent.Description = "Multicast";
                                MulticastTargetTable = RuleList[i];
                                multiCast = "Y";
                    

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                }

                                IDTSInput100 multiCastInput = multiCastComponent.InputCollection[0];
                                IDTSVirtualInput100 multiCastVirtualInput = multiCastInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 multiCastVirtualInputColumns = multiCastVirtualInput.VirtualInputColumnCollection;

                                LastTrans = "MultiCast";
                            break;

                        }
                    }

                    /*
                    componentSCD = dataFlowTask.ComponentMetaDataCollection.New();
                    componentSCD.ComponentClassID = "DTSTransform.SCD";
                    CManagedComponentWrapper SCDDesignTime = componentSCD.Instantiate();
                    SCDDesignTime.ProvideComponentProperties();
                    componentSCD.Name = "SCD Task";
                    // string compName = new Application().PipelineComponentInfos["Slowly Changing Dimension"].CreationName;

                    componentSCD.Description = "SCD Transform Example";

                    switch (LastTrans)
                    {
                        case "OleDBSource":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "ConditionalSplit":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "DerivedColumn":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "CharacterMap":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Aggregate":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Lookup":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentSCD.InputCollection[0]);
                            break;
                        case "RowCount":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Sort":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "UnionAll":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "OLEDB":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Merge":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "MergeJoin":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "MultiCast":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                    }

                    
                    try
                    {
                        // Set the custom properties of the SCD.              
                        SCDDesignTime.SetComponentProperty("CurrentRowWhere", "[CurrentStatus] = 'A'");
                        SCDDesignTime.SetComponentProperty("EnableInferredMember", false);
                        SCDDesignTime.SetComponentProperty("UpdateChangingAttributeHistory", false);
                        SCDDesignTime.SetComponentProperty("SqlCommand", "SELECT [city], [cust_code], [first_name], [phone1],[CurrentStatus] FROM [dbo].[CUSTOMER_TGT]");
                        componentSCD.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                        componentSCD.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);

                    }
                    catch (Exception exception)
                    {

                    }

                    //MapColumn(componentSCD, SCDDesignTime);
                    IDTSInput100 SCDInput = componentSCD.InputCollection[0];
                    IDTSVirtualInput100 virtualInput = SCDInput.GetVirtualInput();
                    IDTSVirtualInputColumnCollection100 SCDVirtualInputColumns = virtualInput.VirtualInputColumnCollection;
                    
                    //Setting all properties
                    foreach (IDTSVirtualInputColumn100 virtualColumn in SCDVirtualInputColumns)
                    {
                        try
                        {
                            String cname1 = virtualColumn.Name;

                            if (cname1 == "cust_code")
                            {
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 1);
                            }
                            // designTime.SetInputColumnProperty(SCDInput.ID,virtualColumn.ID, "ColumnType", 1);
                            if (cname1 == "city")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 3);
                            }
                            if (cname1 == "phone1")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 2);
                            }
                            if (cname1 == "first_name")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 4);
                            }
                            //if (cname1 == "CurrentStatus")
                            //{
                            //    IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                            //    SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "CurrentRowWhere", "");
                            //}
                        }
                        catch (Exception fg)
                        {

                        }
                    }

                    SCDDesignTime.AcquireConnections(null);
                    SCDDesignTime.ReinitializeMetaData();
                    SCDDesignTime.ReleaseConnections();
                    IDTSInputColumn100 SCDCol = null;
                    IDTSVirtualInput100 vSCDInput = componentSCD.InputCollection[0].GetVirtualInput();
                    //IDTSVirtualInputColumn100 vColumn = null;

                    foreach (IDTSVirtualInputColumn100 vSCDColumn in vSCDInput.VirtualInputColumnCollection)
                    {

                        SCDCol = SCDDesignTime.SetUsageType(componentSCD.InputCollection[0].ID, vSCDInput, vSCDColumn.LineageID, DTSUsageType.UT_READONLY);
                        
                    }
                     

                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + "ErrorPackage.dtsx", p, null);
                    */

                    //Data Convert Transform start//
                    
                    int condCount = 0;

                    string[] DEST_Tables = DST_Table.Split(',');

                    foreach (string DEST_TABLE in DEST_Tables)
                    {
                        
                        IDTSComponentMetaData100 dataConvertComponent1 = dataFlowTask.ComponentMetaDataCollection.New();
                        dataConvertComponent1.ComponentClassID = "DTSTransform.DataConvert";
                        CManagedComponentWrapper dataConvertWrapper1 = dataConvertComponent1.Instantiate();
                        dataConvertWrapper1.ProvideComponentProperties();
                        
                        dataConvertComponent1.Description = "Data Conversion Component";
                        dataConvertComponent1.Name = "DataConvert Component_" + condCount;

                        if (condCount > 0)
                        {
                            LastTrans = "ConditionalSplit";
                        }
                        SqlCommand Sqlcmd = new SqlCommand();
                        SqlConnection SqlConn = new SqlConnection();
                        //SqlConn.ConnectionString = "Data Source=RAJESH-PC;Initial Catalog=Test;Integrated Security=SSPI";
                        switch (LastTrans)
                        {
                            case "OleDBSource":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "ConditionalSplit":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[condCount], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "DerivedColumn":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "CharacterMap":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Aggregate":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Lookup":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "RowCount":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Sort":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "UnionAll":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "OLEDB":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "CopyColumn":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(copyMapComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "MergeJoin":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Merge":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "MultiCast":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                        }
                        SqlConn.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");
                        
                        Sqlcmd.Connection = SqlConn;
                        Sqlcmd.CommandType = CommandType.Text;
                        
                        Sqlcmd.CommandText = "Select COLUMN_NAME,DATA_TYPE,Isnull(CHARACTER_MAXIMUM_LENGTH,0) As CHARACTER_MAXIMUM_LENGTH,Isnull(NUMERIC_PRECISION,0) As NUMERIC_PRECISION,Isnull(NUMERIC_SCALE,0) As NUMERIC_SCALE from Information_Schema.COLUMNS where TABLE_NAME='" + DEST_TABLE + "'";
                        SqlDataAdapter sqlAdp = new SqlDataAdapter();
                        DataSet dsCols = new DataSet();
                        if (SqlConn.State == ConnectionState.Closed)
                            SqlConn.Open();
                        sqlAdp.SelectCommand = Sqlcmd;
                        SqlDataReader rdr = null;
                        rdr = Sqlcmd.ExecuteReader();
                        int a = 0;
                        while (rdr.Read())
                        {
                            try
                            {
                                string COLUMN_NAME = (string)rdr["COLUMN_NAME"];
                                string DATA_TYPE = (string)rdr["DATA_TYPE"];
                                int CHARACTER_MAXIMUM_LENGTH = (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
                                int NUMERIC_PRECISION = Convert.ToInt32(rdr["NUMERIC_PRECISION"]);
                                int NUMERIC_SCALE = Convert.ToInt32(rdr["NUMERIC_SCALE"]);

                                IDTSVirtualInput100 dataConvertVirtualInput = dataConvertComponent1.InputCollection[0].GetVirtualInput();
                                IDTSOutput100 dataConvertOutput = dataConvertComponent1.OutputCollection[0];
                                IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;
                                
                                int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[COLUMN_NAME].LineageID;

                                dataConvertWrapper1.SetUsageType(
                                    dataConvertComponent1.InputCollection[0].ID,
                                    dataConvertVirtualInput, sourceColumnLineageId,
                                    DTSUsageType.UT_READONLY);

                                IDTSOutputColumn100 ConvCol1 = dataConvertWrapper1.InsertOutputColumnAt(dataConvertOutput.ID, 0, COLUMN_NAME, string.Empty);

                                if (DATA_TYPE.ToLower() == "varchar" || DATA_TYPE.ToLower() == "char")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 1252);
                                }
                                if (DATA_TYPE.ToLower() == "nvarchar")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "numeric")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_NUMERIC, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "float")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R8, 0, 0, NUMERIC_SCALE, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "datetime" || DATA_TYPE.ToLower() == "date")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBDATE, 0, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "integer" || DATA_TYPE.ToLower() == "int" || DATA_TYPE.ToLower() == "bigint")

                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I8, 0, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "smallint" || DATA_TYPE.ToLower() == "tinyint")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I2, 0, 0, 0, 0);
                                }
                               
                                else if (DATA_TYPE.ToLower() == "bit")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_BOOL, 0, 0, 0, 0);
                                }

                                                          
                                ConvCol1.MappedColumnID = a;

                                dataConvertWrapper1.SetOutputColumnProperty(
                                        dataConvertOutput.ID,
                                        ConvCol1.ID,
                                        "SourceInputColumnLineageID",
                                        sourceColumnLineageId);
                                a = a + 1;
                            }
                            catch (Exception ex)
                            {

                            }
                        }

                        if (SqlConn.State == ConnectionState.Open)
                            SqlConn.Close();
                        
                        //Get input and virtual input for destination to select and map columns:

                        IDTSComponentMetaData100 destination = dataFlowTask.ComponentMetaDataCollection.New();
                        destination.ComponentClassID = "DTSAdapter.OleDbDestination";
                        CManagedComponentWrapper destDesignTime = destination.Instantiate();
                        destDesignTime.ProvideComponentProperties();
                        destination.Name = "OLEDBDestination_" + DEST_TABLE;


                        destination.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                        destination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);

                        destDesignTime.SetComponentProperty("OpenRowset", DEST_TABLE); //Prajakta - To add the value from "DST Table"
                        destDesignTime.SetComponentProperty("AccessMode", 3);
                        destDesignTime.SetComponentProperty("FastLoadOptions", "TABLOCK,CHECK_CONSTRAINTS");
                        //Connect the source to destination component:
                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent1.OutputCollection[0], destination.InputCollection[0]);
                        IDTSInput100 destinationInputerr = destination.InputCollection[0];
                        IDTSVirtualInput100 destinationVirtualInputerr = destinationInputerr.GetVirtualInput();
                        IDTSVirtualInputColumnCollection100 destinationVirtualInputColumnserr = destinationVirtualInputerr.VirtualInputColumnCollection;

                        //Reinitialize the destination metadata:

                        destDesignTime.AcquireConnections(null);
                        destDesignTime.ReinitializeMetaData();
                        destDesignTime.ReleaseConnections();

                        //Get the destination s default input and virtual input:

                        IDTSInput100 destInput = destination.InputCollection[0];
                        IDTSVirtualInput100 vInput = destInput.GetVirtualInput();
                        IDTSInputColumnCollection100 destInputCols = destInput.InputColumnCollection;
                        IDTSExternalMetadataColumnCollection100 destExtCols = destInput.ExternalMetadataColumnCollection;
                        IDTSOutputColumnCollection100 sourceColumns = dataConvertComponent1.OutputCollection[0].OutputColumnCollection;

                        IDTSOutputColumnCollection100 exSourceColumns = component.OutputCollection[0].OutputColumnCollection;
                        
                        // The OLEDB destination requires you to hook up the external data conversion columns
                        foreach (IDTSOutputColumn100 outputCol in sourceColumns)
                        {
                            try
                            {
                                // Get the external column id
                                IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
                                if (extCol != null)
                                {
                                    // Create an input column from an output col of previous component.
                                    vInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                                    IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
                                    if (inputCol != null)
                                    {
                                        // map the input column with an external metadata column
                                        destDesignTime.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
                                    }
                                }
                            }
                            catch (Exception exc)
                            {
                                foreach(string joinCol in joinColumns)
                                {
                                    if (outputCol.Name != joinCol)
                                    {
                                        Dts.TaskResult = (int)ScriptResults.Failure;
                                    }
                                }
                            }
                        }
                        condCount = condCount + 1;
                    }

                    if (multiCast == "Y")
                    {
                        int multiCastCount = 1;

                        string[] multiCast_Tables = MulticastTargetTable.Split('#');

                        foreach (string TGT_TABLE in multiCast_Tables)
                        {

                            IDTSComponentMetaData100 dataConvertComponent1 = dataFlowTask.ComponentMetaDataCollection.New();
                            dataConvertComponent1.ComponentClassID = "DTSTransform.DataConvert";
                            CManagedComponentWrapper dataConvertWrapper1 = dataConvertComponent1.Instantiate();
                            dataConvertWrapper1.ProvideComponentProperties();

                            dataConvertComponent1.Description = "Data Conversion Component";
                            dataConvertComponent1.Name = "DataConvert Component_MultiCast_" + multiCastCount;


                            SqlCommand Sqlcmd = new SqlCommand();
                            SqlConnection SqlConn = new SqlConnection();
                            //SqlConn.ConnectionString = "Data Source=RAJESH-PC;Initial Catalog=Test;Integrated Security=SSPI";

                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[multiCastCount], dataConvertComponent1.InputCollection[0]);

                            SqlConn.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");

                            Sqlcmd.Connection = SqlConn;
                            Sqlcmd.CommandType = CommandType.Text;

                            Sqlcmd.CommandText = "Select COLUMN_NAME,DATA_TYPE,Isnull(CHARACTER_MAXIMUM_LENGTH,0) As CHARACTER_MAXIMUM_LENGTH,Isnull(NUMERIC_PRECISION,0) As NUMERIC_PRECISION,Isnull(NUMERIC_SCALE,0) As NUMERIC_SCALE from Information_Schema.COLUMNS where TABLE_NAME='" + TGT_TABLE + "'";
                            SqlDataAdapter sqlAdp = new SqlDataAdapter();
                            DataSet dsCols = new DataSet();
                            if (SqlConn.State == ConnectionState.Closed)
                                SqlConn.Open();
                            sqlAdp.SelectCommand = Sqlcmd;
                            SqlDataReader rdr = null;
                            rdr = Sqlcmd.ExecuteReader();
                            int a = 0;
                            while (rdr.Read())
                            {
                                try
                                {
                                    string COLUMN_NAME = (string)rdr["COLUMN_NAME"];
                                    string DATA_TYPE = (string)rdr["DATA_TYPE"];
                                    int CHARACTER_MAXIMUM_LENGTH = (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
                                    int NUMERIC_PRECISION = Convert.ToInt32(rdr["NUMERIC_PRECISION"]);
                                    int NUMERIC_SCALE = Convert.ToInt32(rdr["NUMERIC_SCALE"]);

                                    IDTSVirtualInput100 dataConvertVirtualInput = dataConvertComponent1.InputCollection[0].GetVirtualInput();
                                    IDTSOutput100 dataConvertOutput = dataConvertComponent1.OutputCollection[0];
                                    IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;

                                    int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[COLUMN_NAME].LineageID;

                                    dataConvertWrapper1.SetUsageType(
                                        dataConvertComponent1.InputCollection[0].ID,
                                        dataConvertVirtualInput, sourceColumnLineageId,
                                        DTSUsageType.UT_READONLY);

                                    IDTSOutputColumn100 ConvCol1 = dataConvertWrapper1.InsertOutputColumnAt(dataConvertOutput.ID, 0, COLUMN_NAME, string.Empty);

                                    if (DATA_TYPE.ToLower() == "varchar" || DATA_TYPE.ToLower() == "char")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 1252);
                                    }
                                    if (DATA_TYPE.ToLower() == "nvarchar")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "numeric")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_NUMERIC, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "float")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R8, 0, 0, NUMERIC_SCALE, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "datetime" || DATA_TYPE.ToLower() == "date")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBDATE, 0, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "integer" || DATA_TYPE.ToLower() == "int")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I8, 0, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "smallint" || DATA_TYPE.ToLower() == "tinyint")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I2, 0, 0, 0, 0);
                                    }

                                    else if (DATA_TYPE.ToLower() == "bit")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_BOOL, 0, 0, 0, 0);
                                    }


                                    ConvCol1.MappedColumnID = a;

                                    dataConvertWrapper1.SetOutputColumnProperty(
                                            dataConvertOutput.ID,
                                            ConvCol1.ID,
                                            "SourceInputColumnLineageID",
                                            sourceColumnLineageId);
                                    a = a + 1;
                                }
                                catch (Exception ex)
                                {

                                }
                            }

                            if (SqlConn.State == ConnectionState.Open)
                                SqlConn.Close();

                            //Get input and virtual input for destination to select and map columns:

                            IDTSComponentMetaData100 destination = dataFlowTask.ComponentMetaDataCollection.New();
                            destination.ComponentClassID = "DTSAdapter.OleDbDestination";
                            CManagedComponentWrapper destDesignTime = destination.Instantiate();
                            destDesignTime.ProvideComponentProperties();
                            destination.Name = "OLEDBDestination_" + TGT_TABLE + "_" + multiCastCount;


                            destination.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                            destination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);

                            destDesignTime.SetComponentProperty("OpenRowset", TGT_TABLE); //Prajakta - To add the value from "DST Table"
                            destDesignTime.SetComponentProperty("AccessMode", 3);
                            destDesignTime.SetComponentProperty("FastLoadOptions", "TABLOCK,CHECK_CONSTRAINTS");
                            //Connect the source to destination component:
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent1.OutputCollection[0], destination.InputCollection[0]);
                            IDTSInput100 destinationInputerr = destination.InputCollection[0];
                            IDTSVirtualInput100 destinationVirtualInputerr = destinationInputerr.GetVirtualInput();
                            IDTSVirtualInputColumnCollection100 destinationVirtualInputColumnserr = destinationVirtualInputerr.VirtualInputColumnCollection;

                            //Reinitialize the destination metadata:

                            destDesignTime.AcquireConnections(null);
                            destDesignTime.ReinitializeMetaData();
                            destDesignTime.ReleaseConnections();

                            //Get the destination s default input and virtual input:

                            IDTSInput100 destInput = destination.InputCollection[0];
                            IDTSVirtualInput100 vInput = destInput.GetVirtualInput();
                            IDTSInputColumnCollection100 destInputCols = destInput.InputColumnCollection;
                            IDTSExternalMetadataColumnCollection100 destExtCols = destInput.ExternalMetadataColumnCollection;
                            IDTSOutputColumnCollection100 sourceColumns = dataConvertComponent1.OutputCollection[0].OutputColumnCollection;

                            IDTSOutputColumnCollection100 exSourceColumns = component.OutputCollection[0].OutputColumnCollection;

                            // The OLEDB destination requires you to hook up the external data conversion columns
                            foreach (IDTSOutputColumn100 outputCol in sourceColumns)
                            {
                                try
                                {
                                    // Get the external column id
                                    IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
                                    if (extCol != null)
                                    {
                                        // Create an input column from an output col of previous component.
                                        vInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                                        IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
                                        if (inputCol != null)
                                        {
                                            // map the input column with an external metadata column
                                            destDesignTime.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
                                        }
                                    }
                                }
                                catch (Exception exc)
                                {
                                    foreach (string joinCol in joinColumns)
                                    {
                                        if (outputCol.Name != joinCol)
                                        {
                                            Dts.TaskResult = (int)ScriptResults.Failure;
                                        }
                                    }
                                }
                            }
                            multiCastCount = multiCastCount + 1;
                        }
                    }


                    //We then save the package into a file system.
                    //Dts.TaskResult = (int)ScriptResults.Success;
                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + Template_Name + ".dtsx", p, null);
                    //p.Execute();
                }

            }
            catch (Exception ex)
            {
                Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + "ErrorPackage.dtsx", p, null);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:NoContent>Reference;Import;Folder</msb:NoContent>
		<msb:ProjectId>{BCC422BA-10FD-488F-8FE6-8AF6FD310273}</msb:ProjectId>
		<msb:DisplayName>st_0cef29a9393f4e4c8dda023d910526e5</msb:DisplayName>
		<msb:CodeName>st_0cef29a9393f4e4c8dda023d910526e5</msb:CodeName>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Project Include="st_0cef29a9393f4e4c8dda023d910526e5.csproj"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Settings.get_Default():ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Sett" +
    "ings")]

namespace ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_0cef29a9393f4e4c8dda023d910526e5.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Hexaware")]
[assembly: AssemblyProduct("ST_0cef29a9393f4e4c8dda023d910526e5.csproj")]
[assembly: AssemblyCopyright("Copyright @ Hexaware 2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_0cef29a9393f4e4c8dda023d910526e5.csproj.dll">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
TgAABhFMbyYAAAYWjCcAAAFvUQAABhFCbyUAAAYWjCcAAAFvWQAABm9QAAAGK2wRP28ZAAAGb04A
AAYRTW8mAAAGFownAAABb1EAAAYRQm8lAAAGFownAAABb1kAAAZvUAAABis1ET9vGQAABm9OAAAG
EU9vJgAABhaMJwAAAW9RAAAGEUJvJQAABhaMJwAAAW9ZAAAGb1AAAAYRQm8lAAAGFownAAABb1kA
AAYTYhFib2AAAAYTYxFjb2UAAAYTZBFCbyYAAAYWjCcAAAFvUQAABhNlEWVvVQAABiYWE2dy5wAA
cBNoEVIRWJoXjT0AAAH+Dg0B/gwNARYfI53+DA0Bb1AAAAoTaRFp/g4OARb+Dg8BOCYBAAD+DA4B
/gwPAZoTahFkb2gAAAb+DhIBONQAAAD+DBIBb38AAAp0BwAAAhNrEWtvDQAABm8kAAAKE2hyngsA
cBFocqILAHAoMwAACiYRam8lAAAKb0gAAAoRaG9IAAAKb0kAAAo5hwAAABFjb2UAAAYRaG9nAAAG
bxMAAAYTZhFhEWJvWgAABhFjEWYWbzIAAAYmEWEWEUJvJgAABhFnjCcAAAFvUQAABm9SAAAGbzkA
AAYTbBFhEWxvUgAABnKmCwBwEWeMJwAAAW81AAAGJhFhEWxvUgAABnLGCwBwEWpvJQAACm81AAAG
JhFnF1gTZ/4MEgFvhwAACjoe////3h3+DBIBdV8AAAH+DhMB/gwTASwJ/gwTAW+IAAAK3P4MDwEX
WP4ODwH+DA8B/gwOAY5pP8v+//9ywgoAcBNVOO1IAAARP28YAAAGbxwAAAYTQxFDcuwLAHBvJAAA
BhFDbycAAAYTbRFtby4AAAYRQ3IiDABwEViMJwAAAShzAAAKbyEAAAYRQ28lAAAGFownAAABb1kA
AAZvYwAABhZveAAABhFDbyUAAAYWjCcAAAFvWQAABhZvXgAABhFVJf4OEAE5/QMAAP4TfgoAAAQ6
rgAAAB8Nc3AAAAolcrQIAHAWKHEAAAolcsIKAHAXKHEAAAolcuQKAHAYKHEAAAolcgALAHAZKHEA
AAolchoLAHAaKHEAAAolci4LAHAbKHEAAAolcjwLAHAcKHEAAAolck4LAHAdKHEAAAolclgLAHAe
KHEAAAolcvUAAHAfCShxAAAKJXJqCwBwHwoocQAACiVydgsAcB8LKHEAAAolcooLAHAfDChxAAAK
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
AHAdKHEAAAolclgLAHAeKHEAAAolcvUAAHAfCShxAAAKJXJqCwBwHwoocQAACiVydgsAcB8LKHEA
AAolcooLAHAfDChxAAAK/hOADAAABP4TfgwAAAT+DBAB/g0RAShyAAAKOSkDAAD+DBEBRQ0AAAAF
AAAAPwAAAHkAAACzAAAA7QAAACcBAABhAQAAmwEAANUBAAAPAgAASQIAAIACAAC3AgAAOOcCAAAR
P28ZAAAGb04AAAYRQG8mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZvUAAABjitAgAA
ET9vGQAABm9OAAAGEUJvJgAABhaMJwAAAW9RAAAGEUVvJQAABhaMJwAAAW9ZAAAGb1AAAAY4cwIA
ABE/bxkAAAZvTgAABhFDbyYAAAYWjCcAAAFvUQAABhFFbyUAAAYWjCcAAAFvWQAABm9QAAAGODkC
AAARP28ZAAAGb04AAAYRRG8mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZvUAAABjj/
AQAAET9vGQAABm9OAAAGEUVvJgAABhaMJwAAAW9RAAAGEUVvJQAABhaMJwAAAW9ZAAAGb1AAAAY4
xQEAABE/bxkAAAZvTgAABhFFbyYAAAYWjCcAAAFvUQAABhFFbyUAAAYWjCcAAAFvWQAABm9QAAAG
OIsBAAARP28ZAAAGb04AAAYRSG8mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZvUAAA
BjhRAQAAET9vGQAABm9OAAAGEUlvJgAABhaMJwAAAW9RAAAGEUVvJQAABhaMJwAAAW9ZAAAGb1AA
AAY4FwEAABE/bxkAAAZvTgAABhFHbyYAAAYWjCcAAAFvUQAABhFFbyUAAAYWjCcAAAFvWQAABm9Q
AAAGON0AAAARP28ZAAAGb04AAAYRS28mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZv
UAAABjijAAAAET9vGQAABm9OAAAGEUxvJgAABhaMJwAAAW9RAAAGEUVvJQAABhaMJwAAAW9ZAAAG
b1AAAAYrbBE/bxkAAAZvTgAABhFNbyYAAAYWjCcAAAFvUQAABhFFbyUAAAYWjCcAAAFvWQAABm9Q
AAAGKzURP28ZAAAGb04AAAYRT28mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZvUAAA
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
dW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2
NC4wLjMwMzE5AAAAAAUAbAAAAFgkAAAjfgAAxCQAACweAAAjU3RyaW5ncwAAAADwQgAAVBgAACNV
UwBEWwAAEAAAACNHVUlEAAAAVFsAAEgQAAAjQmxvYgAAAAAAAAACAAABVz+iCQkLAAAA+iUzABYA
AAEAAAB0AAAAKQAAAFkAAACYAAAAegAAABkAAADIAAAAQQAAAOcAAABUAAAAAgAAABUAAAA4AAAA
UgAAAAMAAAABAAAABwAAAAEAAAACAAAAAQAAAAAACgABAAAAAAAGANYAzwAKAPIA3QAOAFIBKQEG
AG4BzwAGAIQBcwEGALUBoAEGAGwCUgIGAJcChQIGAK4ChQIGAMsChQIGAOoChQIGAAMDhQIGABwD
hQIGADcDhQIGAFIDhQIGAGsDhQIGAKQDhAMGAMQDhAMGACAEDQQGAD0EzwAGAEIEzwAGAGYEhQIK
AJIEfAQKAKsEfAQGAMAEhAMOAOIEKQEEABcFMQUGAH4FzwAGAIUFzwASANwFvAUSAOQFvAUSAAAG
vAUSAA8GvAUSABgGvAUSAG8GvAUOAHsGKQESAJUGvAUSAK0GvAUGAN8GzwASAOwGvAUSAAgHvAUS
ADYHvAUSAD8HvAUSAFwHvAUSAHEHvAUWAKgHkgcWALMHkgcWANQHwQcWAPAHwQcWAPoHhgcWACYI
kgcWADMIwQcWAD8IhgcWAGAIhgcWAHIIkgcWAJgIkgcWAKcIhgcWAK8IhgcWAOAIkgcWAPwIwQcG
AD8JzwAaAKMJdgkaALIJdgkaAN4JdgkGAPMJzwAaACMKdgkSAI0KvAUSAL0KvAUEANIKMQUEANsK
MQUEAOsKMQUEAC4LMQUEAGALMQUEAIULMQUEALsLMQUEAAgMMQUSACEMvAUeAHcMTwwEAHcMTwwE
ANoMMQUGAKANhQ0EAOENMQUEAAoOMQUEABYOMQUEAEMOMQUEAFEOMQUEAHwOMQUEAK0OMQUEANEO
MQUEABYPMQUGAGIPTw8EAJYPMQUEAKkPMQUEAMMPMQUGAP4PzwAEABIQMQUGAJEQhQ0GAKAQzwAG
AKwQzwAEAMUQMQUEAPwQMQUEAEMRMQUEAHQRMQUEALsRTwwGAJkTzwAEAKkTMQUGAP8TzwAEAAkU
MQUGAEIUIxQGAK8UIxQGAL0UIxQGANUUIxQEAOgUMQUGAPsUIxQGAEMVTw8GAGYVhQIAAAAAAQAA
AAAAAQABAAAAEAA5AEMABQABAAEAAAEQAHkAQwAJAAMABQABABAAggCNAA0ABAAIAAMBAAC4AAAA
EQAEAAoAAwEQAAQFAAAFAAcACgChEAAAFwUxBQAACAAMAKEQAADSCjEFAAAIABcAoRAAANsKMQUA
AAgAFwChEAAA6woxBQAACAAaAKEQAAAuCzEFAAAIAB0AoRAAAGALMQUAAAgALgChEAAAhQsxBQAA
CAAuAKEQAAC7CzEFAAAIAD8AoRAAAAgMMQUAAAgAQgChEAAAdwxPDAAACABHAKEQAADaDDEFAAAI
AEcAAAAAAEANAAAFAAgATQChEAAA4Q0xBQAAFwBNAKEQAAAKDjEFAAAXAE8AoRAAABYOMQUAABcA
UQChEAAAQw4xBQAAFwBSAKEQAABRDjEFAAAXAFkAoRAAAHwOMQUAABcAWgChEAAArQ4xBQAAFwBk
AKEQAADRDjEFAAAXAGcAoRAAABYPMQUAABcAaQChEAAAlg8xBQAAFwBtAAEBAACpDzEFEQAXAHUA
AQEAAMMPMQURABsAdQChEAAAEhAxBQAAHgB1AKEQAADFEDEFAAAeAHkAoRAAAPwQMQUAAB4AfQCh
EAAAQxExBQAAHgCBAAEBAAB0ETEFEQAeAJcAAQEAALsRTwwRACMAlwChEAAAqRMxBQAAWgCXAKEQ
AAAJFDEFAABaAJkAoRAAAOgUMQUAAFoAmQChEAAAvR1PDAAAWgCZAKEQAADPHU8MAABaAJkAEQCU
ARMAEQDBARcAEQALAjkABgY0AkcAVoA8AkoAVoBEAkoABgBaBY0AEwCtDekBEwDNDekBEwB9EOkB
EwDtEekBEwABEukBEwAdEukBEwBrEukBEwCuEukBEwDCEukBEwDWEukBEwAME+kBEwAhE+kBEwBG
E+kBEwBvE+kBEwCEE+kBBgY0AkcAVoA/GRsLVoBLGRsLVoBYGRsLBgY0AkcAVoBjGYoLVoBtGYoL
BgY0AkcAVoAOG8cMVoAZG8cMVoAqG8cMVoA5G8cMBgY0AkcAVoBKGzYNVoBTGzYNVoBbGzYNVoBh
GzYNVoBnGzYNVoBtGzYNVoBzGzYNVoB5GzYNVoCBGzYNVoCJGzYNVoCUGzYNVoCaGzYNVoChGzYN
VoCoGzYNVoCvGzYNVoC1GzYNVoC8GzYNVoDIGzYNVoDQGzYNVoDZGzYNVoDgGzYNVoDoGzYNVoDz
GzYNVoD9GzYNVoAHHDYNVoAWHDYNVoAhHDYNVoA2HDYNVoA/HDYNVoBHHDYNVoBQHDYNVoBgHDYN
VoBsHDYNVoB4HDYNVoCEHDYNVoCQHDYNVoCcHDYNVoCqHDYNVoC4HDYNVoDJHDYNVoDVHDYNVoDi
HDYNVoDvHDYNVoD8HDYNVoAIHTYNVoAVHTYNVoAnHTYNVoA1HTYNVoBGHTYNVoBWHTYNVoBmHTYN
VoB7HTYNVoCMHTYNVoCnHTYNUCAAAAAAgxjRARsAAQBYIAAAAACTCNcBHwABAJEgAAAAAJMI6wEk
AAEAmCAAAAAAkwj3ASkAAQCgIAAAAACWCBsCPQACALMgAAAAAIYY0QEbAAIApyAAAAAAkRjbBIkA
AgDYIAAAAACGAC8CGwACABSaAAAAAIYY0QEbAAIAuyAAAAAAhhjRARsAAgDDIAAAAACGAGIFkQAC
AAAAAAAAAAYYFxQbAAMAAAAAAAAAxg11BZYAAwAAAAAAAADGDVYGWAAEAAAAAAAAAAYYXBQbAAUA
AAAAAAAAxg1GEuwCBQAAAAAAAADGDVMSyQEFAAAAAAAAAAYYaBQbAAUAAAAAAAAAxg2ID8kBBQAA
AAAAAAAGGHQUGwAFAAAAAAAAAMYNXhLJAQUAAAAAAAAAxg1bE8kBBQAAAAAAAAAGGAwVGwAFAAAA
AAAAAMYNDgu1AQUAAAAAAAAAxg33DRECBgAAAAAAAADGDbYGAgMHAAAAAAAAAAYYVRUbAAkAAAAA
AAAAxgVHC7oBCQAAAAAAAAAGGFUVGwAKAAAAAAAAAMYNfRWWAAoAAAAAAAAAxg1fBlgACwAAAAAA
AADGDXUFlgAMAAAAAAAAAMYNVgZYAA0AAAAAAAAABhhcFBsADgAAAAAAAADGDZ4VlgAOAAAAAAAA
AMYNSwtYAA8AAAAAAAAAxg1oDiYCEAAAAAAAAADGDS4OGwIRAAAAAAAAAMYFeQu/ARIAAAAAAAAA
xg0cEbkCEwAAAAAAAAAGGMgVGwAUAAAAAAAAAMYN3gvEARQAAAAAAAAABhjUFRsAFQAAAAAAAADG
DeEVlgAVAAAAAAAAAMYNNhNYABYAAAAAAAAAxgWgCxsAFwAAAAAAAADGBRgNGwAXAAAAAAAAAMYF
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
AQCnFwAgAAAAAAEgAQDWFwAgAAAAAAEgAQBSFAAgAAAAAAEgAQACGAAgAAAAAAEgAQApGAEgAgA1
GAAgAAAAAAEgAQBPFQEAAQBHGAAgAAAAAAEAAQBxGAAgAAAAAAEgAQBPFQEAAQBHGAEAAQC+GAAg
AAAAAAAgAAAAAAAgAAAAAAAgAAAAAAEAAQDYFgEAAgDjFgAgAAAAAAEgAQBPFQAgAAAAAAAgAAAA
AAEgAQBPFQAgAAAAAAAgAAAAAAEAAQBHGAAgAAAAAAEgAQCNFQAgAAAAAAEgAQBSFAAgAAAAAAAg
AAAAAAEgAQBPFQEAAQCBGQAgAAAAAAAgAAAAAAEAAQDYFgAgAAAAAAEgAQBPFQAgAAAAAAEAAQBH
GAAgAAAAAAEgAQBSFAAgAAAAAAEAAQDJGQAAAQDmGQEAAQAEGgEAAgAOGgEAAwAWGgEABAAhGgEA
BQAoGgEAAQBKGgEAAQBKGgEAAQCeGgEAAQBHGAcAmAAIACQACACcAAkAnAAKAM0BCwCYAAwANAAO
AM0BDwCYABEAmAATAM0BFACYABUAzQEWAJgAFwDNARgAmAAZAJgAGgDNARsAzQEcAJgAHwDNASAA
zQEhAM0BIgCYACUAmAA5ANEBWABBANEBWABJANEBWABRANEBWABZANEBWABhANEBWABpANEBWABx
ANEBWAB5ANEBWACBANEBWACJANEBXQCRANEBGwCZANEBGwAJANEBGwChAFQEYgChAG8EaQApANEB
bgC5ANEBegDJANEBGwARANEBGwDRANEBGwBrAHUFlgDhAJYFmgDxANEBGwDxAPAFoQD5AAsGpgAR
ASUGrQARAT4GrQARAVYGWAARAV8GWAAZAdEBGwAZAI0GsgAhAZ8GuAApAbYGvgAxAb8GxQAJAMkG
lgDhANIGlgDhANcGyQDhAJYFkQA5AZYFzgDhAOUG0wDxAPgG2QBBAQsG3wBJAVYGWADhABoH5gBJ
ASEHWAAJAfAFoQBRAU0H7QBZAbYG8wBhAWgH+gDhAOUGAAEZAXwHBwFxAdEBGwB5AdEBGwCBASEH
WABxAeEHEQGJAQYIGAGJARYIWACZAdEBHwGhAVIIJQGhAWcILAFxAYkIMwG5AQsGOQHBAdEBGwDJ
AdEBGwCBAb8IQgGBAckIGwDBAc4ISAFxAe4ITwHhAbYGVQHhAAkJWgHhABEJlgDhABkJkQDhASIJ
YAGBAScJGwDhAC0JZAHhADMJZwERAZ8GuAApAQsGbQHhAEQJdwFRAUoJxQDxAcgJfgH5AQsGhAEJ
AvwJigH5AQQKkAEBAg8KWAABAjcKlwEBAk4KXQABAlsKngEBAm0KXQDhAH8KZwEJAaMKowEZAgsG
qQHDAA4LtQHjAEcLugEjAUsLWAA7AXkLvwFzAaALGwALAVYGWAD7AF8GWABTAd4LxAELAv4LyQH7
AbYGzQFpApAM0wEzAqUM3AFJAbsMlgAjAsIMWACbAfAM4gHbAQUNngF7ARgNGwDjAS0NGwAMANEB
XQAMAAsG+gEMAMENAgLhAOUGCwLLAPcNEQJzAkcLFgIzAS4OGwKLArYGIAIrAWgOJgLLArYGKwKD
AokOMQIDA8EOOQIrA/UOPgKrAjQPQwJDA24PSALZAnwPxQA7A7YGTgKbAIgPyQHTArsMyQGTAbYP
VAKTArsMyQHLAdYPXwKrAeMPZwLZAvUPYAH5AgoQGwAbAzoQbwLDA18QrQDzAmoQrQAUANEBGwAU
AAsGewIUAJgQgQIcANEBjgIZA7IQlALhALcQqAILA+IQrQLTA24PSAKLA3UFlgDhABoHswKDA18G
WACjAxwRuQLrA7YGvwJLAlYGWABjAjkRngFjA0cLxQIrBFYGWACzBFcRXQCLBIYRywKbBJ4RywI7
BBwRuQIDBEcL0gJ7BMQR1wJTBNoRXQDhABUSlgCDATES4gKDAEYS7AKLAFMSyQGrAF4SyQFDAnUF
lgD7A/4LyQFrA7sMyQGzAX8S8gILBLsMyQG7AZYS8gLDAusSrQBLA7YG+wJrBPgSXQDTALYGAgNr
ATYTWACzAFsTyQFDARwRuQJbA/4LyQEjBHUFlgBJA6ETCANTA24PSAKrA7YGDQMzA7YPFAPjA8cT
GwO7BLsMyQHzAeETIQMhAfATXQDhAOUGKgMZANEBGwBpA9EBXQBxA9EBWAB5A9EBGwCBA9EBGwCR
A9EB9AWhA9EBWAB5A9EBJAsIABQATgAIABgAUwAIAGAATgAIAGQAUwAIAGgAHwsIAHAATgAIAHQA
UwAIAHwATgAIAIAAUwAIAIQAHwsIAIgAzAwIAJAATgAIAJQAUwAIAJgAHwsIAJwAOw0IAKAAzAwI
AKQAQA0IAKgARQ0IAKwASg0IALAATw0IALQAVA0IALgAWQ0IALwAXg0IAMAAYw0IAMQAaA0IAMgA
bQ0IAMwAcg0IANAAdw0IANQAfA0IANgAgQ0IANwAhg0IAOAAiw0IAOQAkA0IAOgAlQ0IAOwAmg0I
APAAnw0IAPQApA0IAPgAqQ0IAPwArg0IAAABsw0IAAQBuA0IAAgBvQ0IAAwBwg0IABABxw0IABQB
zA0IABgB0Q0IABwB1g0IACAB2w0IACQB4A0IACgB5Q0IACwB6g0IADAB7w0IADQB9A0IADgB+Q0I
ADwB/g0IAEABAw4IAEQBCA4IAEgBDQ4IAEwBEg4IAFABFw4IAFQBHA4IAFgBIQ4IAFwBJg4IAGAB
Kw4IAGQBMA4pAJMAgAAuADsA/w8uAFsAHhAuADMAuw8uAEMA6w8uAGMAJxAuABMAuw8uAAsAcw8u
ABsA6w8uACMA6w8uACsA8Q9DAGsAUwBJAJMAgABhAJsAUwCDAKsAUwDDAJsAUwDjAJsAUwDjACMG
UwDjABsGoAUDATMG+gUDAZsAUwADASMGUwADARsGygUjAZsAUwAjASMGUwAjARsGygVDAZsAUwBD
ASMGUwBDARsGiQZDATsGswZjARsG/wZjASMGUwBjAZsAUwCDASMGUwCDATMG+gWDARsGKQeDAZsA
UwCgARMGWgWjASMGUwCjARsGKQejAZsAUwDAARMGWgXDATsGswbDASMGUwDDARsGtQfDAZsAUwDj
ASMGUwDjAZsAUwDjARsG6QcAAhMGZQUDApsAUwADAhsGEwgDAiMGUwAgAhMGbgUjAiMGUwAjAhsG
QQgjApsAUwBDApsAUwBgAhMGdwVjApsAUwBjAjsGswZjAiMGUwBjAhsGawiDApsAUwCDAiMGUwCD
AhsGlQigAhMGgAWjAiMGUwCjApsAUwCjAhsGxQijAjsGswbAAhMGiQXDAiMGUwDDAhsGCgnDApsA
UwDjAjsGswbjApsAUwDjAiMGUwDjAhsGOgkAAxMGWgYDAyMGUwADAxsGeAkDA5sAUwAgAxMGWgUj
A5sAUwAjAyMGUwAjAxsGpwlAAxMGbwZDAxsGjQpDAzsGswZDAyMGUwBDA5sAUwBjAyMGUwBjAzsG
swZjAxsGvgpjA5sAUwCAAxMGegaDAxsG8QqDA5sAUwCDAyMGUwCjA0MGKgujA5sAUwDAAxMGWgbD
A5sAUwDDA0MGjgvgAxMGWgbjA5sAUwDjAzsGswbjAyMGUwDjAxsG+wsABBMGWgUDBCMGUwADBJsA
UwADBDsGswYDBBsGJQwgBBMGWgUjBDsGswYjBCMGUwAjBBsGVQwjBJsAUwBDBBsGnQxDBCMGUwBD
BJsAUwBgBBMGZQVjBJsAUwBjBEMG0QyABBMGZQWDBJsAUwCDBEMGNQ6gBBMGbgWjBJsAUwCjBCMG
UwCjBBsGkA7ABBMGvQbDBBsGug7DBJsAUwDDBCMGUwDgBBMGxgbjBBsG5A7jBJsAUwDjBCMGUwAA
BRMGzwYDBSMGUwADBZsAUwADBRsGDg8jBZsAUwAjBTsGYg8jBSMGUwAjBRsGOA9ABRMG2AaABRMG
4QagBRMG4QbABRMGUwfgBRMGWgYABhMGWgVABhMGXAdgBhMGZQegBhMGbgfABhMGdwfgBhMGgAcg
BxMGiQdgBxMGkgeABxMGnQfABxMGpgfgBxMGbwYgCBMGWgVgCBMGZQWACBMGZQWgCBMGbgXACBMG
bgUACRMGWgUgCRMGWgVgCRMGZQWACRMGZQXACRMGegYAChMGxgYgChMGbwZAChMGUwdgChMGUweg
ChMG7wjgChMG+AgACxMG+AggCxMGbwZACxMGUwdgCxMGUwegCxMGZQXACxMGZQUADBMGzwYgDBMG
7whgDBMGZAmgDBMGZQXADBMGxgbgDBMGbwYADRMG0QkgDRMGbwZADRMG0QlgDRMGWgWADRMGegag
DRMGUwfADRMGUwfgDRMGWgYADhMGWgYgDhMGWgVADhMGWgWADhMG6AqgDhMGbwbgDhMGZQUADxMG
ZQVADxMG0QmADxMGZQWgDxMGbwbgDxMGWgUAEBMGegYgEBMGUwdAEBMGUweAEBMGWgWgEBMGWgXg
EBMG7wggERMGdwVAERMGdwWAERMGfwygERMGfwzgERMG2AYAEhMGgAUgEhMGgAVAEhMGZAlgEhMG
ZAmgEhMGjgzAEhMGjgzgEhMGUwcAExMGUwcHAGMFCQBjBQsAYwYNAGMGDwBjBhEAeAYTAGMGFQBj
BRcAYwUZAGMFGwBjBR0AYwUfAGMFIQBjBiMAYwYlAGMGJwBjBikAYwYrAGMFLQBjBS8AYwY1AGMF
NwBjBTkAYwY9AGMGQwBjBkUAYwVHAHgGSQBjBk0AYwVPAHgGUQBjBlcAYwVZAHgGWwBjBmEAYwVj
AHgGZQBjBmsAmwdtAGMGdQBjBncAeAZ5AGMFewBjBX0AYwZ/AGMGgQBjBYMAYwWFAHgGhwB4BokA
YwaLAGMGjQBjBo8AYwaRAHgGlQBjBpkAYwabAHgGoQBjBqMAYwalAGMGpwBjBq0AYwavAHgGsQDa
CbMAYwa1AHgGtwDaCbkAYwa9AGMFvwBjBcEAYwXDAGMFxQBjBscAYwbJAHgGzQDaCc8AYwbTAGMG
1QB4BtcAYwbbAGMF3QBjBd8AYwZ1ADADAgABAAMAAwAHAAQACQAKAAoADAALAA0ADgAVAA8AFwAR
ABkAFQAbABYAHAAXAB8AGAAgABkAJAAaACUAGwAmABwAKAAfACwAIQAuACIAMAAlADgAAACEAS8A
AAADAjQAAAAnAkIAAACAFJIFAAC7EZYFAACFFJwFAACMFJwFAACWFJwFAACfFJwFAAAYFWUGAAA0
FWoGAABhFYMGAAACFpIFAACAFJIFAAAOFpIFAAAfFuoGAAAvFu8GAABAFvQGAABZFvoGAAB1FpIF
AABhFa8HAAB9F5wFAADuF5IFAAAIB+QHAACAFJIFAAAKGD0IAABhFb8IAAB8GJwFAAB/GAEJAACW
GAYJAABhFTQJAAB8GJwFAADcGAYJAADrGG0JAAABGXMJAAAiGaIJAABhFYcKAABhFbcKAAB9F5wF
AAB8GJwFAAACFpIFAACAFJIFAABAFvQGAABhFfQLAACKGQYJAABhFU8MAAB9F5wFAAB8GJwFAACA
FJIFAABAFvQGAAC5GpwFAACfFJwFAADIGpcMAADcGpcMAAD1GpwFAAB8GJwFAgACAAMAAgADAAUA
AQAEAAUAAgAFAAcAAgANAAkAAQAOAAkAAgAQAAsAAgARAA0AAgATAA8AAgAVABEAAgAWABMAAgAY
ABUAAgAZABcAAgAaABkAAgAeABsAAQAfABsAAgAgAB0AAQAhAB0AAQAkAB8AAgAjAB8AAgAlACEA
AgAmACMAAgAoACUAAgAqACcAAgAsACkAAQAtACkAAgA/ACsAAgBBAC0AAQBEAC8AAgBDAC8AAQBG
ADEAAgBFADEAAgBIADMAAQBJADMAAgBLADUAAQBMADUAAgBRADcAAgBSADkAAQBTADkAAgBVADsA
AgBXAD0AAQBYAD0AAgBZAD8AAgBaAEEAAQBbAEEAAgBdAEMAAQBeAEMAAgBhAEUAAgBjAEcAAgBl
AEkAAgBnAEsAAgBpAE0AAgBrAE8AAgBtAFEAAQBuAFEAAgBvAFMAAQBwAFMAAQByAFUAAgBxAFUA
AgB0AFcAAgB1AFkAAgB3AFsAAQB4AFsAAgB9AF0AAgB/AF8AAgCBAGEAAQCCAGEAAgCEAGMAAQCF
AGMAAgCHAGUAAQCKAGcAAgCJAGcAAQCNAGkAAgCMAGkAAgCQAGsAAQCRAGsAAgCSAG0AAQCTAG0A
AQCWAG8AAgCVAG8AAgCXAHEAAQCYAHEA8gF0AocCBIAAAAEAAACXF0pPAAAAAAAA4gMAAAQAAAAA
AAAAAAAAAAEAxgAAAAAABAAAAAAAAAAAAAAAAQDPAAAAAAALAAAAAAAAAAAAAAAKAAoBAAAAAAsA
AAAAAAAAAAAAAAoAnQUAAAAABAAAAAAAAAAAAAAAAQCGBwAAAAALAAAAAAAAAAAAAAAKAFoJAAAA
AAsAAAAAAAAAAAAAAAoALAwAAAAAAAAAAAEAAADhHQAABQAEAAYABAAhAaQCAAAAPE1vZHVsZT4A
U1RfMGNlZjI5YTkzOTNmNGU0YzhkZGEwMjNkOTEwNTI2ZTUuY3Nwcm9qLmRsbABSZXNvdXJjZXMA
U1RfMGNlZjI5YTkzOTNmNGU0YzhkZGEwMjNkOTEwNTI2ZTUuY3Nwcm9qLlByb3BlcnRpZXMAU2V0
dGluZ3MAU2NyaXB0TWFpbgBTVF9lOWM5Y2IzYTVhYzQ0OWQyOTNkZGViNTI0MmFkZWM3OC5jc3By
b2oAU2NyaXB0UmVzdWx0cwBtc2NvcmxpYgBTeXN0ZW0AT2JqZWN0AFN5c3RlbS5Db25maWd1cmF0
aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFz
awBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAFZTVEFSVFNjcmlwdE9i
amVjdE1vZGVsQmFzZQBFbnVtAFN5c3RlbS5SZXNvdXJjZXMAUmVzb3VyY2VNYW5hZ2VyAHJlc291
cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZvAHJlc291cmNlQ3VsdHVyZQAu
Y3RvcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAEN1bHR1cmUA
ZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQATWFpbgB2YWx1ZV9fAFN1Y2Nlc3MA
RmFpbHVyZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRhcmdldEZyYW1ld29ya0F0
dHJpYnV0ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5
RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2Vt
Ymx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5
cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlDdWx0dXJl
QXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5Db21waWxl
clNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGli
aWxpdHlBdHRyaWJ1dGUAU1RfMGNlZjI5YTkzOTNmNGU0YzhkZGEwMjNkOTEwNTI2ZTUuY3Nwcm9q
AFN5c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVu
dGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5
c3RlbS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3Nh
YmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNr
RW50cnlQb2ludEF0dHJpYnV0ZQA8PmNfX0Rpc3BsYXlDbGFzczIASURUU1ZpcnR1YWxJbnB1dENv
bHVtbjEwMABNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5XcmFwcGVyAHZDb2x1bW4A
PE1haW4+Yl9fMABlbGVtZW50AGdldF9OYW1lAFN0cmluZwBTdHJpbmdDb21wYXJpc29uAEVxdWFs
cwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
UnVudGltZQBQYWNrYWdlAEV4ZWN1dGFibGVzAGdldF9FeGVjdXRhYmxlcwBFeGVjdXRhYmxlAEFk
ZABTZXF1ZW5jZQBEdHNDb250YWluZXIAc2V0X0ZhaWxQYWNrYWdlT25GYWlsdXJlAHNldF9GYWls
UGFyZW50T25GYWlsdXJlAHNldF9OYW1lAHNldF9EZXNjcmlwdGlvbgBBcHBsaWNhdGlvbgBTY3Jp
cHRPYmplY3RNb2RlbABnZXRfRHRzAFZhcmlhYmxlcwBnZXRfVmFyaWFibGVzAFZhcmlhYmxlAGdl
dF9JdGVtAGdldF9WYWx1ZQBUb1N0cmluZwBUcmltAEluZGV4T2YASW50MzIAQ29uY2F0AENvbm5l
Y3Rpb25zAGdldF9Db25uZWN0aW9ucwBDb25uZWN0aW9uTWFuYWdlcgBGb3JtYXQAc2V0X0Nvbm5l
Y3Rpb25TdHJpbmcAVGFza0hvc3QARHRzUHJvcGVydGllcwBnZXRfUHJvcGVydGllcwBEdHNQcm9w
ZXJ0eQBTZXRWYWx1ZQBJRFRTRXZlbnRzAFNhdmVUb1htbABTeXN0ZW0uRGF0YQBTeXN0ZW0uRGF0
YS5TcWxDbGllbnQAU3FsQ29tbWFuZABTcWxDb25uZWN0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBE
YkNvbm5lY3Rpb24Ac2V0X0Nvbm5lY3Rpb24ARGJDb21tYW5kAENvbW1hbmRUeXBlAHNldF9Db21t
YW5kVHlwZQBzZXRfQ29tbWFuZFRleHQAU3FsUGFyYW1ldGVyAERiUGFyYW1ldGVyAFBhcmFtZXRl
ckRpcmVjdGlvbgBzZXRfRGlyZWN0aW9uAERiVHlwZQBzZXRfRGJUeXBlAFNxbFBhcmFtZXRlckNv
bGxlY3Rpb24AZ2V0X1BhcmFtZXRlcnMAU3FsRGF0YUFkYXB0ZXIARGF0YVNldABDb25uZWN0aW9u
U3RhdGUAZ2V0X1N0YXRlAE9wZW4Ac2V0X1NlbGVjdENvbW1hbmQAU3FsRGF0YVJlYWRlcgBFeGVj
dXRlUmVhZGVyAERiRGF0YVJlYWRlcgBSZXBsYWNlAFRvVXBwZXIAQ29udGFpbnMAUmVhZABDbG9z
ZQBFbXB0eQBvcF9FcXVhbGl0eQBDaGFyAFNwbGl0AGdldF9Jbm5lck9iamVjdABNaWNyb3NvZnQu
U3FsU2VydmVyLlNRTFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuRXhlY3V0ZVNR
TFRhc2sARXhlY3V0ZVNRTFRhc2sASURUU1BhcmFtZXRlckJpbmRpbmdzAGdldF9QYXJhbWV0ZXJC
aW5kaW5ncwBJRFRTUGFyYW1ldGVyQmluZGluZwBEYXRlVGltZQBnZXRfTm93AEdldEJpbmRpbmcA
c2V0X0R0c1ZhcmlhYmxlTmFtZQBQYXJhbWV0ZXJEaXJlY3Rpb25zAHNldF9QYXJhbWV0ZXJEaXJl
Y3Rpb24Ac2V0X0RhdGFUeXBlAHNldF9QYXJhbWV0ZXJOYW1lAHNldF9QYXJhbWV0ZXJTaXplAG9w
X0luZXF1YWxpdHkAUHJlY2VkZW5jZUNvbnN0cmFpbnRzAGdldF9QcmVjZWRlbmNlQ29uc3RyYWlu
dHMAUHJlY2VkZW5jZUNvbnN0cmFpbnQATWFpblBpcGUASURUU1BpcGVsaW5lMTAwAElEVFNDb21w
b25lbnRNZXRhRGF0YUNvbGxlY3Rpb24xMDAAZ2V0X0NvbXBvbmVudE1ldGFEYXRhQ29sbGVjdGlv
bgBJRFRTQ29tcG9uZW50TWV0YURhdGExMDAATmV3AHNldF9Db21wb25lbnRDbGFzc0lEAENNYW5h
Z2VkQ29tcG9uZW50V3JhcHBlcgBJbnN0YW50aWF0ZQBJRFRTRGVzaWdudGltZUNvbXBvbmVudDEw
MABQcm92aWRlQ29tcG9uZW50UHJvcGVydGllcwBJRFRTUnVudGltZUNvbm5lY3Rpb25Db2xsZWN0
aW9uMTAwAGdldF9SdW50aW1lQ29ubmVjdGlvbkNvbGxlY3Rpb24AZ2V0X0NvdW50AElEVFNSdW50
aW1lQ29ubmVjdGlvbjEwMABEdHNDb252ZXJ0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUnVudGlt
ZVdyYXAATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZS5XcmFwcGVyAElEVFNDb25uZWN0
aW9uTWFuYWdlcjEwMABHZXRFeHRlbmRlZEludGVyZmFjZQBzZXRfQ29ubmVjdGlvbk1hbmFnZXIA
Z2V0X0lEAHNldF9Db25uZWN0aW9uTWFuYWdlcklEAElEVFNDdXN0b21Qcm9wZXJ0eTEwMABTZXRD
b21wb25lbnRQcm9wZXJ0eQBBY3F1aXJlQ29ubmVjdGlvbnMAUmVpbml0aWFsaXplTWV0YURhdGEA
UmVsZWFzZUNvbm5lY3Rpb25zADxQcml2YXRlSW1wbGVtZW50YXRpb25EZXRhaWxzPnswNEJDRUQz
Qy1ERURELTQ5RDctQTI5RS0wMjQ2QkQ2MTJBOUF9AFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmlj
AERpY3Rpb25hcnlgMgAkJG1ldGhvZDB4NjAwMDAwNy0xAFRyeUdldFZhbHVlACQkbWV0aG9kMHg2
MDAwMDA3LTIASURUU1BhdGhDb2xsZWN0aW9uMTAwAGdldF9QYXRoQ29sbGVjdGlvbgBJRFRTUGF0
aDEwMABJRFRTT3V0cHV0Q29sbGVjdGlvbjEwMABnZXRfT3V0cHV0Q29sbGVjdGlvbgBJRFRTT3V0
cHV0MTAwAElEVFNJbnB1dENvbGxlY3Rpb24xMDAAZ2V0X0lucHV0Q29sbGVjdGlvbgBJRFRTSW5w
dXQxMDAAQXR0YWNoUGF0aEFuZFByb3BhZ2F0ZU5vdGlmaWNhdGlvbnMASURUU1ZpcnR1YWxJbnB1
dDEwMABHZXRWaXJ0dWFsSW5wdXQASURUU1ZpcnR1YWxJbnB1dENvbHVtbkNvbGxlY3Rpb24xMDAA
Z2V0X1ZpcnR1YWxJbnB1dENvbHVtbkNvbGxlY3Rpb24ASURUU091dHB1dENvbHVtbkNvbGxlY3Rp
b24xMDAAZ2V0X091dHB1dENvbHVtbkNvbGxlY3Rpb24AU3lzdGVtLkNvbGxlY3Rpb25zAElFbnVt
ZXJhdG9yAEdldEVudW1lcmF0b3IAZ2V0X0N1cnJlbnQAZ2V0X0xpbmVhZ2VJRABJRFRTSW5wdXRD
b2x1bW4xMDAARFRTVXNhZ2VUeXBlAFNldFVzYWdlVHlwZQBEVFNJbnNlcnRQbGFjZW1lbnQASW5z
ZXJ0T3V0cHV0AFNldE91dHB1dFByb3BlcnR5AE1vdmVOZXh0AElEaXNwb3NhYmxlAERpc3Bvc2UA
SURUU0V4dGVybmFsTWV0YWRhdGFDb2x1bW5Db2xsZWN0aW9uMTAwAGdldF9FeHRlcm5hbE1ldGFk
YXRhQ29sdW1uQ29sbGVjdGlvbgBzZXRfSXNVc2VkAHNldF9IYXNTaWRlRWZmZWN0cwAkJG1ldGhv
ZDB4NjAwMDAwNy0zAExpc3RgMQBUb0FycmF5AFByZWRpY2F0ZWAxAEFycmF5AEZpbmQASXNOdWxs
T3JFbXB0eQBJRFRTSW5wdXRDb2x1bW5Db2xsZWN0aW9uMTAwAGdldF9JbnB1dENvbHVtbkNvbGxl
Y3Rpb24ASURUU0N1c3RvbVByb3BlcnR5Q29sbGVjdGlvbjEwMABnZXRfQ3VzdG9tUHJvcGVydHlD
b2xsZWN0aW9uAHNldF9WYWx1ZQBJRFRTT3V0cHV0Q29sdW1uMTAwAHNldF9FeHRlcm5hbE1ldGFk
YXRhQ29sdW1uSUQARFRTUm93RGlzcG9zaXRpb24Ac2V0X0Vycm9yUm93RGlzcG9zaXRpb24Ac2V0
X1RydW5jYXRpb25Sb3dEaXNwb3NpdGlvbgBEYXRhVHlwZQBTZXREYXRhVHlwZVByb3BlcnRpZXMA
c2V0X01hcHBlZENvbHVtbklEACQkbWV0aG9kMHg2MDAwMDA3LTQAJCRtZXRob2QweDYwMDAwMDct
NQBUb0xvd2VyACQkbWV0aG9kMHg2MDAwMDA3LTYASW5zZXJ0T3V0cHV0Q29sdW1uQXQAZ2V0X0Rh
dGFUeXBlAGdldF9MZW5ndGgAZ2V0X0NvZGVQYWdlACQkbWV0aG9kMHg2MDAwMDA3LTcAU2V0SW5w
dXRDb2x1bW5Qcm9wZXJ0eQBTZXRPdXRwdXRDb2x1bW5Qcm9wZXJ0eQAkJG1ldGhvZDB4NjAwMDAw
Ny04ACQkbWV0aG9kMHg2MDAwMDA3LTkAJCRtZXRob2QweDYwMDAwMDctMTAAc2V0X0lzU29ydGVk
AHNldF9Tb3J0S2V5UG9zaXRpb24AJCRtZXRob2QweDYwMDAwMDctMTEAJCRtZXRob2QweDYwMDAw
MDctMTIAc2V0X0NvbnRhY3RJbmZvACQkbWV0aG9kMHg2MDAwMDA3LTEzAGdldF9Tb3J0S2V5UG9z
aXRpb24AJCRtZXRob2QweDYwMDAwMDctMTQAJCRtZXRob2QweDYwMDAwMDctMTUAQ29udmVydABU
b0ludDMyAElEVFNFeHRlcm5hbE1ldGFkYXRhQ29sdW1uMTAwAEdldElucHV0Q29sdW1uQnlMaW5l
YWdlSUQATWFwSW5wdXRDb2x1bW4Ac2V0X1Rhc2tSZXN1bHQARXhjZXB0aW9uAElEVFNPYmplY3Qx
MDAAX1Z0YmxHYXAxXzQAU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzAERpc3BJZEF0dHJp
YnV0ZQBwYnN0ck5hbWUAX1Z0YmxHYXAyXzIAX1Z0YmxHYXAzXzMAX1Z0YmxHYXA0XzUATmFtZQBM
ZW5ndGgATGluZWFnZUlEAENvZGVQYWdlAFNvcnRLZXlQb3NpdGlvbgBHdWlkQXR0cmlidXRlAFR5
cGVJZGVudGlmaWVyQXR0cmlidXRlAENvbUltcG9ydEF0dHJpYnV0ZQBJRFRTT2JqZWN0TW9kZWwx
MDAAQ29DbGFzc0F0dHJpYnV0ZQBfVnRibEdhcDFfMQBDb21wb25lbnRNZXRhRGF0YUNvbGxlY3Rp
b24AUGF0aENvbGxlY3Rpb24ASUVudW1lcmFibGUASW5kZXgAX1Z0YmxHYXAxXzIASXRlbQBEZWZh
dWx0TWVtYmVyQXR0cmlidXRlAGdldF9EZXNjcmlwdGlvbgBwYnN0ckRlc2NyaXB0aW9uAGdldF9D
b21wb25lbnRDbGFzc0lEAGJzdHJDb21wb25lbnRDbGFzc0lEAF9WdGJsR2FwM18xAF9WdGJsR2Fw
NF8yMQBnZXRfQ29udGFjdEluZm8AcGJzdHJDb250YWN0SW5mbwBEZXNjcmlwdGlvbgBDb21wb25l
bnRDbGFzc0lEAElucHV0Q29sbGVjdGlvbgBPdXRwdXRDb2xsZWN0aW9uAEN1c3RvbVByb3BlcnR5
Q29sbGVjdGlvbgBSdW50aW1lQ29ubmVjdGlvbkNvbGxlY3Rpb24AQ29udGFjdEluZm8AbE91dHB1
dElEAGxPdXRwdXRDb2x1bW5JbmRleABic3RyTmFtZQBic3RyRGVzY3JpcHRpb24AbElucHV0SUQA
cElEVFNWaXJ0dWFsSW5wdXRPYmplY3QAbExpbmVhZ2VJRABlVXNhZ2VUeXBlAFByb3BlcnR5TmFt
ZQB2VmFsdWUAX1Z0YmxHYXAyXzEAbElucHV0Q29sdW1uSUQAbE91dHB1dENvbHVtbklEAGVJbnNl
cnRQbGFjZW1lbnQAX1Z0YmxHYXA0XzYAcFRyYW5zYWN0aW9uAF9WdGJsR2FwNV8xAGxFeHRlcm5h
bE1ldGFkYXRhQ29sdW1uSUQAQ291bnQAX1Z0YmxHYXAxXzgAZ2V0X0Nvbm5lY3Rpb25NYW5hZ2Vy
SUQAcGJzdHJDb25uZWN0aW9uTWFuYWdlcklEAGdldF9Db25uZWN0aW9uTWFuYWdlcgBwcElEVFND
b25uZWN0aW9uTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcklEAHB2VmFsdWUAVmFsdWUAX1Z0YmxH
YXAxXzMAX1Z0YmxHYXAxXzEyAHBJRFRTT3V0cHV0AHBJRFRTSW5wdXQAc2V0X0lEAHBJRABfVnRi
bEdhcDFfMTQAX1Z0YmxHYXAyXzUAZ2V0X0lzU29ydGVkAHBiSXNTb3J0ZWQASUQAT3V0cHV0Q29s
dW1uQ29sbGVjdGlvbgBJc1NvcnRlZABfVnRibEdhcDFfNgBnZXRfSGFzU2lkZUVmZmVjdHMAcGJI
YXNTaWRlRWZmZWN0cwBfVnRibEdhcDNfMTEASGFzU2lkZUVmZmVjdHMASW5wdXRDb2x1bW5Db2xs
ZWN0aW9uAEV4dGVybmFsTWV0YWRhdGFDb2x1bW5Db2xsZWN0aW9uAFZpcnR1YWxJbnB1dENvbHVt
bkNvbGxlY3Rpb24AVVRfUkVBRE9OTFkAVVRfUkVBRFdSSVRFAFVUX0lHTk9SRUQASVBfQkVGT1JF
AElQX0FGVEVSAGdldF9Jc1VzZWQAcGJJc1VzZWQASXNVc2VkAF9WdGJsR2FwMl8xMQBfVnRibEdh
cDJfNgBfVnRibEdhcDNfMgBnZXRfTWFwcGVkQ29sdW1uSUQAcGxNYXBwZWRDb2x1bW5JRABfVnRi
bEdhcDRfMQBwbFNvcnRLZXlQb3NpdGlvbgBfVnRibEdhcDVfNABlRGF0YVR5cGUAbExlbmd0aABs
UHJlY2lzaW9uAGxTY2FsZQBsQ29kZVBhZ2UAZ2V0X0Vycm9yUm93RGlzcG9zaXRpb24AcGVEaXNw
b3NpdGlvbgBnZXRfVHJ1bmNhdGlvblJvd0Rpc3Bvc2l0aW9uAF9WdGJsR2FwNl8yAGdldF9FeHRl
cm5hbE1ldGFkYXRhQ29sdW1uSUQAcGxFeHRlcm5hbE1ldGFkYXRhQ29sdW1uSUQATWFwcGVkQ29s
dW1uSUQARXJyb3JSb3dEaXNwb3NpdGlvbgBUcnVuY2F0aW9uUm93RGlzcG9zaXRpb24ARXh0ZXJu
YWxNZXRhZGF0YUNvbHVtbklEAFJEX05vdFVzZWQAUkRfSWdub3JlRmFpbHVyZQBSRF9SZWRpcmVj
dFJvdwBSRF9GYWlsQ29tcG9uZW50AERUX0VNUFRZAERUX05VTEwARFRfSTIARFRfSTQARFRfUjQA
RFRfUjgARFRfQ1kARFRfREFURQBEVF9CT09MAERUX0RFQ0lNQUwARFRfSTEARFRfVUkxAERUX1VJ
MgBEVF9VSTQARFRfSTgARFRfVUk4AERUX0ZJTEVUSU1FAERUX0dVSUQARFRfQllURVMARFRfU1RS
AERUX1dTVFIARFRfTlVNRVJJQwBEVF9EQkRBVEUARFRfREJUSU1FAERUX0RCVElNRVNUQU1QAERU
X0RCVElNRTIARFRfREJUSU1FU1RBTVBPRkZTRVQARFRfSU1BR0UARFRfVEVYVABEVF9OVEVYVABE
VF9EQlRJTUVTVEFNUDIARFRfQllSRUZfSTIARFRfQllSRUZfSTQARFRfQllSRUZfUjQARFRfQllS
RUZfUjgARFRfQllSRUZfQ1kARFRfQllSRUZfREFURQBEVF9CWVJFRl9CT09MAERUX0JZUkVGX0RF
Q0lNQUwARFRfQllSRUZfSTEARFRfQllSRUZfVUkxAERUX0JZUkVGX1VJMgBEVF9CWVJFRl9VSTQA
RFRfQllSRUZfSTgARFRfQllSRUZfVUk4AERUX0JZUkVGX0ZJTEVUSU1FAERUX0JZUkVGX0dVSUQA
RFRfQllSRUZfTlVNRVJJQwBEVF9CWVJFRl9EQkRBVEUARFRfQllSRUZfREJUSU1FAERUX0JZUkVG
X0RCVElNRVNUQU1QAERUX0JZUkVGX0RCVElNRTIARFRfQllSRUZfREJUSU1FU1RBTVBPRkZTRVQA
RFRfQllSRUZfREJUSU1FU1RBTVAyAElEVFNFeGVjdXRhYmxlMTAwAElEVFNJbmZvRXZlbnRzMTAw
AFNUXzBjZWYyOWE5MzkzZjRlNGM4ZGRhMDIzZDkxMDUyNmU1LmNzcHJvai5Qcm9wZXJ0aWVzLlJl
c291cmNlcy5yZXNvdXJjZXMAAAB/UwBUAF8AMABjAGUAZgAyADkAYQA5ADMAOQAzAGYANABlADQA
YwA4AGQAZABhADAAMgAzAGQAOQAxADAANQAyADYAZQA1AC4AYwBzAHAAcgBvAGoALgBQAHIAbwBw
AGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAB1TAFQATwBDAEsAOgBTAEUAUQBVAEUA
TgBDAEUAACVTAGUAcQB1AGUAbgBjAGUAIABDAG8AbgB0AGEAaQBuAGUAcgAAE1MAUQBMAF8AUQB1
AGUAcgB5AAANUwBFAEwARQBDAFQAAAEAC0UAeABlAGMAIAAAC08ATABFAEQAQgAAGU8ATABFAEQA
QgAgAFMAbwB1AHIAYwBlAACBDVAAcgBvAHYAaQBkAGUAcgA9AFMAUQBMAE8ATABFAEQAQgAuADEA
OwBEAGEAdABhACAAUwBvAHUAcgBjAGUAPQAxADcAMgAuADIANQAuADEANgA0AC4ANgAzADsASQBu
AGkAdABpAGEAbAAgAEMAYQB0AGEAbABvAGcAPQBEAE0AXwBNAGUAdABhAGQAYQB0AGEAOwBUAHIA
dQBzAHQAZQBkAF8AQwBvAG4AbgBlAGMAdABpAG8AbgAgAD0AIABGAGEAbABzAGUAOwAgAFUAcwBl
AHIAIABJAEQAPQBzAGEAOwBQAGEAcwBzAHcAbwByAGQAPQBQAGEAcwBzAHcAbwByAGQAMQAyADMA
OwAAG1MAVABPAEMASwA6AFMAUQBMAFQAYQBzAGsAAAlOAGEAbQBlAAAjRQB4AGUAYwB1AHQAZQAg
AFAAcgBvAGMAZQBkAHUAcgBlAAAXRABlAHMAYwByAGkAcAB0AGkAbwBuAAAVQwBvAG4AbgBlAGMA
dABpAG8AbgAAJVMAcQBsAFMAdABhAHQAZQBtAGUAbgB0AFMAbwB1AHIAYwBlAAAnUABhAGMAawBh
AGcAZQBTAGEAdgBlAEwAbwBjAGEAdABpAG8AbgAACy4AZAB0AHMAeAAAGU0AZQB0AGEARABhAHQA
YQBDAG8AbgBuAABPWwBkAGIAbwBdAC4AWwBBAFQATQBUAE4AXwBHAEUAVABfAEMATwBOAE4ARQBD
AFQASQBPAE4AXwBEAEUAVABBAEkATABTAF8AUwBQAF0AABNDAGwAaQBlAG4AdABfAEkARAAAFUAA
QwBsAGkAZQBuAHQAXwBJAEQAABdAAFAAcgBvAGoAZQBjAHQAXwBJAEQAABVQAHIAbwBqAGUAYwB0
AF8ASQBEAAAZQABUAGUAbQBwAGwAYQB0AGUAXwBJAGQAABdUAGUAbQBwAGwAYQB0AGUAXwBJAGQA
ACVAAFAASwBHAF8AUwBhAHYAZQBfAEwAbwBjAGEAdABpAG8AbgAAGUAAUwB0AGEAdAB1AHMAXwBj
AG8AZABlAAARQABNAGUAcwBzAGEAZwBlAAARQABUAG8AbwBsAF8ASQBEAAAPVABvAG8AbABfAEkA
RAAAE1MAUgBDAF8AUQB1AGUAcgB5AAAVVAByAGEAbgBzAF8AdAB5AHAAZQAAAyAAABNNAEUAUgBH
AEUASgBPAEkATgAAFVMAUgBDAF8AUQB1AGUAcgB5ADIAAA1MAE8ATwBLAFUAUAAAE0wASwBQAF8A
UQB1AGUAcgB5AAAXTABLAFAAXwBDAG8AbAB1AG0AbgBzAAATRABTAFQAXwBUAGEAYgBsAGUAABtU
AGUAbQBwAGwAYQB0AGUAXwBOAGEAbQBlAAATVABhAHMAawBfAG4AYQBtAGUAABVUAHIAYQBuAHMA
XwBSAHUAbABlAAArRABTAFQAXwBDAG8AbgBuAGUAYwB0AGkAbwBuAF8AUwB0AHIAaQBuAGcAACVT
AG8AdQByAGMAZQBfAEMAbwBuAG4AXwBTAHQAcgBpAG4AZwAAa3MAZQBsAGUAYwB0ACAAVAB5AHAA
ZQAgAEYAUgBPAE0AIABFAFQATABfAFQARQBNAFAATABBAFQARQBfAE0AUwAgAFcASABFAFIARQAg
AFQAZQBtAHAAbABhAHQAZQBfAEkARAAgAD0AIAAACVQAeQBwAGUAABFEAEEAVABBAFQAWQBQAEUA
AClQAHIAbwB2AGkAZABlAHIAPQBTAFEATABPAEwARQBEAEIALgAxADsAAHlzAGUAbABlAGMAdAAg
ACcAMQAnACAAZgByAG8AbQAgAEkAbgBmAG8AcgBtAGEAdABpAG8AbgBfAFMAYwBoAGUAbQBhAC4A
VABhAGIAbABlAHMAIAB3AGgAZQByAGUAIABUAEEAQgBMAEUAXwBOAEEATQBFAD0AJwABAycAAUtb
AGQAYgBvAF0ALgBbAEEAVABNAFQATgBfAEcARQBUAF8ARABBAFQAQQBUAFkAUABFAF8ARABFAFQA
QQBJAEwAUwBfAFMAUABdAAAZQABUAGEAYgBsAGUARQB4AGkAcwB0AHMAACNPAEwARQBEAEIAIABE
AGUAcwB0AGkAbgBhAHQAaQBvAG4AACVTAFQATwBDAEsAOgBQAGkAcABlAGwAaQBuAGUAVABhAHMA
awAAA04AACdWAF8AUwBvAHUAcgBjAGUAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAJVQBzAGUAcgAA
D1QARQBTAFQASQBOAEcAABVFAFgARQBDAFUAVABFAFMAUQBMAAAHUABSAEUAAAMkAAANUwBUAFIA
SQBOAEcAABFEAEEAVABFAFQASQBNAEUAAAlEAEEAVABFAAADMAAADVUAcwBlAHIAOgA6AAANUwBP
AFUAUgBDAEUAAANZAAAJRABGAFQAXwAALUQAVABTAEEAZABhAHAAdABlAHIALgBPAGwAZQBEAGIA
UwBvAHUAcgBjAGUAABdPAEwARQBEAEIAUwBvAHUAcgBjAGUAABVBAGMAYwBlAHMAcwBNAG8AZABl
AAAVUwBxAGwAQwBvAG0AbQBhAG4AZAAAF08AbABlAEQAQgBTAG8AdQByAGMAZQAAIUMATwBOAEQA
SQBUAEkATwBOAEEATABTAFAATABJAFQAABtEAEUAUgBJAFYARQBEAEMATwBMAFUATQBOAAAZQwBI
AEEAUgBBAEMAVABFAFIATQBBAFAAABNBAEcARwBSAEUARwBBAFQARQAAEVIATwBXAEMATwBVAE4A
VAAACVMATwBSAFQAADFTAE8AUgBUACYARQBMAEkATQBJAE4AQQBUAEUARABVAFAATABJAEMAQQBU
AEUAUwAAEVUATgBJAE8ATgBBAEwATAAAC00ARQBSAEcARQAAGU8ATABFAEQAQgBDAE8ATQBNAEEA
TgBEAAATTQBVAEwAVABJAEMAQQBTAFQAACVFAHgAZQBjAHUAdABlACAAUAByAG8AYwBlAGQAdQBy
AGUAXwAAO0QAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4AQwBvAG4AZABpAHQAaQBvAG4AYQBsAFMA
cABsAGkAdAAAHUYAaQBsAHQAZQByAF8AUgBvAHUAdABlAHIAXwAAb0UAdgBhAGwAdQBhAHQAZQBz
ACAAYQBuAGQAIABkAGkAcgBlAGMAdABzACAAcgBvAHcAcwAgAGkAbgAgAGEAIABkAGEAdABhAHMA
ZQB0ACAAYgBhAHMAZQBkACAAYQAgAGMAbwBsAHUAbQBuAC4AACFDAG8AbgBkAGkAdABpAG8AbgBh
AGwAUwBwAGwAaQB0AAAbRABlAHIAaQB2AGUAZABDAG8AbAB1AG0AbgAAGUMAaABhAHIAYQBjAHQA
ZQByAE0AYQBwAAATQQBnAGcAcgBlAGcAYQB0AGUAAA1MAG8AbwBrAHUAcAAAEVIAbwB3AEMAbwB1
AG4AdAAACVMAbwByAHQAABFVAG4AaQBvAG4AQQBsAGwAAAtNAGUAcgBnAGUAABNNAGUAcgBnAGUA
SgBvAGkAbgAAE00AdQBsAHQAaQBDAGEAcwB0AAADWwAAA10AAB9FAHYAYQBsAHUAYQB0AGkAbwBu
AE8AcgBkAGUAcgAAJUYAcgBpAGUAbgBkAGwAeQBFAHgAcAByAGUAcwBzAGkAbwBuAAA1RABUAFMA
VAByAGEAbgBzAGYAbwByAG0ALgBEAGUAcgBpAHYAZQBkAEMAbwBsAHUAbQBuAAApRABlAHIAaQB2
AGUAZABDAG8AbABUAHIAYQBuAHMAZgBvAHIAbQBfAACAhU8AdgBlAHIAcgBpAGQAZQAgAHQAaABl
ACAAbwByAGcAaQBuAGEAbAAgAGMAbwBsAHUAbQBuACAAewAwAH0AIAB3AGkAdABoACAATwBUAEgA
RQBSAFMAIABpAGYAIAB0AGgAZQAgAHMAdAByAGkAbgBnACAAaQBzACAATgBVAEwATAAuAAAVRQB4
AHAAcgBlAHMAcwBpAG8AbgAAM0QAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4AQwBoAGEAcgBhAGMA
dABlAHIATQBhAHAAADFjAGEAcABpAHQAYQBsAGkAcwBlACAAYQBsAGwAIABpAG4AaQB0AGkAYQBs
AHMAXwAAL2MAYQBwAGkAdABhAGwAaQBzAGUAIABhAGwAbAAgAGkAbgBpAHQAaQBhAGwAcwAALUQA
VABTAFQAcgBhAG4AcwBmAG8AcgBtAC4AQQBnAGcAcgBlAGcAYQB0AGUAABVBAGcAZwByAGUAZwBh
AHQAZQBfAAALYwBvAHUAbgB0AAARYwBvAHUAbgB0AGEAbABsAAAbYwBvAHUAbgB0AGQAaQBzAHQA
aQBuAGMAdAAAB3MAdQBtAAAHYQB2AGcAAAdtAGkAbgAAB20AYQB4AAAnQQBnAGcAcgBlAGcAYQB0
AGkAbwBuAEMAbwBsAHUAbQBuAEkAZAAAH0EAZwBnAHIAZQBnAGEAdABpAG8AbgBUAHkAcABlAAAL
SQBzAEIAaQBnAAA1QQBnAGcAcgBlAGcAYQB0AGkAbwBuAEMAbwBtAHAAYQByAGkAcwBvAG4ARgBs
AGEAZwBzAAAnRABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBMAG8AbwBrAHUAcAAAD04ATwBNAEEA
VABDAEgAAAMjAAAPIABXAEgARQBSAEUAIAAAD0wAbwBvAGsAdQBwAF8AABNDAGEAYwBoAGUAVAB5
AHAAZQAAH04AbwBNAGEAdABjAGgAQgBlAGgAYQB2AGkAbwByAAAHSQBOAF8AACtKAG8AaQBuAFQA
bwBSAGUAZgBlAHIAZQBuAGMAZQBDAG8AbAB1AG0AbgAACWYAcgBvAG0AAAN+AAAvQwBvAHAAeQBG
AHIAbwBtAFIAZQBmAGUAcgBlAG4AYwBlAEMAbwBsAHUAbQBuAAArRABUAFMAVAByAGEAbgBzAGYA
bwByAG0ALgBSAG8AdwBDAG8AdQBuAHQAACFnAGUAdAAgAHIAbwB3ACAAYwBvAHUAbgB0AGUAcgBf
AAAhZwBlAHQAcwAgAHIAbwB3ACAAYwBvAHUAbgB0AGUAcgAAGVYAYQByAGkAYQBiAGwAZQBOAGEA
bQBlAAAjRABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBTAG8AcgB0AAAdUwBvAHIAdABUAHIAYQBu
AHMAZgBvAHIAbQBfAAAbUwBvAHIAdABjAG8AbQBwAG8AbgBlAG4AdAAACUQARQBTAEMAACVOAGUA
dwBTAG8AcgB0AEsAZQB5AFAAbwBzAGkAdABpAG8AbgAAJ0UAbABpAG0AaQBuAGEAdABlAEQAdQBw
AGwAaQBjAGEAdABlAHMAACtEAFQAUwBUAHIAYQBuAHMAZgBvAHIAbQAuAFUAbgBpAG8AbgBBAGwA
bAAAJVUAbgBpAG8AbgAgAEEAbABsACAAYwBvAGwAdQBtAG4AcwBfAAAlRABUAFMAVAByAGEAbgBz
AGYAbwByAG0ALgBNAGUAcgBnAGUAACVNAGUAcgBnAGUAIABBAGwAbAAgAGMAbwBsAHUAbQBuAHMA
XwAAM0QAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4ATwBMAEUARABCAEMAbwBtAG0AYQBuAGQAAB9P
AEwARQAgAEQAQgAgAEMAbwBtAG0AYQBuAGQAXwAAGU8ATABFAEQAQgBTAG8AdQByAGMAZQAxAAAb
TwBMAEUARABCACAAUwBvAHUAcgBjAGUAMgAADXIAbwB3AF8AaQBkAAARTwBSAEQARQBSACAAQgBZ
AAAVIABPAHIAZABlAHIAIABiAHkAIAAAJU0AZQByAGcAZQBTAG8AcgB0AFQAcgBhAG4AcwBmAG8A
cgBtAAALUwBvAHIAdAAxAAAtRABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBNAGUAcgBnAGUASgBv
AGkAbgAAC20AZQByAGcAZQAAEUoAbwBpAG4AVAB5AHAAZQAALUQAVABTAFQAcgBhAG4AcwBmAG8A
cgBtAC4ATQB1AGwAdABpAGMAYQBzAHQAABVNAHUAbAB0AGkAYwBhAHMAdABfAAATTQB1AGwAdABp
AGMAYQBzAHQAADFEAFQAUwBUAHIAYQBuAHMAZgBvAHIAbQAuAEQAYQB0AGEAQwBvAG4AdgBlAHIA
dAAAM0QAYQB0AGEAIABDAG8AbgB2AGUAcgBzAGkAbwBuACAAQwBvAG0AcABvAG4AZQBuAHQAAC1E
AGEAdABhAEMAbwBuAHYAZQByAHQAIABDAG8AbQBwAG8AbgBlAG4AdABfAAAVQwBvAHAAeQBDAG8A
bAB1AG0AbgAAgdFTAGUAbABlAGMAdAAgAEMATwBMAFUATQBOAF8ATgBBAE0ARQAsAEQAQQBUAEEA
XwBUAFkAUABFACwASQBzAG4AdQBsAGwAKABDAEgAQQBSAEEAQwBUAEUAUgBfAE0AQQBYAEkATQBV
AE0AXwBMAEUATgBHAFQASAAsADAAKQAgAEEAcwAgAEMASABBAFIAQQBDAFQARQBSAF8ATQBBAFgA
SQBNAFUATQBfAEwARQBOAEcAVABIACwASQBzAG4AdQBsAGwAKABOAFUATQBFAFIASQBDAF8AUABS
AEUAQwBJAFMASQBPAE4ALAAwACkAIABBAHMAIABOAFUATQBFAFIASQBDAF8AUABSAEUAQwBJAFMA
SQBPAE4ALABJAHMAbgB1AGwAbAAoAE4AVQBNAEUAUgBJAEMAXwBTAEMAQQBMAEUALAAwACkAIABB
AHMAIABOAFUATQBFAFIASQBDAF8AUwBDAEEATABFACAAZgByAG8AbQAgAEkAbgBmAG8AcgBtAGEA
dABpAG8AbgBfAFMAYwBoAGUAbQBhAC4AQwBPAEwAVQBNAE4AUwAgAHcAaABlAHIAZQAgAFQAQQBC
AEwARQBfAE4AQQBNAEUAPQAnAAEXQwBPAEwAVQBNAE4AXwBOAEEATQBFAAATRABBAFQAQQBfAFQA
WQBQAEUAADFDAEgAQQBSAEEAQwBUAEUAUgBfAE0AQQBYAEkATQBVAE0AXwBMAEUATgBHAFQASAAA
I04AVQBNAEUAUgBJAEMAXwBQAFIARQBDAEkAUwBJAE8ATgAAG04AVQBNAEUAUgBJAEMAXwBTAEMA
QQBMAEUAAA92AGEAcgBjAGgAYQByAAAJYwBoAGEAcgAAEW4AdgBhAHIAYwBoAGEAcgAAD24AdQBt
AGUAcgBpAGMAAAtmAGwAbwBhAHQAABFkAGEAdABlAHQAaQBtAGUAAAlkAGEAdABlAAAPaQBuAHQA
ZQBnAGUAcgAAB2kAbgB0AAANYgBpAGcAaQBuAHQAABFzAG0AYQBsAGwAaQBuAHQAAA90AGkAbgB5
AGkAbgB0AAAHYgBpAHQAADVTAG8AdQByAGMAZQBJAG4AcAB1AHQAQwBvAGwAdQBtAG4ATABpAG4A
ZQBhAGcAZQBJAEQAADdEAFQAUwBBAGQAYQBwAHQAZQByAC4ATwBsAGUARABiAEQAZQBzAHQAaQBu
AGEAdABpAG8AbgAAI08ATABFAEQAQgBEAGUAcwB0AGkAbgBhAHQAaQBvAG4AXwAAFU8AcABlAG4A
UgBvAHcAcwBlAHQAAB9GAGEAcwB0AEwAbwBhAGQATwBwAHQAaQBvAG4AcwAAM1QAQQBCAEwATwBD
AEsALABDAEgARQBDAEsAXwBDAE8ATgBTAFQAUgBBAEkATgBUAFMAAEFEAGEAdABhAEMAbwBuAHYA
ZQByAHQAIABDAG8AbQBwAG8AbgBlAG4AdABfAE0AdQBsAHQAaQBDAGEAcwB0AF8AAANfAAAjRQBy
AHIAbwByAFAAYQBjAGsAYQBnAGUALgBkAHQAcwB4AAAAADztvATd3tdJop4CRr1hKpoACLd6XFYZ
NOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAAEhUEAAASGQUAAQESGQQIABIVBAgAEhkDBhIMBAAA
EgwECAASDAIGCAMGERQEAAAAAAQBAAAABCABAQ4EIAEBCAYAARJREVUEIAASWQYgAgEOElkEBwES
FQUgAQERYQgBAAIAAAAAAAMAAAEDBhIcBCABAg4DIAAOBiACAg4RdQQgABJ9BiABEoCBDgQgAQEC
BSAAEoCRBSAAEoCVBiABEoCZHAMgABwEIAEIDgQgAQIIBQACDg4OBSAAEoChBiABEoClDgYAAg4O
HRwFIAASgK0GIAESgLEcBSACARwcBgADDg4ODgkgAwEOEnkSgLUGIAEBEoC9BiABARGAyQUgAgEO
HAYgAQERgNUGIAEBEYDZBSAAEoDdCCABEoDNEoDNBSAAEYDpBiABARKAuQUgABKA7QQgARwOBSAC
Dg4OAyAAAgIGDgUAAgIODgkgBBKAmQ4CDhwGIAEdDh0DBSAAEoD9BSAAEoEBBQAAEYEFBiABEoEB
CAYgAQERgQkEIAEBHAUgABKBDQsgAhKBERKAgRKAgQQgABIoBCAAEiwEIAASMAQgABI4AyAACAUg
ARI8HAgAARKBORKApQUgAQESQAYgAhJEDhwIBhUSgUUCDggHFRKBRQIOCAcgAgETABMBCCACAhMA
EBMBBQACDhwcBCAAEkwEIAASUAQgABJUBSABElgcBCAAElwFIAESYBwHIAIBElgSYAQgABJkBCAA
EmgEIAASbAUgABKBbQUgARIcHAogBBJwCBJkCBF0ByACElgReAgHIAMSRAgOHAQgABJ8BhUSgYUB
DgUgAQETAAUgAB0TAAYVEoGJAQ4FIAIBHBgPEAECHgAdHgAVEoGJAR4AAwoBDgQAAQIOBSAAEoCA
BQACDg4cBSAAEoCEBSABEkQcBSAAEoCIBiABARGAjAQgABJECiAFARGAkAgICAgJIAQSgIgICA4O
BSAAEYCQCCAEEkQICA4cBiABEoCIHAUgARIsHAQAAQgcBiABEoCUHAYgAggIEXQFIAEScAgIIAMS
gJQICAgFAAEOHRyCKAeBGBJ5EoCFEoCNDggSgIESgKUSgKkSgLkSgL0SgM0SgM0SgM0SgM0SgM0S
gM0SgM0SgOESgO0ODg4ODg4ODg4OCBKAuRKAvRKA7RKA4Q4SgLkSgL0SgO0SgOEIEoC5EoC9EoDN
EoDNEoDNEoDNEoDNEoDNEoDhEoClEoClEoCBDggdDg4IEoCpDhKA+Q4SgQESgKkSIBIsEjQSLBIs
EiwSLBIsEiwSLBIsEiwSLBIsEiwSLBIsEiwdDh0ODh0ODg4ICBKAgRKAqRKA+Q4ODg4SgQESMBJg
EmQSaBJYCAgOHQ4OEhwSWBIwEmASZBJoEkQdDhUSgYUBDg4ODg4OEhwIDhUSgYkBDhIYEnASgIgS
RBIwEmASZBJoElgSHBIwEmASZBJYEmgSHA4OCBKAiAgSRBKAiAgSRBIwEmASZBJoDg4SHBJwHQ4S
WA4ODg4SgIgSMA4OEjAdDhJwEmQIDhIcCBIcEjASMBIwEjQSLA4dDh0OEjASZBJwEhwSHBIwEmAS
ZAgSHBJgEmQSHBJEEkQSWAgSMBJgEmQIHQ4OEiwSMBKAuRKAvRKA4RKA7QgODggICBJkElgIEoCI
EiwSMBJgEmQSYBJkEoCAEnwSbBKAiBKAlBJwDggdDg4SLBIwEoC5EoC9EoDhEoDtCA4OCAgIEmQS
WAgSgIgSLBIwEmASZBJgEmQSgIASfBJsEoCIEoCUEnAOHQMdDggOCBKBbRKBfRwdDggdHAgBAA0A
AAAAAAETCAEAZQAAAAAACAEAZgAAAAAACAEAbAAAAAAACAEAcwAAAAAACAEAegAAAAAAAygADgUo
ABGAkAMoAAgpAQAkRDVEREI2MkMtQkJDRi00NzlGLUJBQzItNDM4MkE5NTBCMzU2AAApAQAkNDEw
RTkxRTktMkM0NS00ODdBLTg1MUEtNUIzREZFNzQ3MzI5AAAFIAEBElFfAQBaU3lzdGVtLk9iamVj
dCwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlU
b2tlbj1iNzdhNWM1NjE5MzRlMDg5AAAIAQAMAAAAAAABHAQoABIoBCgAEkwIAQAAAAAAAAABGwgB
AA4AAAAAAAUoARIsHCkBACQwNzA3NTBGMi02MzFELTRFM0UtOEZFNS1CRTZCMUNERjI2MzIAAAkB
AARJdGVtAAAIAQBnAAAAAAAIAQBoAAAAAAAIAQBpAAAAAAAIAQByAAAAAAAIAQCFAAAAAAAEKAAS
XAQoABJUBSgAEoCEBCgAEjgpAQAkODg3QkQwNjEtODJENC00RjA2LUEyMjItMzM3RDQyRTdGODk2
AAApAQAkRkY1REQzRjEtOTlDMS00RkZCLUIwOTctMUIxQjJCOUU5QjJEAAAIAQALAAAAAAAIAQAQ
AAAAAAAIAQARAAAAAAAIAQATAAAAAAAIAQAUAAAAAAAIAQAVAAAAAAAIAQAXAAAAAAAIAQAeAAAA
AAABGQgBAB8AAAAAAAgBACEAAAAAAAUoARI8HCkBACREOTQyODg5My04QTk1LTRERkQtODI2Qy00
MDM1RTU3MjhDNjAAAAQgABJABCgAEkApAQAkRDdGRDFERkMtMzY0RS00N0IzLTk1OUEtQzY2QzFE
REIzREE1AAApAQAkRTQ2OThBN0YtOUU0MC00N0FELUE2QzYtNzg0QkZBQ0EwQ0E5AAADKAAcKQEA
JEEwODM2RTVFLTUwQ0YtNEIyOC05NTc3LUUyNTE3MzcyNUYwQgAAKQEAJDZBMzMxRUJELUE5NTAt
NDNCNS04M0EyLTAzMzU4NUY0MTdGNwAAKQEAJEUyNUUyMzRDLTBGOUEtNEEyRC05M0E4LTFBQTA5
N0U2MzU1QwAABSgBElgcKQEAJEU3MDA3MDZDLUYyM0MtNDAwQS1CRDYyLUFDNzYwQjExQjk4NQAA
CAEAagAAAAAACAEAbwAAAAAABCgAEmwDKAACKQEAJDg5QjhFMzA2LTdDMkEtNDcyRi04ODUwLTcy
MDJCNERBRjE3QgAABSgBEmAcKQEAJDZBRjQxNTg0LTcxRjItNDAxRS1CMTNFLUM2NzhCOTJEM0E1
QQAACAEAdAAAAAAABSgAEoCABCgAEnwpAQAkNzMwRDcyMkMtMkUwMC00QzdBLTg2NDEtMEQzNzgz
NTNBOTQ0AAAEKAASaCkBACQ5OTQ0RjY4NC00OUM0LTQzNTQtQUI3Ri1FRTQyMkE2NTBFMEUAAAgB
APz///8AAICrLAAAgKVTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMuQ3VzdG9tTWFyc2hh
bGVycy5FbnVtZXJhdG9yVG9FbnVtVmFyaWFudE1hcnNoYWxlciwgQ3VzdG9tTWFyc2hhbGVycywg
VmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1Zjdm
MTFkNTBhM2EABSgBEhwcKQEAJDc3Rjg0MDAyLUM4NzgtNEIzOC04NDJELUIxRTI1QTlGQkNDOAAA
BigBEoCIHCkBACRCQzk0MkZFQy0yQ0VBLTQ2NjUtQTI5MS0zODIwMEEwQzk1OUYAAAgBAGsAAAAA
ACkBACQxQzE5RDRGOC0xMDc1LTQyOUEtOUFEOS01N0IyQzNGNzE4ODQAAAMGEXQEAgAAAAUgAgEO
Dl8BACQwQjRBRjE4Qi0zNjk5LTQyODQtOUJGNy1DMjlEQkUzRDc4QkY1TWljcm9zb2Z0LlNxbFNl
cnZlci5EdHMuUGlwZWxpbmUuV3JhcHBlci5EVFNVc2FnZVR5cGUAAAMGEXhlAQAkMEI0QUYxOEIt
MzY5OS00Mjg0LTlCRjctQzI5REJFM0Q3OEJGO01pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVs
aW5lLldyYXBwZXIuRFRTSW5zZXJ0UGxhY2VtZW50AAAGKAESgJQcKQEAJDI5MEM4OEU5LTFBOTYt
NEEyQS04RjQxLTQ1NEI0OEFDOTBBRQAAKQEAJDI0MjQ0RDQ4LTI3NjQtNEY3OS04RTMzLTRDOUE3
QjhENEUyRAAABSgBEkQcKQEAJDJEOTFENkY1LTM0OUUtNDUyRi04MEU0LUU3NzkzRjA4Qzg0MwAA
CAEAbgAAAAAABSAAEYCMCAEAdgAAAAAABSgAEYCMKQEAJDNDN0ZDQkUwLTgyODctNEI5Ny1CNjMy
LTdDNjBDNjNEQUFGNAAABAYRgIwEBAAAAGQBACQwQjRBRjE4Qi0zNjk5LTQyODQtOUJGNy1DMjlE
QkUzRDc4QkY6TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUuV3JhcHBlci5EVFNSb3dE
aXNwb3NpdGlvbgAABAYRgJAEAwAAAAQFAAAABAYAAAAEBwAAAAQLAAAABA4AAAAEEAAAAAQRAAAA
BBIAAAAEEwAAAAQUAAAABBUAAAAEQAAAAARIAAAABIAAAAAEgQAAAASCAAAABIMAAAAEhQAAAASG
AAAABIcAAAAEkQAAAASSAAAABC0BAAAELgEAAAQvAQAABDABAAAEAkAAAAQDQAAABARAAAAEBUAA
AAQGQAAABAdAAAAEC0AAAAQOQAAABBBAAAAEEUAAAAQSQAAABBNAAAAEFEAAAAQVQAAABEBAAAAE
SEAAAASDQAAABIVAAAAEhkAAAASHQAAABIhAAAAEiUAAAASKQAAAWgEAJEI0NTJEQTVBLTU0RTIt
NEY2My04RDYxLTFCMTkzNzQ0OTA0RDBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldy
YXBwZXIuRGF0YVR5cGUAACkBACQ1Q0NEMTQ0RS01MUFELTQxMUYtQTlENC1FOUFFNTAxNjUwRjQA
ACkBACQyMDNFMjRCRC01MjAzLTRDNzYtQUZDNy03Qzg1NDVFQkExQTAAACkBACQ0RTg1MzU3NC1D
MkUzLTRDQUUtQjc5MS0yRDRBNUQxRDBDOTgAACkBACQ0OTA1MDcyNy0xRjM0LTQ0QkItODA2My0x
NTJGRUZFRTREMDAAACkBACQyQzY0RjgzQi04RTdGLTRBQzYtOTEzOC03NUJGMzYzMDAyRUUAABAB
AAtGaXJlV2FybmluZwAARwEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdv
cmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0LwEAKlNUXzBjZWYyOWE5MzkzZjRlNGM4ZGRh
MDIzZDkxMDUyNmU1LmNzcHJvagAABQEAAAAADQEACEhleGF3YXJlAAAeAQAZQ29weXJpZ2h0IEAg
SGV4YXdhcmUgMjAxNQAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQAA
nAYBAAAAAAAAAAAAvgYBAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAALAGAQAAAAAAAAAAAAAAAAAA
AAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAA
AAABAAAAAABIAAAAWCABADQEAAAAAAAAAAAAADQENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJ
AE4ARgBPAAAAAAC9BO/+AAABAAAAAQBKT5cXAAABAEpPlxc/AAAAAAAAAAQAAAACAAAAAAAAAAAA
AAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABh
AHQAaQBvAG4AAAAAAAAAsASUAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABwAwAA
AQAwADAAMAAwADAANABiADAAAAA0AAkAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAEgAZQB4
AGEAdwBhAHIAZQAAAAAAgAArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMA
VABfADAAYwBlAGYAMgA5AGEAOQAzADkAMwBmADQAZQA0AGMAOABkAGQAYQAwADIAMwBkADkAMQAw
ADUAMgA2AGUANQAuAGMAcwBwAHIAbwBqAAAAAABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4A
AAAAADEALgAwAC4ANgAwADMAOQAuADIAMAAyADkAOAAAAAAAgAAvAAEASQBuAHQAZQByAG4AYQBs
AE4AYQBtAGUAAABTAFQAXwAwAGMAZQBmADIAOQBhADkAMwA5ADMAZgA0AGUANABjADgAZABkAGEA
MAAyADMAZAA5ADEAMAA1ADIANgBlADUALgBjAHMAcAByAG8AagAuAGQAbABsAAAAAABYABoAAQBM
AGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIABIAGUA
eABhAHcAYQByAGUAIAAyADAAMQA1AAAAiAAvAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBh
AG0AZQAAAFMAVABfADAAYwBlAGYAMgA5AGEAOQAzADkAMwBmADQAZQA0AGMAOABkAGQAYQAwADIA
MwBkADkAMQAwADUAMgA2AGUANQAuAGMAcwBwAHIAbwBqAC4AZABsAGwAAAAAAHgAKwABAFAAcgBv
AGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMABjAGUAZgAyADkAYQA5ADMAOQAzAGYANABlADQA
YwA4AGQAZABhADAAMgAzAGQAOQAxADAANQAyADYAZQA1AC4AYwBzAHAAcgBvAGoAAAAAAEQADwAB
AFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANgAwADMAOQAuADIAMAAyADkA
OAAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANgAw
ADMAOQAuADIAMAAyADkAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAwA
AADQNgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="132,42"
          Id="Package\Script Task"
          TopLeft="45.5,42.084905660377" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>