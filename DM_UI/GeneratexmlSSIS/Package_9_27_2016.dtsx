<?xml version="1.0"?>
<DTS:Executable
  DTS:refId="Package" xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:CreatorName="CORP\30655"
  DTS:CreatorComputerName="EBII433F1"
  DTS:CreationDate="10/20/2015 4:24:32 PM"
  DTS:PackageType="5"
  DTS:VersionBuild="798"
  DTS:VersionGUID="{64CA05F2-7DAA-4E79-8705-883D2E6E235C}"
  DTS:LastModifiedProductVersion="11.0.2100.60"
  DTS:LocaleID="1033"
  DTS:ObjectName="Automaton"
  DTS:DTSID="{D310205B-43F5-4EF6-B63C-558E5D56CA05}"
  DTS:CreationName="SSIS.Package.3">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="Client_ID"
      DTS:DTSID="{6DFB22B1-A15A-4056-BDEC-816F891A67A2}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">0001</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="MetaDataConn"
      DTS:DTSID="{E5A5BBA2-5FB3-474B-8D59-CCD208FD94DE}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="PackageSaveLocation"
      DTS:DTSID="{074C8B01-808B-4914-A001-93E2A1B90E24}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">C:\\Users\\31967\\Documents\\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="Project_ID"
      DTS:DTSID="{53A26606-6F81-41F9-9DF4-DBB7A38CEE80}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">BaloisePOC</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="Template_Id"
      DTS:DTSID="{0797C9F6-080F-4251-9967-5F546716FFD6}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="3">10111</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="6789"
      DTS:ObjectName="Tool_ID"
      DTS:DTSID="{964A4023-B593-4C9A-A0C2-20331186B059}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="3">1</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:ThreadHint="0"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:DTSID="{63E36738-C038-4A61-A746-8E99D7F03078}"
      DTS:Description="Script Task"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">
      <DTS:Variables>
        <DTS:Variable
          DTS:Namespace="User"
          DTS:IncludeInDebugDump="2345"
          DTS:ObjectName="SQL_Query"
          DTS:DTSID="{5FD3B0C6-2C63-419F-BABE-2A9D71E29451}"
          DTS:CreationName="">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:EventHandlers>
        <DTS:EventHandler
          DTS:refId="Package\Script Task.EventHandlers[OnError]"
          DTS:EventID="153018280"
          DTS:EventName="OnError"
          DTS:LocaleID="-1"
          DTS:DTSID="{350E7448-DBA9-4F87-8003-C4FD2A3595CF}"
          DTS:CreationName="OnError">
          <DTS:Variables>
            <DTS:Variable
              DTS:Namespace="System"
              DTS:IncludeInDebugDump="6789"
              DTS:ObjectName="Propagate"
              DTS:DTSID="{626EAEEA-6AC1-41F7-A0B1-AFD73B0819B4}"
              DTS:Description="The propagate property of the event"
              DTS:CreationName="">
              <DTS:VariableValue
                DTS:DataType="11">-1</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:Executables />
        </DTS:EventHandler>
      </DTS:EventHandlers>
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_0cef29a9393f4e4c8dda023d910526e5"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::SQL_Query,User::Client_ID,User::MetaDataConn,User::PackageSaveLocation,User::Project_ID,User::Template_Id,User::Tool_ID">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="st_0cef29a9393f4e4c8dda023d910526e5.csproj"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_0cef29a9393f4e4c8dda023d910526e5.csproj</RootNamespace>
    <AssemblyName>ST_0cef29a9393f4e4c8dda023d910526e5.csproj</AssemblyName>
    <ProjectGuid>{C0FCFF17-7581-4520-BCC1-8ED2A17FE389}</ProjectGuid>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>x86</PlatformTarget>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Microsoft.SqlServer.Dts.Design, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="devenv.exe" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebugcc3ac67d-0b18-4221-a106-262fb5ace362/f9652827-6f67-44de-98e6-1eee4cddd063&quot;" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
  <PropertyGroup>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Data;
using System.Data.SqlClient;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using System.Data.Sql;
using Microsoft.SqlServer.Dts.Tasks;
using Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask;
using ExecuteSQLTask=Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask;
using Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.Connections;

using System.Data.SqlTypes;
using Microsoft.SqlServer.Server;
using System.IO;
using System.Collections.Generic;

namespace ST_e9c9cb3a5ac449d293ddeb5242adec78.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/
        public void Main()
        {
            Package p = new Package();
            Sequence exec_SEQ = (Sequence)p.Executables.Add("STOCK:SEQUENCE");
            exec_SEQ.FailPackageOnFailure = true;
            exec_SEQ.FailParentOnFailure = true;
            exec_SEQ.Name = @"Sequence Container";
            exec_SEQ.Description = @"Sequence Container";
            Application Automaton_app = new Application();
            try
            {
                string SQL_Query = Dts.Variables["SQL_Query"].Value.ToString().Trim();
                int test = SQL_Query.IndexOf("SELECT");
                Executable exec = null;

                if (!SQL_Query.Equals(""))
                {
                    if (test.Equals(-1))
                    {
                        SQL_Query = "Exec " + SQL_Query;
                    }
                    ConnectionManager cm = p.Connections.Add("OLEDB");
                    cm.Name = "OLEDB Source";
                    cm.ConnectionString = string.Format("Provider=SQLOLEDB.1;Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False; User ID=sa;Password=Password123;");
                    exec = exec_SEQ.Executables.Add("STOCK:SQLTask");
                    TaskHost th = exec as TaskHost;

                    th.Properties["Name"].SetValue(th, "Execute Procedure");
                    th.Properties["Description"].SetValue(th, "Execute Procedure");
                    th.Properties["Connection"].SetValue(th, "OLEDB Source");
                    //th.Properties["SqlStatementSource"].SetValue(th, "Truncate table dbo.Employee_TGT");
                    th.Properties["SqlStatementSource"].SetValue(th, SQL_Query);
                    //Automaton_app.SaveToSqlServer(p, null, "172.25.164.63", "sa", "Password123");
                    //Automaton_app.SaveToSqlServer(p, null, "172.25.121.105", null, null);

                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + SQL_Query + ".dtsx", p, null);
                }
                else
                {
                    SqlCommand Sqlcmd1 = new SqlCommand();
                    SqlConnection SqlConn1 = new SqlConnection();                    
                    
                    //SqlConn1.ConnectionString = @"Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;";
                    SqlConn1.ConnectionString = Dts.Variables["MetaDataConn"].Value.ToString().Trim();
                    Sqlcmd1.Connection = SqlConn1;
                    Sqlcmd1.CommandType = CommandType.StoredProcedure;
                    Sqlcmd1.CommandText = "[dbo].[ATMTN_GET_CONNECTION_DETAILS_SP]";
                    SqlParameter param1;
                    string Testdata = Dts.Variables["Client_ID"].Value.ToString().Trim();
                    param1 = new SqlParameter("@Client_ID", Dts.Variables["Client_ID"].Value.ToString().Trim());
                    param1.Direction = ParameterDirection.Input;
                    param1.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param1);

                    SqlParameter param2;
                    param2 = new SqlParameter("@Project_ID", Dts.Variables["Project_ID"].Value.ToString().Trim());
                    param2.Direction = ParameterDirection.Input;
                    param2.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param2);

                    SqlParameter param3;
                    param3 = new SqlParameter("@Template_Id", Dts.Variables["Template_Id"].Value.ToString().Trim());
                    param3.Direction = ParameterDirection.Input;
                    param3.DbType = DbType.Int32;
                    Sqlcmd1.Parameters.Add(param3);

                    SqlParameter param4;
                    param4 = new SqlParameter("@PKG_Save_Location", Dts.Variables["PackageSaveLocation"].Value.ToString().Trim());
                    param4.Direction = ParameterDirection.Input;
                    param4.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param4);

                    SqlParameter param5;
                    param5 = new SqlParameter("@Status_code", "");
                    param5.Direction = ParameterDirection.Output;
                    param5.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param5);

                    SqlParameter param6;
                    param6 = new SqlParameter("@Message", "");
                    param6.Direction = ParameterDirection.Output;
                    param6.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param6);

                    SqlParameter param7;
                    param7 = new SqlParameter("@Tool_ID", Dts.Variables["Tool_ID"].Value.ToString().Trim());
                    param7.Direction = ParameterDirection.Input;
                    param7.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param7);

                    SqlDataAdapter sqlAdp1 = new SqlDataAdapter();
                    DataSet dsCols1 = new DataSet();
                    if (SqlConn1.State == ConnectionState.Closed)
                        SqlConn1.Open();
                    sqlAdp1.SelectCommand = Sqlcmd1;
                    

                    SqlDataReader rdr1 = null;
                    rdr1 = Sqlcmd1.ExecuteReader();
                    string SRC_Query = null;
                    string SRC_Query1 = null;
                    string LKP_Query = null;
                    string DST_Table = null;
                    string Template_Name = null;
                    string SRC_Table = null;
                    string TransRule = null;
                    string TransType = null;
                    string LKP_Columns = null;
                    string SRC_ConnectionString = null;
                    string DST_Connection_String = null;
                    int LookupOutput = 0;
                    
                    while (rdr1.Read())
                    {
                        SRC_Query = (string)rdr1["SRC_Query"];
                        TransType = rdr1["Trans_type"].ToString().Replace(" ", "").ToUpper();
                        if (TransType.Contains("MERGEJOIN"))
                        {
                            SRC_Query1 = (string)rdr1["SRC_Query2"];
                        }
                        if (TransType.Contains("LOOKUP"))
                        {
                            LKP_Query = (string)rdr1["LKP_Query"];
                            LKP_Columns = (string)rdr1["LKP_Columns"];
                        }                        
                        DST_Table = (string)rdr1["DST_Table"];                      
                        Template_Name = (string)rdr1["Template_Name"];
                        SRC_Table = (string)rdr1["Task_name"];
                        TransRule = (string)rdr1["Trans_Rule"];
                        DST_Connection_String = (string)rdr1["DST_Connection_String"];
                        SRC_ConnectionString = (string)rdr1["Source_Conn_String"];
                    }
                    
                    SqlConn1.Close();

                    

                    //SqlConn1.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");    

                    SqlCommand SqlcmdType = new SqlCommand();
                    SqlConnection SqlConnType = new SqlConnection();
                    SqlDataReader rdrType = null;
                    SqlDataAdapter sqlAdpType = new SqlDataAdapter();
                    DataSet dsColsType = new DataSet();



                    SqlcmdType.CommandText = "select Type FROM ETL_TEMPLATE_MS WHERE Template_ID = " + Dts.Variables["Template_Id"].Value.ToString().Trim();

                    SqlConnType.ConnectionString = Dts.Variables["MetaDataConn"].Value.ToString().Trim();
                    SqlcmdType.Connection = SqlConnType;
                    if (SqlConnType.State == ConnectionState.Closed)
                        SqlConnType.Open();
                    SqlcmdType.Connection = SqlConnType;
                    SqlcmdType.CommandType = CommandType.Text;
                    sqlAdpType.SelectCommand = SqlcmdType;

                    rdrType = SqlcmdType.ExecuteReader();
                    
                    string TemplateType = string.Empty;
                    while (rdrType.Read())
                    {

                        TemplateType = (string)rdrType["Type"];
                    }

                    SqlConnType.Close();
                    if(TemplateType.ToUpper() == "DATATYPE")
                    {

                        SqlCommand SqlcmdExists= new SqlCommand();
                        SqlConnection SqlConnExists = new SqlConnection();
                        SqlDataReader rdrExists = null;
                        SqlDataAdapter sqlAdpExists = new SqlDataAdapter();
                        DataSet dsColsExists = new DataSet();


                        SqlConnExists.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");
                        SqlcmdExists.CommandText = "select '1' from Information_Schema.Tables where TABLE_NAME='" + DST_Table + "'";


                        SqlcmdExists.Connection = SqlConnExists;
                        if (SqlConnExists.State == ConnectionState.Closed)
                            SqlConnExists.Open();
                        SqlcmdExists.Connection = SqlConnExists;
                        SqlcmdExists.CommandType = CommandType.Text;
                        sqlAdpExists.SelectCommand = SqlcmdExists;

                        rdrExists = SqlcmdExists.ExecuteReader();
                        int TableExists = 0;

                        while (rdrExists.Read())
                        {
                            TableExists = 1;
                        }

                        SqlConnExists.Close();
                        
                        SqlCommand SqlcmdCreateTable = new SqlCommand();
                        SqlConnection SqlConnCreateTable = new SqlConnection();

                        //SqlConn1.ConnectionString = @"Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;";
                        SqlConnCreateTable.ConnectionString = Dts.Variables["MetaDataConn"].Value.ToString().Trim();
                        SqlcmdCreateTable.Connection = SqlConnCreateTable;
                        SqlcmdCreateTable.CommandType = CommandType.StoredProcedure;
                        SqlcmdCreateTable.CommandText = "[dbo].[ATMTN_GET_DATATYPE_DETAILS_SP]";
                            
                        SqlParameter paramCreate1;
                        paramCreate1 = new SqlParameter("@Client_ID", Dts.Variables["Client_ID"].Value.ToString().Trim());
                        paramCreate1.Direction = ParameterDirection.Input;
                        paramCreate1.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate1);

                        SqlParameter paramCreate2;
                        paramCreate2 = new SqlParameter("@Project_ID", Dts.Variables["Project_ID"].Value.ToString().Trim());
                        paramCreate2.Direction = ParameterDirection.Input;
                        paramCreate2.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate2);

                        SqlParameter paramCreate3;
                        paramCreate3 = new SqlParameter("@Template_Id", Dts.Variables["Template_Id"].Value.ToString().Trim());
                        paramCreate3.Direction = ParameterDirection.Input;
                        paramCreate3.DbType = DbType.Int32;
                        SqlcmdCreateTable.Parameters.Add(paramCreate3);

                        SqlParameter paramCreate4;
                        paramCreate4 = new SqlParameter("@Tool_ID", Dts.Variables["Tool_ID"].Value.ToString().Trim());
                        paramCreate4.Direction = ParameterDirection.Input;
                        paramCreate4.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate4);

                        SqlParameter paramCreate5;
                        paramCreate5 = new SqlParameter("@TableExists", TableExists);
                        paramCreate5.Direction = ParameterDirection.Input;
                        paramCreate5.DbType = DbType.Int32;
                        SqlcmdCreateTable.Parameters.Add(paramCreate5);

                        SqlParameter paramCreate6;
                        paramCreate6 = new SqlParameter("@Message", "");
                        paramCreate6.Direction = ParameterDirection.Output;
                        paramCreate6.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate6);

                           

                        SqlDataAdapter sqlAdpCreateTable = new SqlDataAdapter();

                        if (SqlConnCreateTable.State == ConnectionState.Closed)
                            SqlConnCreateTable.Open();
                        sqlAdpCreateTable.SelectCommand = SqlcmdCreateTable;


                        SqlDataReader rdrCreateTable = null;
                        rdrCreateTable = SqlcmdCreateTable.ExecuteReader();
                        SqlConnCreateTable.Close();
                        

                    }

                    
                    //Source Connection
                    ConnectionManager cm = p.Connections.Add("OLEDB");
                    cm.Name = "OLEDB Source";
                    cm.ConnectionString = SRC_ConnectionString;

                    //Destination Connection
                    ConnectionManager cm1 = p.Connections.Add("OLEDB");
                    cm1.Name = "OLEDB Destination";
                    cm1.ConnectionString = DST_Connection_String;
                    Executable e = exec_SEQ.Executables.Add("STOCK:PipelineTask");
                    

                    string ExecSQL_First = "N";
                    int parameterCount = 0;
                    string[] parameterList = null;
                    string SRC_Target = null;
                    int DType = 130;
                    Variable SQLParam;
                    p.Variables.Add("V_SourceProductName", false, "User", "TESTING");
                    

                    if (TransType.Split('~')[0].Trim() == "EXECUTESQL" && TransRule.Split('~')[0].Trim().Split('#')[0].Trim().ToUpper() == "PRE")
                    {
                        exec = exec_SEQ.Executables.Add("STOCK:SQLTask");
                        TaskHost th = exec as TaskHost;

                        string SQLConnection = null;


                        ExecuteSQLTask EXST = (ExecuteSQLTask)th.InnerObject;

                        SRC_Target = TransRule.Split('~')[0].Trim().Split('#')[2].Trim();

                        parameterList = null;
                        if (SRC_Target.Contains("$"))
                        {
                            parameterList = SRC_Target.Split('$')[1].Trim().Split(',');
                            SRC_Target = SRC_Target.Split('$')[0].Trim().ToUpper();
                        }


                        if (parameterList != null)
                        {

                            foreach (string parameter in parameterList)
                            {
                                EXST.ParameterBindings.Add();
                               
                                switch (parameter.Split('.')[0].ToUpper().Trim())
                                {
                                    case "STRING":
                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", "0");
                                        DType = 130;
                                        break;
                                    case "DATETIME":
                                    case "DATE":

                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", DateTime.Now);
                                        DType = 133;
                                        break;
                                    default:
                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", 0);
                                        DType = 3;
                                        break;
                                }


                                IDTSParameterBinding parameterBinding = EXST.ParameterBindings.GetBinding(parameterCount);
                                parameterBinding.DtsVariableName = "User::" + parameter.Split('.')[1];

                                parameterBinding.ParameterDirection = ParameterDirections.Output;
                                //parameterBinding.DataType = Dtype;
                                parameterBinding.DataType = DType;
                                //parameterBinding.DataType = (int)OleDBDataTypes.VARCHAR;
                                parameterBinding.ParameterName = parameterCount;
                                parameterBinding.ParameterSize = -1;
                                parameterCount++;

                            }

                        }




                        if (TransRule.Split('~')[0].Trim().Split('#')[2].Trim().ToUpper().Split('$')[0].Trim() == "SOURCE")
                        {
                            SQLConnection = "OLEDB Source";
                        }
                        else
                        {
                            SQLConnection = "OLEDB Destination";
                        }
                        th.Properties["Name"].SetValue(th, "Execute Procedure");
                        th.Properties["Description"].SetValue(th, "Execute Procedure");
                        th.Properties["Connection"].SetValue(th, SQLConnection);
                        th.Properties["SqlStatementSource"].SetValue(th, TransRule.Split('~')[0].Split('#')[1]);
                        
                        if (TransType.Split('~')[1].Trim() != "EXECUTESQL")
                        {
                            PrecedenceConstraint pcFileTasks1 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec, (Executable)e);
                        }
                        ExecSQL_First = "Y";
                    }
                    TaskHost thMainPipe = e as TaskHost;
                    MainPipe dataFlowTask = thMainPipe.InnerObject as MainPipe;

                    thMainPipe.Name = "DFT_" + DST_Table; 
                    
                    IDTSComponentMetaData100 component = dataFlowTask.ComponentMetaDataCollection.New();
                    component.ComponentClassID = "DTSAdapter.OleDbSource";
                    IDTSDesigntimeComponent100 instance = component.Instantiate();
                    instance.ProvideComponentProperties();
                    component.Name = "OLEDBSource";
                    component.Description = "OLEDBSource";
                    
                    //Connect the Execute SQL task to the data flow task

                    if (component.RuntimeConnectionCollection.Count > 0)
                    {
                        component.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);
                        component.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;
                    }
                                   
                    instance.SetComponentProperty("AccessMode", 2);
                    instance.SetComponentProperty("SqlCommand", SRC_Query);

                    instance.AcquireConnections(null);
                    instance.ReinitializeMetaData();
                    instance.ReleaseConnections();
                    
                    IDTSComponentMetaData100 dataConditional_Split = null;
                    IDTSComponentMetaData100 data_DerivedColumn = null;
                    IDTSComponentMetaData100 dataConvertComponent = null;
                    IDTSComponentMetaData100 aggregate = null;
                    IDTSComponentMetaData100 lookupComponent = null;
                    IDTSComponentMetaData100 componentUnionAll = null;
                    IDTSComponentMetaData100 RowCountComponent = null;
                    IDTSComponentMetaData100 sortWrapper = null;
                    IDTSComponentMetaData100 MergeSortWrapper = null;
                    IDTSComponentMetaData100 dataOLEDbCommand = null;
                    IDTSComponentMetaData100 componentMerge = null;
                    IDTSComponentMetaData100 mergeJoin = null;
                    IDTSComponentMetaData100 copyMapComponent = null;
                    IDTSComponentMetaData100 multiCastComponent = null;
                    IDTSComponentMetaData100 component1 = null;
                    IDTSComponentMetaData100 componentSCD = null;
                    string[] TransList = TransType.Split('~');
                    string[] RuleList = TransRule.Split('~');
                    string namelist = string.Empty;
                    string multiCast = "N";
                    String[] joinColumns = null;

                    string LastTrans = "OleDBSource";
                    string testsplit;
                    int condSplitCnt = 0;
                    string MulticastTargetTable = string.Empty;
                    int RuleCounter = 0;
                    if (ExecSQL_First == "Y")
                    {
                        RuleCounter = 1;
                    }

                    for (int i = RuleCounter; i < TransList.Length; i++)
                    {
                        
                        testsplit = TransType.Split(',')[0].Trim();
                        RuleList[i] = RuleList[i].Trim();
                        switch (TransList[i])
                        {
                            case "EXECUTESQL":

                                Executable exec1 = exec_SEQ.Executables.Add("STOCK:SQLTask");
                                TaskHost th1 = exec1 as TaskHost;
                               
                                ExecuteSQLTask EST = (ExecuteSQLTask)th1.InnerObject;
                                parameterCount = 0;
                                string ExecProcName = "Execute Procedure_" + i;
                                string testSql = RuleList[i];
                                string ExecSql_query = RuleList[i].Split('#')[1];
                                string SQLConnection = null;
                                SRC_Target = RuleList[i].Split('#')[2];
                                
                                parameterList = null;
                                if (SRC_Target.Contains("$"))
                                {
                                    parameterList = SRC_Target.Split('$')[1].Trim().Split(',');
                                    SRC_Target = SRC_Target.Split('$')[0].Trim().ToUpper();
                                }

                                
                                if (parameterList != null)
                                {
                                    
                                    foreach (string parameter in parameterList)
                                    {
                                        EST.ParameterBindings.Add();

                                        switch (parameter.Split('.')[0].ToUpper().Trim())
                                        {
                                            case "STRING":
                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", "0");
                                                DType = 130;
                                                break;
                                            case "DATETIME":
                                            case "DATE":

                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", DateTime.Now);
                                                DType = 133;
                                                break;
                                            default:
                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", 0);
                                                DType = 3;
                                                break;
                                        }


                                        IDTSParameterBinding parameterBinding = EST.ParameterBindings.GetBinding(parameterCount);
                                        parameterBinding.DtsVariableName = "User::" + parameter.Split('.')[1];

                                        parameterBinding.ParameterDirection = ParameterDirections.Output;
                                        //parameterBinding.DataType = Dtype;
                                        parameterBinding.DataType = DType;
                                        //parameterBinding.DataType = (int)OleDBDataTypes.VARCHAR;
                                        parameterBinding.ParameterName = parameterCount;
                                        parameterBinding.ParameterSize = -1;
                                        parameterCount++;

                                    }

                                }

                                if (RuleList[i].Split('#')[2].Trim().ToUpper().Split('$')[0].Trim() == "SOURCE")
                                {
                                    SQLConnection = "OLEDB Source";
                                }
                                else
                                {
                                    SQLConnection = "OLEDB Destination";
                                }

                                th1.Properties["Name"].SetValue(th1, ExecProcName);
                                th1.Properties["Description"].SetValue(th1, "Execute Procedure");
                                th1.Properties["Connection"].SetValue(th1, SQLConnection);
                                th1.Properties["SqlStatementSource"].SetValue(th1, ExecSql_query);

                                if (ExecSQL_First == "Y" && RuleList[i].Split('#')[0].Trim().ToUpper() == "PRE")
                                {

                                    PrecedenceConstraint pcFileTasks2 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec, (Executable)exec1);
                                    PrecedenceConstraint pcFileTasks3 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec1, (Executable)e);
                                    ExecSQL_First = "N";
                                }
                                else
                                {
                                    PrecedenceConstraint pcFileTasks4 = exec_SEQ.PrecedenceConstraints.Add((Executable)e, (Executable)exec1);
                                }

                                break;
                            case "CONDITIONALSPLIT":
                                dataConditional_Split = dataFlowTask.ComponentMetaDataCollection.New();
                                dataConditional_Split.ComponentClassID = "DTSTransform.ConditionalSplit";
                                CManagedComponentWrapper data_Split_Wrapper = dataConditional_Split.Instantiate();
                                data_Split_Wrapper.ProvideComponentProperties();
                                dataConditional_Split.Name = "Filter_Router_"+i;
                                dataConditional_Split.Description = "Evaluates and directs rows in a dataset based a column.";

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 input = dataConditional_Split.InputCollection[0];
                                IDTSVirtualInput100 dataConvertVirtualInput = input.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 destinationVirtualInputColumns = dataConvertVirtualInput.VirtualInputColumnCollection;
                                IDTSOutput100 dataConvertOutput = dataConditional_Split.OutputCollection[0];
                                IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;

                                int sourceColumnLineageId;
                                int evalOrder = 0;

                                string get_name = "";
                                string[] CondRules = RuleList[i].Split('#');

                                //get_name = ConditionalSplit.Split('>')[0].Trim();
                                foreach (string rule in CondRules)
                                {
                                    foreach (IDTSVirtualInputColumn100 virtualInputColumn in destinationVirtualInputColumns)
                                    {
                                        get_name = virtualInputColumn.Name.ToString();
                                        string getname = "[" + get_name + "]";

                                        if (rule.Trim().ToUpper().Contains(get_name.ToUpper()))
                                        {
                                            sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                            data_Split_Wrapper.SetUsageType(input.ID, dataConvertVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READONLY);
                                            IDTSOutput100 splitOutput_1 = data_Split_Wrapper.InsertOutput(DTSInsertPlacement.IP_BEFORE, dataConditional_Split.OutputCollection[evalOrder].ID);
                                            data_Split_Wrapper.SetOutputProperty(splitOutput_1.ID, "EvaluationOrder", evalOrder);
                                            data_Split_Wrapper.SetOutputProperty(splitOutput_1.ID, "FriendlyExpression", rule.Trim());
                                            evalOrder++;
                                        }
                                    }
                                    
                                    condSplitCnt = evalOrder - 1;
                                }
                                LastTrans = "ConditionalSplit";
                                break;
                            case "DERIVEDCOLUMN":
                                data_DerivedColumn = dataFlowTask.ComponentMetaDataCollection.New();
                                data_DerivedColumn.ComponentClassID = "DTSTransform.DerivedColumn";
                                CManagedComponentWrapper DesignDerivedTransformColumns = data_DerivedColumn.Instantiate();
                                DesignDerivedTransformColumns.ProvideComponentProperties();
                                data_DerivedColumn.Name = "DerivedColTransform_" + i;

                                data_DerivedColumn.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
                                data_DerivedColumn.InputCollection[0].HasSideEffects = false;
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 DerivedColumnInput = data_DerivedColumn.InputCollection[0];
                                IDTSVirtualInput100 DerivedColumnVirtualInput = DerivedColumnInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 DerivedColumnVirtualInputColumns = DerivedColumnVirtualInput.VirtualInputColumnCollection;
                                IDTSCustomProperty100 ConcatProperty = null;
                                //RuleList[i] = RuleList[i] + "#ZZ_STATUS_CODE = \"P\"";


                                string[] DerColumns = new string[10]; //create 10 empty index in array terms




                                string[] RulesList = RuleList[i].Split('#');
                                //int DerColCount = 0;

                                List<string> ColCollection = new List<string>();
                                foreach (string Rulevalues in RulesList)
                                {
                                    string _val = string.Empty;
                                    _val = Rulevalues.Split('$')[0].Trim();
                                    ColCollection.Add(_val);
                                }

                                foreach (string RuleValue in RulesList)
                                {
                                    string newDerCol = "Y";
                                    string _v = string.Empty;
                                    _v = RuleValue.Split('$')[0].Trim();


                                    // Iterate through the virtual input column collection.
                                    foreach (IDTSVirtualInputColumn100 vColumn in DerivedColumnVirtualInputColumns)
                                    {


                                        for (int j = 0; j < RulesList.Length; j++)
                                        {


                                            //DerColumns[DerColCount] = vColumn.Name;
                                            //DerColCount++;
                                            if (vColumn.Name == _v)
                                            {
                                                IDTSInputColumn100 vCol = DesignDerivedTransformColumns.SetUsageType(DerivedColumnInput.ID, DerivedColumnVirtualInput, vColumn.LineageID, DTSUsageType.UT_READWRITE);
                                                break;
                                            }

                                        }


                                    }

                                    string[] ColumnCollection = ColCollection.ToArray();

                                    foreach (IDTSVirtualInputColumn100 vColumn in DerivedColumnVirtualInputColumns)
                                    {

                                        string ColName = Array.Find(ColCollection.ToArray(), element => element.Equals(vColumn.Name, StringComparison.Ordinal));
                                        if (string.IsNullOrEmpty(ColName))
                                        {
                                            IDTSInputColumn100 vCol = DesignDerivedTransformColumns.SetUsageType(DerivedColumnInput.ID, DerivedColumnVirtualInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                        }
                                    }

                                    foreach (IDTSInputColumn100 inputColumn in DerivedColumnInput.InputColumnCollection)
                                    {
                                        if (inputColumn.Name == RuleValue.Split('$')[0].Trim())
                                        {
                                            inputColumn.Description = string.Format("Override the orginal column {0} with OTHERS if the string is NULL.", inputColumn.Name);
                                            ConcatProperty = inputColumn.CustomPropertyCollection["Expression"];

                                            ConcatProperty.Name = "Expression";
                                            ConcatProperty.Value = RuleValue.Split('$')[1].Trim();

                                            ConcatProperty = inputColumn.CustomPropertyCollection["FriendlyExpression"];
                                            ConcatProperty.Name = "FriendlyExpression";
                                            ConcatProperty.Value = ConcatProperty.Value = RuleValue.Split('$')[1].Trim();
                                            newDerCol = "N";
                                        }
                                    }

                                    if (newDerCol == "Y")
                                    {
                                        IDTSOutputColumn100 ConCatCol = data_DerivedColumn.OutputCollection[0].OutputColumnCollection.New();
                                        ConCatCol.Name = RuleValue.Split('$')[0].Trim();
                                        ConCatCol.ExternalMetadataColumnID = 0;
                                        ConCatCol.ErrorRowDisposition = DTSRowDisposition.RD_FailComponent;
                                        ConCatCol.TruncationRowDisposition = DTSRowDisposition.RD_FailComponent;
                                        IDTSCustomProperty100 ConCatProp = ConCatCol.CustomPropertyCollection.New();
                                        ConCatCol.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                                        ConCatProp.Name = "Expression";
                                        ConCatProp.Value = RuleValue.Split('$')[1].Trim();
                                        ConCatProp = ConCatCol.CustomPropertyCollection.New();
                                        ConCatProp.Name = "FriendlyExpression";
                                        ConCatProp.Value = RuleValue.Split('$')[1].Trim();
                                        ConCatCol.MappedColumnID = 0;

                                    }
                                }

                                LastTrans = "DerivedColumn";

                                break;
                            case "CHARACTERMAP":
                                dataConvertComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                dataConvertComponent.ComponentClassID = "DTSTransform.CharacterMap";
                                dataConvertComponent.Name = "capitalise all initials_"+i;
                                dataConvertComponent.Description = "capitalise all initials";
                                CManagedComponentWrapper dataConvertWrapper = dataConvertComponent.Instantiate();
                                dataConvertWrapper.ProvideComponentProperties();
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 CharMapInput = dataConvertComponent.InputCollection[0];
                                IDTSVirtualInput100 CharMapDataConvertVirtualInput = dataConvertComponent.InputCollection[0].GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 CharMapDestinationVirtualInputColumns = CharMapDataConvertVirtualInput.VirtualInputColumnCollection;
                                IDTSOutput100 CharMapDataConvertOutput = dataConvertComponent.OutputCollection[0];
                                IDTSOutputColumnCollection100 CharMapDataConvertOutputColumns = CharMapDataConvertOutput.OutputColumnCollection;
                                //IDTSOutputColumn100 newOutputColumn;

                                

                                foreach (IDTSVirtualInputColumn100 virtualInputColumn in CharMapDestinationVirtualInputColumns)
                                {
                                    get_name = virtualInputColumn.Name.ToString();
                                    IDTSInputColumn100 inputColumn = dataConvertWrapper.SetUsageType(CharMapInput.ID, CharMapDataConvertVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READONLY);


                                    if (RuleList[i].IndexOf(get_name) > 0)
                                    {
                                        sourceColumnLineageId = CharMapDataConvertVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                        dataConvertWrapper.SetUsageType(dataConvertComponent.InputCollection[0].ID, CharMapDataConvertVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READWRITE);
                                        //dataConvertWrapper.SetOutputColumnProperty(CharMapDataConvertOutput.ID, virtualInputColumn.ID, "MapFlags", 0);
                                        
                                        /*-------------Enable this code to add a new column into the data flow --------------------*/
                                        //newOutputColumn=dataConvertWrapper.InsertOutputColumnAt(CharMapDataConvertOutput.ID, 1, get_name, string.Empty);
                                        //newOutputColumn.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, 100, 0, 0, 1252);
                                        //newOutputColumn.MappedColumnID = 0;
                                        //dataConvertWrapper.SetOutputColumnProperty(CharMapDataConvertOutput.ID, newOutputColumn.ID, "InputColumnLineageID", sourceColumnLineageId);

                                        /*  MapColumns details
                                         -----------------------------
                                            Byte reversal (2)
                                            Full width (6)
                                            Half width (5)
                                            Hiragana (3)
                                            Katakana (4)
                                            Linguistic casing (7)
                                            Lowercase (0)
                                            Simplified Chinese (8)
                                            Traditional Chinese(9)
                                            Uppercase (1)*/

                                    }
                                }

                                
                                LastTrans = "CharacterMap";
                                break;
                            case "AGGREGATE":
                                aggregate = dataFlowTask.ComponentMetaDataCollection.New();
                                aggregate.ComponentClassID = "DTSTransform.Aggregate";
                                CManagedComponentWrapper AggregateWrapper = aggregate.Instantiate();
                                AggregateWrapper.ProvideComponentProperties();
                                aggregate.Name = "Aggregate_" + i;
                                //AggregateWrapper.AcquireConnections(null);
                                AggregateWrapper.AcquireConnections(null);
                                AggregateWrapper.ReinitializeMetaData();
                                AggregateWrapper.ReleaseConnections();

                                //aggregate.InputCollection[0].InputColumnCollection.RemoveAll();
                                //aggregate.OutputCollection[0].OutputColumnCollection.RemoveAll();

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                }

                                IDTSInput100 AggregateInput = aggregate.InputCollection[0];
                                IDTSVirtualInput100 AggregateVirtualInput = AggregateInput.GetVirtualInput();
                                IDTSOutput100 AggregateOutputCollection = aggregate.OutputCollection[0];
                                IDTSInput100 AggregateInputCollection = aggregate.InputCollection[0];
                                IDTSVirtualInputColumnCollection100 AggregateVirtualInputColumns = AggregateVirtualInput.VirtualInputColumnCollection;

                                foreach (IDTSVirtualInputColumn100 virtualInputColumn in AggregateVirtualInputColumns)
                                {
                                    get_name = virtualInputColumn.Name.ToString();
                                    //AggregateWrapper.SetUsageType(AggregateInput.ID, AggregateVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READWRITE);
                                    IDTSInputColumn100 inputColumn = AggregateWrapper.SetUsageType(AggregateInput.ID, AggregateVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READONLY);

                                    //AggregateWrapper.SetInputColumnProperty(AggregateInput.ID, inputColumn.ID, "CopyFromReferenceColumn", virtualInputColumn);
                                    
                                    string ColumnName = null;
                                    if (RuleList[i].IndexOf(get_name) != -1)
                                    {
                                        ColumnName = RuleList[i].Split('=')[0].Trim();
                                       
                                        string RuleName = RuleList[i].Split('=')[1].Trim().Split('(')[0].Trim().ToLower();
                                        int AggregateProperty = 0;
                                        switch (RuleName)
                                        {
                                            /*
                                            case "count":
                                                AggregateProperty = 1;
                                                break;
                                            case "countall":
                                                AggregateProperty = 2;
                                                break;
                                            case "countdistinct":
                                                AggregateProperty = 3;
                                                break;
                                            case "sum":
                                                AggregateProperty = 4;
                                                break;
                                            case "max":
                                                AggregateProperty = 5;
                                                break;
                                            case "min":
                                                AggregateProperty = 6;
                                                break; */

                                            case "count":
                                                AggregateProperty = 1;
                                                break;
                                            case "countall":
                                                AggregateProperty = 2;
                                                break;
                                            case "countdistinct":
                                                AggregateProperty = 3;
                                                break;
                                            case "sum":
                                                AggregateProperty = 4;
                                                break;
                                            case "avg":
                                                AggregateProperty = 5;
                                                break;
                                            case "min":
                                                AggregateProperty = 6;
                                                break;
                                            case "max":
                                                AggregateProperty = 7;
                                                break;
                                        }

                                        //AggregateWrapper.SetUsageType(AggregateInputCollection.ID, AggregateVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READWRITE);
                                        IDTSOutputColumn100 newOutputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, ColumnName, string.Empty);
                                        newOutputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                        newOutputColumn.MappedColumnID = 0;
                                        for (int x = 0; x < newOutputColumn.CustomPropertyCollection.Count; x++)
                                        {
                                            IDTSCustomProperty100 property = newOutputColumn.CustomPropertyCollection[x];
                                            switch (property.Name)
                                            {
                                                case "AggregationColumnId":
                                                    property.Value = virtualInputColumn.LineageID;
                                                    break;
                                                case "AggregationType":
                                                    property.Value = AggregateProperty;
                                                    break;
                                                case "IsBig":
                                                    property.Value = 0;
                                                    break;
                                                case "AggregationComparisonFlags":
                                                    property.Value = 0;
                                                    break;
                                            }
                                        }
                                        /*IDTSOutputColumn100 InputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, get_name, string.Empty);
                                       InputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                       InputColumn.MappedColumnID = 1;
                                       sourceColumnLineageId = AggregateVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                       for (int x = 0; x < InputColumn.CustomPropertyCollection.Count; x++)
                                       {
                                           IDTSCustomProperty100 property = InputColumn.CustomPropertyCollection[x];
                                           switch (property.Name)
                                           {
                                               case "AggregationColumnId":
                                                   property.Value = virtualInputColumn.LineageID;
                                                   break;
                                               case "AggregationType":
                                                   property.Value = 0;
                                                   break;
                                               case "IsBig":
                                                   property.Value = 0;
                                                   break;
                                               case "AggregationComparisonFlags":
                                                   property.Value = 0;
                                                   break;
                                           }
                                       } */
                                    }
                                    else
                                    {
                                        IDTSOutputColumn100 InputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, get_name, string.Empty);
                                        InputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                        for (int x = 0; x < InputColumn.CustomPropertyCollection.Count; x++)
                                        {
                                            IDTSCustomProperty100 property = InputColumn.CustomPropertyCollection[x];
                                            switch (property.Name)
                                            {
                                                case "AggregationColumnId":
                                                    property.Value = virtualInputColumn.LineageID;
                                                    break;
                                                case "AggregationType":
                                                    property.Value = 0;
                                                    break;
                                                case "IsBig":
                                                    property.Value = 0;
                                                    break;
                                                case "AggregationComparisonFlags":
                                                    property.Value = 0;
                                                    break;
                                            }
                                        }
                                    }
                                }

                                LastTrans = "Aggregate";
                                break;
                            case "LOOKUP":
                                lookupComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                lookupComponent.ComponentClassID = "DTSTransform.Lookup";

                                if(RuleList[i].Contains("$"))
                                {
                                    if (RuleList[i].Split('$')[1].Trim().Replace(" ","").ToUpper() == "NOMATCH")
                                    {
                                        LookupOutput = 1;
                                    }

                                    RuleList[i] = RuleList[i].Split('$')[0].Trim();
                                }

                                if (RuleList[i].Contains("#"))
                                {
                                    if (LKP_Query.Contains(" WHERE "))
                                    {
                                        LKP_Query = LKP_Query + " and " + RuleList[i].Split('#')[1].Trim();
                                    }
                                    else
                                    {
                                        LKP_Query = LKP_Query + " WHERE " + RuleList[i].Split('#')[1].Trim();
                                    }

                                    RuleList[i] = RuleList[i].Split('#')[0].Trim();
                                }
                                

                                
                                CManagedComponentWrapper lookupWrapper = lookupComponent.Instantiate();
                                lookupWrapper.ProvideComponentProperties();
                                lookupComponent.Name = "Lookup_" + i;
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], lookupComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                }
                                lookupComponent.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);

                                lookupComponent.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;

                                // Cache Type - Full = 0, Partial = 1, None = 2

                                lookupWrapper.SetComponentProperty("CacheType", 0);
                                lookupWrapper.SetComponentProperty("NoMatchBehavior", 1);// 1= Redirect rows to No Match output
                                lookupWrapper.SetComponentProperty("SqlCommand", LKP_Query);

                                // initialize metadata

                                lookupWrapper.AcquireConnections(null);
                                lookupWrapper.ReinitializeMetaData();
                                lookupWrapper.ReleaseConnections();

                                // Mark the columns we are joining on

                                IDTSInput100 lookupInput = lookupComponent.InputCollection[0];
                                IDTSInputColumnCollection100 lookupInputColumns = lookupInput.InputColumnCollection;
                                IDTSVirtualInput100 lookupVirtualInput = lookupInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 lookupVirtualInputColumns = lookupVirtualInput.VirtualInputColumnCollection;

                                // Note: join columns should be marked as READONLY

                                joinColumns = RuleList[i].Split('|');
                                foreach (string conditions in joinColumns)
                                {
                                    string columnName = conditions.Replace("IN_", "").Split('=')[1].Trim();
                                    IDTSVirtualInputColumn100 virtualColumn = lookupVirtualInputColumns[columnName];
                                    IDTSInputColumn100 inputColumn = lookupWrapper.SetUsageType(lookupInput.ID, lookupVirtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                    lookupWrapper.SetInputColumnProperty(lookupInput.ID, inputColumn.ID, "JoinToReferenceColumn", conditions.Replace("IN_", "").Split('=')[0].Trim());
                                }

                                string[] ReadWriteColumns = LKP_Query.Replace("from", "~").Split('~')[0].Replace("SELECT", "").Replace(" ", "").Split(',');
                                //var ReadWriteColumns = new string[] { "SNo" };
                                /* 
                                string columnName1;
                                foreach (string columnName in ReadWriteColumns)
                                {
                                    if(columnName.Contains("AS"))
                                    {
                                        columnName1 = columnName.Replace("AS", "~").Split('~')[1];
                                    }
                                    else
                                    {
                                        columnName1 = columnName;
                                    }
                                    IDTSVirtualInputColumn100 virtualColumn = lookupVirtualInputColumns[columnName1];
                                    IDTSInputColumn100 inputColumn = lookupWrapper.SetUsageType(lookupInput.ID, lookupVirtualInput, virtualColumn.LineageID, DTSUsageType.UT_READWRITE);

                                    lookupWrapper.SetInputColumnProperty(lookupInput.ID, inputColumn.ID, "CopyFromReferenceColumn", columnName1);
                                }                                 
                                */
                    
                                //LKP_New_Columns = "address,city,company_name,county,cust_code,email,first_name,phone1,phone2,state,zip,ZZ_STATUS_CODE";
                                string[] newColumns = LKP_Columns.Split(',');
                                IDTSOutput100 lookupMatchOutput = lookupComponent.OutputCollection[LookupOutput];
                                string SourceJoinColumn = joinColumns[0].Replace("IN_", "").Split('=')[1].Trim();
                                foreach (string sourceColumn in newColumns)
                                {
                                    if(SourceJoinColumn != sourceColumn)
                                    {
                                        //sourceColumn =  sourceColumn;
                                        string newColumnName = sourceColumn.Trim();
                                        string description = sourceColumn;

                                        // insert the new column
                                        IDTSOutputColumn100 outputColumn = lookupWrapper.InsertOutputColumnAt(lookupMatchOutput.ID, 0, newColumnName, description);
                                        outputColumn.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                                        lookupWrapper.SetOutputColumnProperty(lookupMatchOutput.ID, outputColumn.ID, "CopyFromReferenceColumn", sourceColumn);
                                    }
                                }

                                LastTrans = "Lookup";
                                break;

                            case "ROWCOUNT":
                                Variable Counter = p.Variables.Add(RuleList[i].Trim(), false, "User", 0);
                                RowCountComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                RowCountComponent.ComponentClassID = "DTSTransform.RowCount";
                                RowCountComponent.Name = "get row counter_"+i;
                                RowCountComponent.Description = "gets row counter";

                                CManagedComponentWrapper RowCountWrapper = RowCountComponent.Instantiate();
                                RowCountWrapper.ProvideComponentProperties();
                                RowCountWrapper.SetComponentProperty("VariableName", RuleList[i].Trim());

                                // Connect the source and the transform

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                }

                                LastTrans = "RowCount";
                                break;
                            case "SORT":
                            case "SORT&ELIMINATEDUPLICATES":
                                string SortColumn = RuleList[i].Split(' ')[0].Trim();
                                string SortType = RuleList[i].Split(' ')[1].Trim();
                                sortWrapper = dataFlowTask.ComponentMetaDataCollection.New();
                                
                                sortWrapper.ComponentClassID = "DTSTransform.Sort";
                                
                                CManagedComponentWrapper sortinstance = sortWrapper.Instantiate();
                                sortinstance.ProvideComponentProperties();
                                sortWrapper.Name = "SortTransform_"+i;
                                sortWrapper.Description = "Sortcomponent";

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], sortWrapper.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                }
                                string[] sortcolumns = SortColumn.Split(',');
                                IDTSInputColumn100 col = null;
                                IDTSVirtualInput100 vSortInput = sortWrapper.InputCollection[0].GetVirtualInput();
                                //IDTSVirtualInputColumn100 vColumn = null;
                                int sortPos = 1;
                                foreach (string SortColumn1 in sortcolumns)
                                {
                                    foreach (IDTSVirtualInputColumn100 vColumn in vSortInput.VirtualInputColumnCollection)
                                    {
                                        //if (SortColumn.Contains(col.Name))
                                        if (vColumn.Name == SortColumn1.Trim())
                                        {
                                            col = sortinstance.SetUsageType(sortWrapper.InputCollection[0].ID, vSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                            int sortPref;

                                            if (SortType.ToUpper() == "DESC")
                                            {
                                                sortPref = -1 * sortPos;
                                            }
                                            else
                                            {
                                                sortPref = sortPos;
                                            }
                                            if (col.CustomPropertyCollection.Count > 0)
                                            {
                                                sortinstance.SetInputColumnProperty(sortWrapper.InputCollection[0].ID, col.ID, "NewSortKeyPosition", sortPref);
                                                sortPos++;
                                            }
                                        }
                                    }
                                }
                                foreach (IDTSVirtualInputColumn100 vColumn in vSortInput.VirtualInputColumnCollection)
                                {
                                    if (!SortColumn.Contains(vColumn.Name))
                                    {
                                        col = sortinstance.SetUsageType(sortWrapper.InputCollection[0].ID, vSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                    }
                                }
                                if (TransList[i] == "SORT&ELIMINATEDUPLICATES")
                                {
                                    sortinstance.SetComponentProperty("EliminateDuplicates", 1);
                                }
                                else
                                {
                                    sortinstance.SetComponentProperty("EliminateDuplicates", 0);
                                }

                                LastTrans = "Sort";
                                break;
                            case "UNIONALL":
                                componentUnionAll = dataFlowTask.ComponentMetaDataCollection.New();
                                componentUnionAll.ComponentClassID = "DTSTransform.UnionAll";
                                CManagedComponentWrapper instanceUnionAll = componentUnionAll.Instantiate();
                                instanceUnionAll.ProvideComponentProperties();
                                componentUnionAll.Name = "Union All columns_"+i;                                

                                // connect path form source to destination
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                }

                                LastTrans = "UnionAll";
                                break;
                            case "MERGE":                               

                                componentMerge = dataFlowTask.ComponentMetaDataCollection.New();                   
                                componentMerge.ComponentClassID = "DTSTransform.Merge";
                                CManagedComponentWrapper instanceMerge = componentMerge.Instantiate();
                                instanceMerge.ProvideComponentProperties();
                                componentMerge.Name = "Merge All columns_"+i;
                                component1.OutputCollection[0].IsSorted = true;
                                component1.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;

                                // connect path form source to destination
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentMerge.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break; 
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                }
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component1.OutputCollection[0], componentMerge.InputCollection[1]);

                                LastTrans = "Merge";
                                break;

                            case "OLEDBCOMMAND":
                                dataOLEDbCommand = dataFlowTask.ComponentMetaDataCollection.New();

                                dataOLEDbCommand.ComponentClassID = "DTSTransform.OLEDBCommand";
                                CManagedComponentWrapper OLEDB_Wrapper = dataOLEDbCommand.Instantiate();
                                OLEDB_Wrapper.ProvideComponentProperties();
                                dataOLEDbCommand.Name = "OLE DB Command_"+i;                                

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    /*case "CopyColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(copyMapComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;*/
                    
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break; 
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                }
                                if (dataOLEDbCommand.RuntimeConnectionCollection.Count > 0)
                                {
                                    dataOLEDbCommand.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);
                                    dataOLEDbCommand.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                                }
                                OLEDB_Wrapper.SetComponentProperty("SqlCommand", RuleList[i].Trim());
                                LastTrans = "OLEDB";
                                break;
                            case "MERGEJOIN":
                                component1 = dataFlowTask.ComponentMetaDataCollection.New();

                                component1.ComponentClassID = "DTSAdapter.OleDbSource";
                                IDTSDesigntimeComponent100 instance1 = component1.Instantiate();
                                instance1.ProvideComponentProperties();
                                component1.Name = "OLEDBSource1";
                                component1.Description = "OLEDBSource1";
                                IDTSComponentMetaData100 MyComponentMetadata = dataFlowTask.ComponentMetaDataCollection["OLEDBSource1"];

                                MyComponentMetadata.Name = "OLEDB Source2";
                    
                                //Connect the Execute SQL task to the data flow task

                                if (component1.RuntimeConnectionCollection.Count > 0)
                                {
                                    component1.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);
                                    component1.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;
                                }

                                int JoinProp = 1;
                                if (RuleList[i].Contains("#"))
                                {
                                    if(RuleList[i].Split('#')[1].ToUpper() == "FULL")
                                    {
                                        JoinProp = 0;
                                    }
                                    else if(RuleList[i].Split('#')[1].ToUpper() == "INNER")
                                    {
                                        JoinProp = 2;
                                    }
                                    RuleList[i] = RuleList[i].Split('#')[0];
                                }

                                string MergeSortColumn = "row_id";
                                string[] MergeSortColumns = RuleList[i].Split('=');
                                string[] FirstColumn = MergeSortColumns[1].Split('.');
                                MergeSortColumn = FirstColumn[1];
                                if (!SRC_Query1.ToUpper().Contains("ORDER BY"))
                                {
                                    SRC_Query1 = SRC_Query1 + " Order by " + MergeSortColumn;
                                }
                                instance1.SetComponentProperty("AccessMode", 2);
                                instance1.SetComponentProperty("SqlCommand", SRC_Query1);
                                //instance1.SetComponentProperty("SqlCommand", "Select row_id, cust_code from Customer Order by Row_ID");

                                instance1.AcquireConnections(null);
                                instance1.ReinitializeMetaData();
                                instance1.ReleaseConnections();

                                MergeSortWrapper = dataFlowTask.ComponentMetaDataCollection.New();
                                MergeSortWrapper.ComponentClassID = "DTSTransform.Sort";
                                CManagedComponentWrapper MergeSortinstance = MergeSortWrapper.Instantiate();
                                MergeSortinstance.ProvideComponentProperties();
                                MergeSortWrapper.Name = "MergeSortTransform";
                                MergeSortWrapper.Description = "MergeSortTransform";
                                MergeSortWrapper.ContactInfo = "Sort1";
                                //MergeSortWrapper.SetComponentProperty("EliminateDuplicates", 1);                    
                                
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;

                                }
                                
                                IDTSVirtualInput100 vMergeSortInput = MergeSortWrapper.InputCollection[0].GetVirtualInput();
                                //IDTSVirtualInputColumn100 vColumn = null;
                                IDTSInputColumn100 MergeCol = null;

                                FirstColumn = MergeSortColumns[0].Split('.');
                                MergeSortColumn = FirstColumn[1];

                                foreach (IDTSVirtualInputColumn100 vColumn in vMergeSortInput.VirtualInputColumnCollection)
                                {
                                    //if (SortColumn.Contains(col.Name))
                                    if (vColumn.Name == MergeSortColumn.Trim())
                                    {
                                        MergeCol = MergeSortinstance.SetUsageType(MergeSortWrapper.InputCollection[0].ID, vMergeSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);

                                        if (MergeCol.CustomPropertyCollection.Count > 0)
                                        {
                                            MergeSortinstance.SetInputColumnProperty(MergeSortWrapper.InputCollection[0].ID, MergeCol.ID, "NewSortKeyPosition", 1);

                                        }
                                    }
                                }

                                foreach (IDTSVirtualInputColumn100 vColumn in vMergeSortInput.VirtualInputColumnCollection)
                                {
                                    if (!MergeSortColumn.Contains(vColumn.Name))
                                    {
                                        MergeCol = MergeSortinstance.SetUsageType(MergeSortWrapper.InputCollection[0].ID, vMergeSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                    }
                                }
                                //MergeSortinstance.SetComponentProperty("EliminateDuplicates", 1);
                    
                                mergeJoin = dataFlowTask.ComponentMetaDataCollection.New();
                                mergeJoin.ComponentClassID = "DTSTransform.MergeJoin";
                                mergeJoin.Name = "merge";
                                CManagedComponentWrapper mergeInstance = mergeJoin.Instantiate();
                                mergeInstance.ProvideComponentProperties();
                   
                                //create path from source1 to merge

                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(MergeSortWrapper.OutputCollection[0], mergeJoin.InputCollection[0]);
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component1.OutputCollection[0], mergeJoin.InputCollection[1]);

                                MergeSortWrapper.OutputCollection[0].IsSorted = true;
                                MergeSortWrapper.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;
                                mergeJoin.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
                                mergeJoin.InputCollection[0].HasSideEffects = false;
                                component1.OutputCollection[0].IsSorted = true;
                                component1.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;
                                mergeJoin.InputCollection[1].ExternalMetadataColumnCollection.IsUsed = false;
                                mergeJoin.InputCollection[1].HasSideEffects = false;

                               IDTSInput100 mergeInput1 = mergeJoin.InputCollection[0];
                                
                               IDTSVirtualInput100 vMergeInput1 = mergeInput1.GetVirtualInput();
                               int NumKeyColumns = 0;
                               foreach (IDTSVirtualInputColumn100 vColumn in vMergeInput1.VirtualInputColumnCollection)
                               {
                                   mergeInstance.SetUsageType(mergeInput1.ID, vMergeInput1, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                   if (vColumn.SortKeyPosition > NumKeyColumns)
                                       NumKeyColumns = vColumn.SortKeyPosition;
                               }
                                IDTSInput100 mergeInput2 = mergeJoin.InputCollection[1];
                                IDTSVirtualInput100 vMergeInput2 = mergeInput2.GetVirtualInput();            
                               foreach (IDTSVirtualInputColumn100 vColumn in vMergeInput2.VirtualInputColumnCollection)
                               {
                                   if (!MergeSortColumn.Contains(vColumn.Name))
                                   {
                                       mergeInstance.SetUsageType(mergeInput2.ID, vMergeInput2, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                       if (vColumn.SortKeyPosition > NumKeyColumns)
                                           NumKeyColumns = vColumn.SortKeyPosition;
                                   }
                               } 
                               IDTSCustomProperty100 property1 = mergeJoin.CustomPropertyCollection[0];
                               property1.Value = 2;
                               IDTSCustomProperty100 property2 = mergeJoin.CustomPropertyCollection[1];
                               property2.Value = 1;

                               IDTSOutput100 outt = mergeJoin.OutputCollection[0];

                               for (int merge_cnt = (outt.OutputColumnCollection.Count / 2); merge_cnt < outt.OutputColumnCollection.Count; merge_cnt++)
                               {
                                   if (!MergeSortColumn.Contains(outt.OutputColumnCollection[merge_cnt].Name))
                                   {                                       
                                       outt.OutputColumnCollection[merge_cnt].Name = outt.OutputColumnCollection[merge_cnt].Name;
                                   }
                               }

                               mergeInstance.SetComponentProperty("JoinType", JoinProp); //full join (0),left outer (1),inner (2)
                               mergeInstance.AcquireConnections(null);
                               mergeInstance.ReinitializeMetaData();
                               mergeInstance.ReleaseConnections();
                    
                                LastTrans = "MergeJoin";
                                break;

                            case "MULTICAST":
                                multiCastComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                multiCastComponent.ComponentClassID = "DTSTransform.Multicast";
                                CManagedComponentWrapper multiCastWrapper = multiCastComponent.Instantiate();
                                multiCastWrapper.ProvideComponentProperties();

                                multiCastComponent.Name = "Multicast_"+i;
                                multiCastComponent.Description = "Multicast";
                                MulticastTargetTable = RuleList[i];
                                multiCast = "Y";
                    

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                }

                                IDTSInput100 multiCastInput = multiCastComponent.InputCollection[0];
                                IDTSVirtualInput100 multiCastVirtualInput = multiCastInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 multiCastVirtualInputColumns = multiCastVirtualInput.VirtualInputColumnCollection;

                                LastTrans = "MultiCast";
                            break;

                        }
                    }

                    /*
                    componentSCD = dataFlowTask.ComponentMetaDataCollection.New();
                    componentSCD.ComponentClassID = "DTSTransform.SCD";
                    CManagedComponentWrapper SCDDesignTime = componentSCD.Instantiate();
                    SCDDesignTime.ProvideComponentProperties();
                    componentSCD.Name = "SCD Task";
                    // string compName = new Application().PipelineComponentInfos["Slowly Changing Dimension"].CreationName;

                    componentSCD.Description = "SCD Transform Example";

                    switch (LastTrans)
                    {
                        case "OleDBSource":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "ConditionalSplit":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "DerivedColumn":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "CharacterMap":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Aggregate":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Lookup":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentSCD.InputCollection[0]);
                            break;
                        case "RowCount":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Sort":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "UnionAll":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "OLEDB":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Merge":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "MergeJoin":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "MultiCast":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                    }

                    
                    try
                    {
                        // Set the custom properties of the SCD.              
                        SCDDesignTime.SetComponentProperty("CurrentRowWhere", "[CurrentStatus] = 'A'");
                        SCDDesignTime.SetComponentProperty("EnableInferredMember", false);
                        SCDDesignTime.SetComponentProperty("UpdateChangingAttributeHistory", false);
                        SCDDesignTime.SetComponentProperty("SqlCommand", "SELECT [city], [cust_code], [first_name], [phone1],[CurrentStatus] FROM [dbo].[CUSTOMER_TGT]");
                        componentSCD.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                        componentSCD.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);

                    }
                    catch (Exception exception)
                    {

                    }

                    //MapColumn(componentSCD, SCDDesignTime);
                    IDTSInput100 SCDInput = componentSCD.InputCollection[0];
                    IDTSVirtualInput100 virtualInput = SCDInput.GetVirtualInput();
                    IDTSVirtualInputColumnCollection100 SCDVirtualInputColumns = virtualInput.VirtualInputColumnCollection;
                    
                    //Setting all properties
                    foreach (IDTSVirtualInputColumn100 virtualColumn in SCDVirtualInputColumns)
                    {
                        try
                        {
                            String cname1 = virtualColumn.Name;

                            if (cname1 == "cust_code")
                            {
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 1);
                            }
                            // designTime.SetInputColumnProperty(SCDInput.ID,virtualColumn.ID, "ColumnType", 1);
                            if (cname1 == "city")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 3);
                            }
                            if (cname1 == "phone1")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 2);
                            }
                            if (cname1 == "first_name")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 4);
                            }
                            //if (cname1 == "CurrentStatus")
                            //{
                            //    IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                            //    SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "CurrentRowWhere", "");
                            //}
                        }
                        catch (Exception fg)
                        {

                        }
                    }

                    SCDDesignTime.AcquireConnections(null);
                    SCDDesignTime.ReinitializeMetaData();
                    SCDDesignTime.ReleaseConnections();
                    IDTSInputColumn100 SCDCol = null;
                    IDTSVirtualInput100 vSCDInput = componentSCD.InputCollection[0].GetVirtualInput();
                    //IDTSVirtualInputColumn100 vColumn = null;

                    foreach (IDTSVirtualInputColumn100 vSCDColumn in vSCDInput.VirtualInputColumnCollection)
                    {

                        SCDCol = SCDDesignTime.SetUsageType(componentSCD.InputCollection[0].ID, vSCDInput, vSCDColumn.LineageID, DTSUsageType.UT_READONLY);
                        
                    }
                     

                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + "ErrorPackage.dtsx", p, null);
                    */

                    //Data Convert Transform start//
                    
                    int condCount = 0;

                    string[] DEST_Tables = DST_Table.Split(',');

                    foreach (string DEST_TABLE in DEST_Tables)
                    {
                        
                        IDTSComponentMetaData100 dataConvertComponent1 = dataFlowTask.ComponentMetaDataCollection.New();
                        dataConvertComponent1.ComponentClassID = "DTSTransform.DataConvert";
                        CManagedComponentWrapper dataConvertWrapper1 = dataConvertComponent1.Instantiate();
                        dataConvertWrapper1.ProvideComponentProperties();
                        
                        dataConvertComponent1.Description = "Data Conversion Component";
                        dataConvertComponent1.Name = "DataConvert Component_" + condCount;

                        if (condCount > 0)
                        {
                            LastTrans = "ConditionalSplit";
                        }
                        SqlCommand Sqlcmd = new SqlCommand();
                        SqlConnection SqlConn = new SqlConnection();
                        //SqlConn.ConnectionString = "Data Source=RAJESH-PC;Initial Catalog=Test;Integrated Security=SSPI";
                        switch (LastTrans)
                        {
                            case "OleDBSource":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "ConditionalSplit":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[condCount], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "DerivedColumn":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "CharacterMap":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Aggregate":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Lookup":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "RowCount":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Sort":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "UnionAll":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "OLEDB":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "CopyColumn":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(copyMapComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "MergeJoin":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Merge":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "MultiCast":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                        }
                        SqlConn.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");
                        
                        Sqlcmd.Connection = SqlConn;
                        Sqlcmd.CommandType = CommandType.Text;
                        
                        Sqlcmd.CommandText = "Select COLUMN_NAME,DATA_TYPE,Isnull(CHARACTER_MAXIMUM_LENGTH,0) As CHARACTER_MAXIMUM_LENGTH,Isnull(NUMERIC_PRECISION,0) As NUMERIC_PRECISION,Isnull(NUMERIC_SCALE,0) As NUMERIC_SCALE from Information_Schema.COLUMNS where TABLE_NAME='" + DEST_TABLE + "'";
                        SqlDataAdapter sqlAdp = new SqlDataAdapter();
                        DataSet dsCols = new DataSet();
                        if (SqlConn.State == ConnectionState.Closed)
                            SqlConn.Open();
                        sqlAdp.SelectCommand = Sqlcmd;
                        SqlDataReader rdr = null;
                        rdr = Sqlcmd.ExecuteReader();
                        int a = 0;
                        while (rdr.Read())
                        {
                            try
                            {
                                string COLUMN_NAME = (string)rdr["COLUMN_NAME"];
                                string DATA_TYPE = (string)rdr["DATA_TYPE"];
                                int CHARACTER_MAXIMUM_LENGTH = (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
                                int NUMERIC_PRECISION = Convert.ToInt32(rdr["NUMERIC_PRECISION"]);
                                int NUMERIC_SCALE = Convert.ToInt32(rdr["NUMERIC_SCALE"]);

                                IDTSVirtualInput100 dataConvertVirtualInput = dataConvertComponent1.InputCollection[0].GetVirtualInput();
                                IDTSOutput100 dataConvertOutput = dataConvertComponent1.OutputCollection[0];
                                IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;
                                
                                int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[COLUMN_NAME].LineageID;

                                dataConvertWrapper1.SetUsageType(
                                    dataConvertComponent1.InputCollection[0].ID,
                                    dataConvertVirtualInput, sourceColumnLineageId,
                                    DTSUsageType.UT_READONLY);

                                IDTSOutputColumn100 ConvCol1 = dataConvertWrapper1.InsertOutputColumnAt(dataConvertOutput.ID, 0, COLUMN_NAME, string.Empty);

                                if (DATA_TYPE.ToLower() == "varchar" || DATA_TYPE.ToLower() == "char")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 1252);
                                }
                                if (DATA_TYPE.ToLower() == "nvarchar")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "numeric")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_NUMERIC, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "float")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R8, 0, 0, NUMERIC_SCALE, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "datetime" || DATA_TYPE.ToLower() == "date")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBDATE, 0, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "integer" || DATA_TYPE.ToLower() == "int" || DATA_TYPE.ToLower() == "bigint")

                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I8, 0, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "smallint" || DATA_TYPE.ToLower() == "tinyint")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I2, 0, 0, 0, 0);
                                }
                               
                                else if (DATA_TYPE.ToLower() == "bit")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_BOOL, 0, 0, 0, 0);
                                }

                                                          
                                ConvCol1.MappedColumnID = a;

                                dataConvertWrapper1.SetOutputColumnProperty(
                                        dataConvertOutput.ID,
                                        ConvCol1.ID,
                                        "SourceInputColumnLineageID",
                                        sourceColumnLineageId);
                                a = a + 1;
                            }
                            catch (Exception ex)
                            {

                            }
                        }

                        if (SqlConn.State == ConnectionState.Open)
                            SqlConn.Close();
                        
                        //Get input and virtual input for destination to select and map columns:

                        IDTSComponentMetaData100 destination = dataFlowTask.ComponentMetaDataCollection.New();
                        destination.ComponentClassID = "DTSAdapter.OleDbDestination";
                        CManagedComponentWrapper destDesignTime = destination.Instantiate();
                        destDesignTime.ProvideComponentProperties();
                        destination.Name = "OLEDBDestination_" + DEST_TABLE;


                        destination.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                        destination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);

                        destDesignTime.SetComponentProperty("OpenRowset", DEST_TABLE); //Prajakta - To add the value from "DST Table"
                        destDesignTime.SetComponentProperty("AccessMode", 3);
                        destDesignTime.SetComponentProperty("FastLoadOptions", "TABLOCK,CHECK_CONSTRAINTS");
                        //Connect the source to destination component:
                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent1.OutputCollection[0], destination.InputCollection[0]);
                        IDTSInput100 destinationInputerr = destination.InputCollection[0];
                        IDTSVirtualInput100 destinationVirtualInputerr = destinationInputerr.GetVirtualInput();
                        IDTSVirtualInputColumnCollection100 destinationVirtualInputColumnserr = destinationVirtualInputerr.VirtualInputColumnCollection;

                        //Reinitialize the destination metadata:

                        destDesignTime.AcquireConnections(null);
                        destDesignTime.ReinitializeMetaData();
                        destDesignTime.ReleaseConnections();

                        //Get the destination s default input and virtual input:

                        IDTSInput100 destInput = destination.InputCollection[0];
                        IDTSVirtualInput100 vInput = destInput.GetVirtualInput();
                        IDTSInputColumnCollection100 destInputCols = destInput.InputColumnCollection;
                        IDTSExternalMetadataColumnCollection100 destExtCols = destInput.ExternalMetadataColumnCollection;
                        IDTSOutputColumnCollection100 sourceColumns = dataConvertComponent1.OutputCollection[0].OutputColumnCollection;

                        IDTSOutputColumnCollection100 exSourceColumns = component.OutputCollection[0].OutputColumnCollection;
                        
                        // The OLEDB destination requires you to hook up the external data conversion columns
                        foreach (IDTSOutputColumn100 outputCol in sourceColumns)
                        {
                            try
                            {
                                // Get the external column id
                                IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
                                if (extCol != null)
                                {
                                    // Create an input column from an output col of previous component.
                                    vInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                                    IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
                                    if (inputCol != null)
                                    {
                                        // map the input column with an external metadata column
                                        destDesignTime.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
                                    }
                                }
                            }
                            catch (Exception exc)
                            {
                                foreach(string joinCol in joinColumns)
                                {
                                    if (outputCol.Name != joinCol)
                                    {
                                        Dts.TaskResult = (int)ScriptResults.Failure;
                                    }
                                }
                            }
                        }
                        condCount = condCount + 1;
                    }

                    if (multiCast == "Y")
                    {
                        int multiCastCount = 1;

                        string[] multiCast_Tables = MulticastTargetTable.Split('#');

                        foreach (string TGT_TABLE in multiCast_Tables)
                        {

                            IDTSComponentMetaData100 dataConvertComponent1 = dataFlowTask.ComponentMetaDataCollection.New();
                            dataConvertComponent1.ComponentClassID = "DTSTransform.DataConvert";
                            CManagedComponentWrapper dataConvertWrapper1 = dataConvertComponent1.Instantiate();
                            dataConvertWrapper1.ProvideComponentProperties();

                            dataConvertComponent1.Description = "Data Conversion Component";
                            dataConvertComponent1.Name = "DataConvert Component_MultiCast_" + multiCastCount;


                            SqlCommand Sqlcmd = new SqlCommand();
                            SqlConnection SqlConn = new SqlConnection();
                            //SqlConn.ConnectionString = "Data Source=RAJESH-PC;Initial Catalog=Test;Integrated Security=SSPI";

                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[multiCastCount], dataConvertComponent1.InputCollection[0]);

                            SqlConn.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");

                            Sqlcmd.Connection = SqlConn;
                            Sqlcmd.CommandType = CommandType.Text;

                            Sqlcmd.CommandText = "Select COLUMN_NAME,DATA_TYPE,Isnull(CHARACTER_MAXIMUM_LENGTH,0) As CHARACTER_MAXIMUM_LENGTH,Isnull(NUMERIC_PRECISION,0) As NUMERIC_PRECISION,Isnull(NUMERIC_SCALE,0) As NUMERIC_SCALE from Information_Schema.COLUMNS where TABLE_NAME='" + TGT_TABLE + "'";
                            SqlDataAdapter sqlAdp = new SqlDataAdapter();
                            DataSet dsCols = new DataSet();
                            if (SqlConn.State == ConnectionState.Closed)
                                SqlConn.Open();
                            sqlAdp.SelectCommand = Sqlcmd;
                            SqlDataReader rdr = null;
                            rdr = Sqlcmd.ExecuteReader();
                            int a = 0;
                            while (rdr.Read())
                            {
                                try
                                {
                                    string COLUMN_NAME = (string)rdr["COLUMN_NAME"];
                                    string DATA_TYPE = (string)rdr["DATA_TYPE"];
                                    int CHARACTER_MAXIMUM_LENGTH = (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
                                    int NUMERIC_PRECISION = Convert.ToInt32(rdr["NUMERIC_PRECISION"]);
                                    int NUMERIC_SCALE = Convert.ToInt32(rdr["NUMERIC_SCALE"]);

                                    IDTSVirtualInput100 dataConvertVirtualInput = dataConvertComponent1.InputCollection[0].GetVirtualInput();
                                    IDTSOutput100 dataConvertOutput = dataConvertComponent1.OutputCollection[0];
                                    IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;

                                    int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[COLUMN_NAME].LineageID;

                                    dataConvertWrapper1.SetUsageType(
                                        dataConvertComponent1.InputCollection[0].ID,
                                        dataConvertVirtualInput, sourceColumnLineageId,
                                        DTSUsageType.UT_READONLY);

                                    IDTSOutputColumn100 ConvCol1 = dataConvertWrapper1.InsertOutputColumnAt(dataConvertOutput.ID, 0, COLUMN_NAME, string.Empty);

                                    if (DATA_TYPE.ToLower() == "varchar" || DATA_TYPE.ToLower() == "char")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 1252);
                                    }
                                    if (DATA_TYPE.ToLower() == "nvarchar")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "numeric")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_NUMERIC, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "float")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R8, 0, 0, NUMERIC_SCALE, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "datetime" || DATA_TYPE.ToLower() == "date")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBDATE, 0, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "integer" || DATA_TYPE.ToLower() == "int")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I8, 0, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "smallint" || DATA_TYPE.ToLower() == "tinyint")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I2, 0, 0, 0, 0);
                                    }

                                    else if (DATA_TYPE.ToLower() == "bit")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_BOOL, 0, 0, 0, 0);
                                    }


                                    ConvCol1.MappedColumnID = a;

                                    dataConvertWrapper1.SetOutputColumnProperty(
                                            dataConvertOutput.ID,
                                            ConvCol1.ID,
                                            "SourceInputColumnLineageID",
                                            sourceColumnLineageId);
                                    a = a + 1;
                                }
                                catch (Exception ex)
                                {

                                }
                            }

                            if (SqlConn.State == ConnectionState.Open)
                                SqlConn.Close();

                            //Get input and virtual input for destination to select and map columns:

                            IDTSComponentMetaData100 destination = dataFlowTask.ComponentMetaDataCollection.New();
                            destination.ComponentClassID = "DTSAdapter.OleDbDestination";
                            CManagedComponentWrapper destDesignTime = destination.Instantiate();
                            destDesignTime.ProvideComponentProperties();
                            destination.Name = "OLEDBDestination_" + TGT_TABLE + "_" + multiCastCount;


                            destination.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                            destination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);

                            destDesignTime.SetComponentProperty("OpenRowset", TGT_TABLE); //Prajakta - To add the value from "DST Table"
                            destDesignTime.SetComponentProperty("AccessMode", 3);
                            destDesignTime.SetComponentProperty("FastLoadOptions", "TABLOCK,CHECK_CONSTRAINTS");
                            //Connect the source to destination component:
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent1.OutputCollection[0], destination.InputCollection[0]);
                            IDTSInput100 destinationInputerr = destination.InputCollection[0];
                            IDTSVirtualInput100 destinationVirtualInputerr = destinationInputerr.GetVirtualInput();
                            IDTSVirtualInputColumnCollection100 destinationVirtualInputColumnserr = destinationVirtualInputerr.VirtualInputColumnCollection;

                            //Reinitialize the destination metadata:

                            destDesignTime.AcquireConnections(null);
                            destDesignTime.ReinitializeMetaData();
                            destDesignTime.ReleaseConnections();

                            //Get the destination s default input and virtual input:

                            IDTSInput100 destInput = destination.InputCollection[0];
                            IDTSVirtualInput100 vInput = destInput.GetVirtualInput();
                            IDTSInputColumnCollection100 destInputCols = destInput.InputColumnCollection;
                            IDTSExternalMetadataColumnCollection100 destExtCols = destInput.ExternalMetadataColumnCollection;
                            IDTSOutputColumnCollection100 sourceColumns = dataConvertComponent1.OutputCollection[0].OutputColumnCollection;

                            IDTSOutputColumnCollection100 exSourceColumns = component.OutputCollection[0].OutputColumnCollection;

                            // The OLEDB destination requires you to hook up the external data conversion columns
                            foreach (IDTSOutputColumn100 outputCol in sourceColumns)
                            {
                                try
                                {
                                    // Get the external column id
                                    IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
                                    if (extCol != null)
                                    {
                                        // Create an input column from an output col of previous component.
                                        vInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                                        IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
                                        if (inputCol != null)
                                        {
                                            // map the input column with an external metadata column
                                            destDesignTime.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
                                        }
                                    }
                                }
                                catch (Exception exc)
                                {
                                    foreach (string joinCol in joinColumns)
                                    {
                                        if (outputCol.Name != joinCol)
                                        {
                                            Dts.TaskResult = (int)ScriptResults.Failure;
                                        }
                                    }
                                }
                            }
                            multiCastCount = multiCastCount + 1;
                        }
                    }


                    //We then save the package into a file system.
                    //Dts.TaskResult = (int)ScriptResults.Success;
                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + Template_Name + ".dtsx", p, null);
                    //p.Execute();
                }

            }
            catch (Exception ex)
            {
                Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + "ErrorPackage.dtsx", p, null);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:ProjectId>{BCC422BA-10FD-488F-8FE6-8AF6FD310273}</msb:ProjectId>
		<msb:NoContent>Reference;Import;Folder</msb:NoContent>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>st_0cef29a9393f4e4c8dda023d910526e5</msb:DisplayName>
		<msb:CodeName>st_0cef29a9393f4e4c8dda023d910526e5</msb:CodeName>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Project Include="st_0cef29a9393f4e4c8dda023d910526e5.csproj"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Settings.get_Default():ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Sett" +
    "ings")]

namespace ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_0cef29a9393f4e4c8dda023d910526e5.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Hexaware")]
[assembly: AssemblyProduct("ST_0cef29a9393f4e4c8dda023d910526e5.csproj")]
[assembly: AssemblyCopyright("Copyright @ Hexaware 2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_0cef29a9393f4e4c8dda023d910526e5.csproj.dll">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
TgAABhFMbyYAAAYWjCcAAAFvUQAABhFCbyUAAAYWjCcAAAFvWQAABm9QAAAGK2wRP28ZAAAGb04A
AAYRTW8mAAAGFownAAABb1EAAAYRQm8lAAAGFownAAABb1kAAAZvUAAABis1ET9vGQAABm9OAAAG
EU9vJgAABhaMJwAAAW9RAAAGEUJvJQAABhaMJwAAAW9ZAAAGb1AAAAYRQm8lAAAGFownAAABb1kA
AAYTYhFib2AAAAYTYxFjb2UAAAYTZBFCbyYAAAYWjCcAAAFvUQAABhNlEWVvVQAABiYWE2dy5wAA
cBNoEVIRWJoXjT0AAAH+Dg4B/gwOARYfI53+DA4Bb1AAAAoTaRFp/g4PARb+DhABOCYBAAD+DA8B
/gwQAZoTahFkb2gAAAb+DhMBONQAAAD+DBMBb38AAAp0BwAAAhNrEWtvDQAABm8kAAAKE2hyngsA
cBFocqILAHAoMwAACiYRam8lAAAKb0gAAAoRaG9IAAAKb0kAAAo5hwAAABFjb2UAAAYRaG9nAAAG
bxMAAAYTZhFhEWJvWgAABhFjEWYWbzIAAAYmEWEWEUJvJgAABhFnjCcAAAFvUQAABm9SAAAGbzkA
AAYTbBFhEWxvUgAABnKmCwBwEWeMJwAAAW81AAAGJhFhEWxvUgAABnLGCwBwEWpvJQAACm81AAAG
JhFnF1gTZ/4MEwFvhwAACjoe////3h3+DBMBdV8AAAH+DhQB/gwUASwJ/gwUAW+IAAAK3P4MEAEX
WP4OEAH+DBAB/gwPAY5pP8v+//9ywgoAcBNVOOJJAAARP28YAAAGbxwAAAYTQxFDcuwLAHBvJAAA
BhFDbycAAAYTbRFtby4AAAYRQ3IiDABwEViMJwAAAShzAAAKbyEAAAYRQ28lAAAGFownAAABb1kA
AAZvYwAABhZveAAABhFDbyUAAAYWjCcAAAFvWQAABhZvXgAABhFVJf4OEQE5/QMAAP4TfgoAAAQ6
rgAAAB8Nc3AAAAolcrQIAHAWKHEAAAolcsIKAHAXKHEAAAolcuQKAHAYKHEAAAolcgALAHAZKHEA
AAolchoLAHAaKHEAAAolci4LAHAbKHEAAAolcjwLAHAcKHEAAAolck4LAHAdKHEAAAolclgLAHAe
KHEAAAolcvUAAHAfCShxAAAKJXJqCwBwHwoocQAACiVydgsAcB8LKHEAAAolcooLAHAfDChxAAAK
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
AHAdKHEAAAolclgLAHAeKHEAAAolcvUAAHAfCShxAAAKJXJqCwBwHwoocQAACiVydgsAcB8LKHEA
AAolcooLAHAfDChxAAAK/hOADAAABP4TfgwAAAT+DBEB/g0SAShyAAAKOSkDAAD+DBIBRQ0AAAAF
AAAAPwAAAHkAAACzAAAA7QAAACcBAABhAQAAmwEAANUBAAAPAgAASQIAAIACAAC3AgAAOOcCAAAR
P28ZAAAGb04AAAYRQG8mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZvUAAABjitAgAA
ET9vGQAABm9OAAAGEUJvJgAABhaMJwAAAW9RAAAGEUVvJQAABhaMJwAAAW9ZAAAGb1AAAAY4cwIA
ABE/bxkAAAZvTgAABhFDbyYAAAYWjCcAAAFvUQAABhFFbyUAAAYWjCcAAAFvWQAABm9QAAAGODkC
AAARP28ZAAAGb04AAAYRRG8mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZvUAAABjj/
AQAAET9vGQAABm9OAAAGEUVvJgAABhaMJwAAAW9RAAAGEUVvJQAABhaMJwAAAW9ZAAAGb1AAAAY4
xQEAABE/bxkAAAZvTgAABhFFbyYAAAYWjCcAAAFvUQAABhFFbyUAAAYWjCcAAAFvWQAABm9QAAAG
OIsBAAARP28ZAAAGb04AAAYRSG8mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZvUAAA
BjhRAQAAET9vGQAABm9OAAAGEUlvJgAABhaMJwAAAW9RAAAGEUVvJQAABhaMJwAAAW9ZAAAGb1AA
AAY4FwEAABE/bxkAAAZvTgAABhFHbyYAAAYWjCcAAAFvUQAABhFFbyUAAAYWjCcAAAFvWQAABm9Q
AAAGON0AAAARP28ZAAAGb04AAAYRS28mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZv
UAAABjijAAAAET9vGQAABm9OAAAGEUxvJgAABhaMJwAAAW9RAAAGEUVvJQAABhaMJwAAAW9ZAAAG
b1AAAAYrbBE/bxkAAAZvTgAABhFNbyYAAAYWjCcAAAFvUQAABhFFbyUAAAYWjCcAAAFvWQAABm9Q
AAAGKzURP28ZAAAGb04AAAYRT28mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZvUAAA
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
yQAAAHJwAAAdAAAAAAAAAAAAAAAJcgAApgIAAK90AAADAAAAawAAAQAAAADcdgAAcwAAAE93AABT
AAAAawAAAQIAAADFdgAA7QAAALJ3AAAdAAAAAAAAAAAAAABGAAAA4ncAACh4AABFAAAAawAAAR4C
KMEAAAoqtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBt
c2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2Vu
PWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAA
AAAAAAAAAABQQURQQURQtAAAAEJTSkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAFgk
AAAjfgAAxCQAACweAAAjU3RyaW5ncwAAAADwQgAAdBgAACNVUwBkWwAAEAAAACNHVUlEAAAAdFsA
AEgQAAAjQmxvYgAAAAAAAAACAAABVz+iCQkLAAAA+iUzABYAAAEAAAB0AAAAKQAAAFkAAACYAAAA
egAAABkAAADIAAAAQQAAAOcAAABUAAAAAgAAABUAAAA4AAAAUgAAAAMAAAABAAAABwAAAAEAAAAC
AAAAAQAAAAAACgABAAAAAAAGANYAzwAKAPIA3QAOAFIBKQEGAG4BzwAGAIQBcwEGALUBoAEGAGwC
UgIGAJcChQIGAK4ChQIGAMsChQIGAOoChQIGAAMDhQIGABwDhQIGADcDhQIGAFIDhQIGAGsDhQIG
AKQDhAMGAMQDhAMGACAEDQQGAD0EzwAGAEIEzwAGAGYEhQIKAJIEfAQKAKsEfAQGAMAEhAMOAOIE
KQEEABcFMQUGAH4FzwAGAIUFzwASANwFvAUSAOQFvAUSAAAGvAUSAA8GvAUSABgGvAUSAG8GvAUO
AHsGKQESAJUGvAUSAK0GvAUGAN8GzwASAOwGvAUSAAgHvAUSADYHvAUSAD8HvAUSAFwHvAUSAHEH
vAUWAKgHkgcWALMHkgcWANQHwQcWAPAHwQcWAPoHhgcWACYIkgcWADMIwQcWAD8IhgcWAGAIhgcW
AHIIkgcWAJgIkgcWAKcIhgcWAK8IhgcWAOAIkgcWAPwIwQcGAD8JzwAaAKMJdgkaALIJdgkaAN4J
dgkGAPMJzwAaACMKdgkSAI0KvAUSAL0KvAUEANIKMQUEANsKMQUEAOsKMQUEAC4LMQUEAGALMQUE
AIULMQUEALsLMQUEAAgMMQUSACEMvAUeAHcMTwwEAHcMTwwEANoMMQUGAKANhQ0EAOENMQUEAAoO
MQUEABYOMQUEAEMOMQUEAFEOMQUEAHwOMQUEAK0OMQUEANEOMQUEABYPMQUGAGIPTw8EAJYPMQUE
AKkPMQUEAMMPMQUGAP4PzwAEABIQMQUGAJEQhQ0GAKAQzwAGAKwQzwAEAMUQMQUEAPwQMQUEAEMR
MQUEAHQRMQUEALsRTwwGAJkTzwAEAKkTMQUGAP8TzwAEAAkUMQUGAEIUIxQGAK8UIxQGAL0UIxQG
ANUUIxQEAOgUMQUGAPsUIxQGAEMVTw8GAGYVhQIAAAAAAQAAAAAAAQABAAAAEAA5AEMABQABAAEA
AAEQAHkAQwAJAAMABQABABAAggCNAA0ABAAIAAMBAAC4AAAAEQAEAAoAAwEQAAQFAAAFAAcACgCh
EAAAFwUxBQAACAAMAKEQAADSCjEFAAAIABcAoRAAANsKMQUAAAgAFwChEAAA6woxBQAACAAaAKEQ
AAAuCzEFAAAIAB0AoRAAAGALMQUAAAgALgChEAAAhQsxBQAACAAuAKEQAAC7CzEFAAAIAD8AoRAA
AAgMMQUAAAgAQgChEAAAdwxPDAAACABHAKEQAADaDDEFAAAIAEcAAAAAAEANAAAFAAgATQChEAAA
4Q0xBQAAFwBNAKEQAAAKDjEFAAAXAE8AoRAAABYOMQUAABcAUQChEAAAQw4xBQAAFwBSAKEQAABR
DjEFAAAXAFkAoRAAAHwOMQUAABcAWgChEAAArQ4xBQAAFwBkAKEQAADRDjEFAAAXAGcAoRAAABYP
MQUAABcAaQChEAAAlg8xBQAAFwBtAAEBAACpDzEFEQAXAHUAAQEAAMMPMQURABsAdQChEAAAEhAx
BQAAHgB1AKEQAADFEDEFAAAeAHkAoRAAAPwQMQUAAB4AfQChEAAAQxExBQAAHgCBAAEBAAB0ETEF
EQAeAJcAAQEAALsRTwwRACMAlwChEAAAqRMxBQAAWgCXAKEQAAAJFDEFAABaAJkAoRAAAOgUMQUA
AFoAmQChEAAAvR1PDAAAWgCZAKEQAADPHU8MAABaAJkAEQCUARMAEQDBARcAEQALAjkABgY0AkcA
VoA8AkoAVoBEAkoABgBaBY0AEwCtDekBEwDNDekBEwB9EOkBEwDtEekBEwABEukBEwAdEukBEwBr
EukBEwCuEukBEwDCEukBEwDWEukBEwAME+kBEwAhE+kBEwBGE+kBEwBvE+kBEwCEE+kBBgY0AkcA
VoA/GRwLVoBLGRwLVoBYGRwLBgY0AkcAVoBjGYsLVoBtGYsLBgY0AkcAVoAOG8gMVoAZG8gMVoAq
G8gMVoA5G8gMBgY0AkcAVoBKGzcNVoBTGzcNVoBbGzcNVoBhGzcNVoBnGzcNVoBtGzcNVoBzGzcN
VoB5GzcNVoCBGzcNVoCJGzcNVoCUGzcNVoCaGzcNVoChGzcNVoCoGzcNVoCvGzcNVoC1GzcNVoC8
GzcNVoDIGzcNVoDQGzcNVoDZGzcNVoDgGzcNVoDoGzcNVoDzGzcNVoD9GzcNVoAHHDcNVoAWHDcN
VoAhHDcNVoA2HDcNVoA/HDcNVoBHHDcNVoBQHDcNVoBgHDcNVoBsHDcNVoB4HDcNVoCEHDcNVoCQ
HDcNVoCcHDcNVoCqHDcNVoC4HDcNVoDJHDcNVoDVHDcNVoDiHDcNVoDvHDcNVoD8HDcNVoAIHTcN
VoAVHTcNVoAnHTcNVoA1HTcNVoBGHTcNVoBWHTcNVoBmHTcNVoB7HTcNVoCMHTcNVoCnHTcNUCAA
AAAAgxjRARsAAQBYIAAAAACTCNcBHwABAJEgAAAAAJMI6wEkAAEAmCAAAAAAkwj3ASkAAQCgIAAA
AACWCBsCPQACALMgAAAAAIYY0QEbAAIApyAAAAAAkRjbBIkAAgDYIAAAAACGAC8CGwACACCbAAAA
AIYY0QEbAAIAuyAAAAAAhhjRARsAAgDDIAAAAACGAGIFkQACAAAAAAAAAAYYFxQbAAMAAAAAAAAA
xg11BZYAAwAAAAAAAADGDVYGWAAEAAAAAAAAAAYYXBQbAAUAAAAAAAAAxg1GEuwCBQAAAAAAAADG
DVMSyQEFAAAAAAAAAAYYaBQbAAUAAAAAAAAAxg2ID8kBBQAAAAAAAAAGGHQUGwAFAAAAAAAAAMYN
XhLJAQUAAAAAAAAAxg1bE8kBBQAAAAAAAAAGGAwVGwAFAAAAAAAAAMYNDgu1AQUAAAAAAAAAxg33
DRECBgAAAAAAAADGDbYGAgMHAAAAAAAAAAYYVRUbAAkAAAAAAAAAxgVHC7oBCQAAAAAAAAAGGFUV
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
AAAAAAAgAAAAAAAgAAAAAAAgAAAAAAAgAAAAAAEgAQDxFQAgAAAAAAEAAQCBFgEAAgCLFgEgAwCe
FgEgBACnFgAgAAAAAAEAAQC3FgEgAgDAFgEAAwDYFgEABADjFgAgAAAAAAEgAQDuFgEgAgD7FgAg
AAAAAAEAAQCBFgEgAgDuFgEgAwD7FgAgAAAAAAEAAQC3FgEAAgAOFwEgAwDuFgEgBAD7FgAgAAAA
AAEAAQCBFgEAAgAdFwEgAwDuFgEgBAD7FgAgAAAAAAEAAQAtFwEAAgCBFgEgAQBKFwAgAAAAAAEA
AQC3FgEAAgAOFwEAAwBjFwAgAAAAAAEgAQBPFQAgAAAAAAEgAQCnFwAgAAAAAAEgAQDWFwAgAAAA
AAEgAQBSFAAgAAAAAAEgAQACGAAgAAAAAAEgAQApGAEgAgA1GAAgAAAAAAEgAQBPFQEAAQBHGAAg
AAAAAAEAAQBxGAAgAAAAAAEgAQBPFQEAAQBHGAEAAQC+GAAgAAAAAAAgAAAAAAAgAAAAAAAgAAAA
AAEAAQDYFgEAAgDjFgAgAAAAAAEgAQBPFQAgAAAAAAAgAAAAAAEgAQBPFQAgAAAAAAAgAAAAAAEA
AQBHGAAgAAAAAAEgAQCNFQAgAAAAAAEgAQBSFAAgAAAAAAAgAAAAAAEgAQBPFQEAAQCBGQAgAAAA
AAAgAAAAAAEAAQDYFgAgAAAAAAEgAQBPFQAgAAAAAAEAAQBHGAAgAAAAAAEgAQBSFAAgAAAAAAEA
AQDJGQAAAQDmGQEAAQAEGgEAAgAOGgEAAwAWGgEABAAhGgEABQAoGgEAAQBKGgEAAQBKGgEAAQCe
GgEAAQBHGAcAmAAIACQACACcAAkAnAAKAM0BCwCYAAwANAAOAM0BDwCYABEAmAATAM0BFACYABUA
zQEWAJgAFwDNARgAmAAZAJgAGgDNARsAzQEcAJgAHwDNASAAzQEhAM0BIgCYACUAmAA5ANEBWABB
ANEBWABJANEBWABRANEBWABZANEBWABhANEBWABpANEBWABxANEBWAB5ANEBWACBANEBWACJANEB
XQCRANEBGwCZANEBGwAJANEBGwChAFQEYgChAG8EaQApANEBbgC5ANEBegDJANEBGwARANEBGwDR
ANEBGwBrAHUFlgDhAJYFmgDxANEBGwDxAPAFoQD5AAsGpgARASUGrQARAT4GrQARAVYGWAARAV8G
WAAZAdEBGwAZAI0GsgAhAZ8GuAApAbYGvgAxAb8GxQAJAMkGlgDhANIGlgDhANcGyQDhAJYFkQA5
AZYFzgDhAOUG0wDxAPgG2QBBAQsG3wBJAVYGWADhABoH5gBJASEHWAAJAfAFoQBRAU0H7QBZAbYG
8wBhAWgH+gDhAOUGAAEZAXwHBwFxAdEBGwB5AdEBGwCBASEHWABxAeEHEQGJAQYIGAGJARYIWACZ
AdEBHwGhAVIIJQGhAWcILAFxAYkIMwG5AQsGOQHBAdEBGwDJAdEBGwCBAb8IQgGBAckIGwDBAc4I
SAFxAe4ITwHhAbYGVQHhAAkJWgHhABEJlgDhABkJkQDhASIJYAGBAScJGwDhAC0JZAHhADMJZwER
AZ8GuAApAQsGbQHhAEQJdwFRAUoJxQDxAcgJfgH5AQsGhAEJAvwJigH5AQQKkAEBAg8KWAABAjcK
lwEBAk4KXQABAlsKngEBAm0KXQDhAH8KZwEJAaMKowEZAgsGqQHDAA4LtQHjAEcLugEjAUsLWAA7
AXkLvwFzAaALGwALAVYGWAD7AF8GWABTAd4LxAELAv4LyQH7AbYGzQFpApAM0wEzAqUM3AFJAbsM
lgAjAsIMWACbAfAM4gHbAQUNngF7ARgNGwDjAS0NGwAMANEBXQAMAAsG+gEMAMENAgLhAOUGCwLL
APcNEQJzAkcLFgIzAS4OGwKLArYGIAIrAWgOJgLLArYGKwKDAokOMQIDA8EOOQIrA/UOPgKrAjQP
QwJDA24PSALZAnwPxQA7A7YGTgKbAIgPyQHTArsMyQGTAbYPVAKTArsMyQHLAdYPXwKrAeMPZwLZ
AvUPYAH5AgoQGwAbAzoQbwLDA18QrQDzAmoQrQAUANEBGwAUAAsGewIUAJgQgQIcANEBjgIZA7IQ
lALhALcQqAILA+IQrQLTA24PSAKLA3UFlgDhABoHswKDA18GWACjAxwRuQLrA7YGvwJLAlYGWABj
AjkRngFjA0cLxQIrBFYGWACzBFcRXQCLBIYRywKbBJ4RywI7BBwRuQIDBEcL0gJ7BMQR1wJTBNoR
XQDhABUSlgCDATES4gKDAEYS7AKLAFMSyQGrAF4SyQFDAnUFlgD7A/4LyQFrA7sMyQGzAX8S8gIL
BLsMyQG7AZYS8gLDAusSrQBLA7YG+wJrBPgSXQDTALYGAgNrATYTWACzAFsTyQFDARwRuQJbA/4L
yQEjBHUFlgBJA6ETCANTA24PSAKrA7YGDQMzA7YPFAPjA8cTGwO7BLsMyQHzAeETIQMhAfATXQDh
AOUGKgMZANEBGwBpA9EBXQBxA9EBWAB5A9EBGwCBA9EBGwCRA9EB9QWhA9EBWAB5A9EBJQsIABQA
TgAIABgAUwAIAGAATgAIAGQAUwAIAGgAIAsIAHAATgAIAHQAUwAIAHwATgAIAIAAUwAIAIQAIAsI
AIgAzQwIAJAATgAIAJQAUwAIAJgAIAsIAJwAPA0IAKAAzQwIAKQAQQ0IAKgARg0IAKwASw0IALAA
UA0IALQAVQ0IALgAWg0IALwAXw0IAMAAZA0IAMQAaQ0IAMgAbg0IAMwAcw0IANAAeA0IANQAfQ0I
ANgAgg0IANwAhw0IAOAAjA0IAOQAkQ0IAOgAlg0IAOwAmw0IAPAAoA0IAPQApQ0IAPgAqg0IAPwA
rw0IAAABtA0IAAQBuQ0IAAgBvg0IAAwBww0IABAByA0IABQBzQ0IABgB0g0IABwB1w0IACAB3A0I
ACQB4Q0IACgB5g0IACwB6w0IADAB8A0IADQB9Q0IADgB+g0IADwB/w0IAEABBA4IAEQBCQ4IAEgB
Dg4IAEwBEw4IAFABGA4IAFQBHQ4IAFgBIg4IAFwBJw4IAGABLA4IAGQBMQ4pAJMAgAAuADsAABAu
AFsAHxAuADMAvA8uAEMA7A8uAGMAKBAuABMAvA8uAAsAdA8uABsA7A8uACMA7A8uACsA8g9DAGsA
UwBJAJMAgABhAJsAUwCDAKsAUwDDAJsAUwDjAJsAUwDjACMGUwDjABsGoQUDATMG+wUDAZsAUwAD
ASMGUwADARsGywUjAZsAUwAjASMGUwAjARsGywVDAZsAUwBDASMGUwBDARsGigZDATsGtAZjARsG
AAdjASMGUwBjAZsAUwCDASMGUwCDATMG+wWDARsGKgeDAZsAUwCgARMGWwWjASMGUwCjARsGKgej
AZsAUwDAARMGWwXDATsGtAbDASMGUwDDARsGtgfDAZsAUwDjASMGUwDjAZsAUwDjARsG6gcAAhMG
ZgUDApsAUwADAhsGFAgDAiMGUwAgAhMGbwUjAiMGUwAjAhsGQggjApsAUwBDApsAUwBgAhMGeAVj
ApsAUwBjAjsGtAZjAiMGUwBjAhsGbAiDApsAUwCDAiMGUwCDAhsGlgigAhMGgQWjAiMGUwCjApsA
UwCjAhsGxgijAjsGtAbAAhMGigXDAiMGUwDDAhsGCwnDApsAUwDjAjsGtAbjApsAUwDjAiMGUwDj
AhsGOwkAAxMGWwYDAyMGUwADAxsGeQkDA5sAUwAgAxMGWwUjA5sAUwAjAyMGUwAjAxsGqAlAAxMG
cAZDAxsGjgpDAzsGtAZDAyMGUwBDA5sAUwBjAyMGUwBjAzsGtAZjAxsGvwpjA5sAUwCAAxMGewaD
AxsG8gqDA5sAUwCDAyMGUwCjA0MGKwujA5sAUwDAAxMGWwbDA5sAUwDDA0MGjwvgAxMGWwbjA5sA
UwDjAzsGtAbjAyMGUwDjAxsG/AsABBMGWwUDBCMGUwADBJsAUwADBDsGtAYDBBsGJgwgBBMGWwUj
BDsGtAYjBCMGUwAjBBsGVgwjBJsAUwBDBBsGngxDBCMGUwBDBJsAUwBgBBMGZgVjBJsAUwBjBEMG
0gyABBMGZgWDBJsAUwCDBEMGNg6gBBMGbwWjBJsAUwCjBCMGUwCjBBsGkQ7ABBMGvgbDBBsGuw7D
BJsAUwDDBCMGUwDgBBMGxwbjBBsG5Q7jBJsAUwDjBCMGUwAABRMG0AYDBSMGUwADBZsAUwADBRsG
Dw8jBZsAUwAjBTsGYw8jBSMGUwAjBRsGOQ9ABRMG2QaABRMG4gagBRMG4gbABRMGVAfgBRMGWwYA
BhMGWwVABhMGXQdgBhMGZgegBhMGbwfABhMGeAfgBhMGgQcgBxMGigdgBxMGkweABxMGngfABxMG
pwfgBxMGcAYgCBMGWwVgCBMGZgWACBMGZgWgCBMGbwXACBMGbwUACRMGWwUgCRMGWwVgCRMGZgWA
CRMGZgXACRMGewYAChMGxwYgChMGcAZAChMGVAdgChMGVAegChMG8AjgChMG+QgACxMG+QggCxMG
cAZACxMGVAdgCxMGVAegCxMGZgXACxMGZgUADBMG0AYgDBMG8AhgDBMGZQmgDBMGZgXADBMGxwbg
DBMGcAYADRMG0gkgDRMGcAZADRMG0glgDRMGWwWADRMGewagDRMGVAfADRMGVAfgDRMGWwYADhMG
WwYgDhMGWwVADhMGWwWADhMG6QqgDhMGcAbgDhMGZgUADxMGZgVADxMG0gmADxMGZgWgDxMGcAbg
DxMGWwUAEBMGewYgEBMGVAdAEBMGVAeAEBMGWwWgEBMGWwXgEBMG8AggERMGeAVAERMGeAWAERMG
gAygERMGgAzgERMG2QYAEhMGgQUgEhMGgQVAEhMGZQlgEhMGZQmgEhMGjwzAEhMGjwzgEhMGVAcA
ExMGVAcHAGQFCQBkBQsAZAYNAGQGDwBkBhEAeQYTAGQGFQBkBRcAZAUZAGQFGwBkBR0AZAUfAGQF
IQBkBiMAZAYlAGQGJwBkBikAZAYrAGQFLQBkBS8AZAY1AGQFNwBkBTkAZAY9AGQGQwBkBkUAZAVH
AHkGSQBkBk0AZAVPAHkGUQBkBlcAZAVZAHkGWwBkBmEAZAVjAHkGZQBkBmsAnAdtAGQGdQBkBncA
eQZ5AGQFewBkBX0AZAZ/AGQGgQBkBYMAZAWFAHkGhwB5BokAZAaLAGQGjQBkBo8AZAaRAHkGlQBk
BpkAZAabAHkGoQBkBqMAZAalAGQGpwBkBq0AZAavAHkGsQDbCbMAZAa1AHkGtwDbCbkAZAa9AGQF
vwBkBcEAZAXDAGQFxQBkBscAZAbJAHkGzQDbCc8AZAbTAGQG1QB5BtcAZAbbAGQF3QBkBd8AZAZ1
ADADAgABAAMAAwAHAAQACQAKAAoADAALAA0ADgAVAA8AFwARABkAFQAbABYAHAAXAB8AGAAgABkA
JAAaACUAGwAmABwAKAAfACwAIQAuACIAMAAlADgAAACEAS8AAAADAjQAAAAnAkIAAACAFJMFAAC7
EZcFAACFFJ0FAACMFJ0FAACWFJ0FAACfFJ0FAAAYFWYGAAA0FWsGAABhFYQGAAACFpMFAACAFJMF
AAAOFpMFAAAfFusGAAAvFvAGAABAFvUGAABZFvsGAAB1FpMFAABhFbAHAAB9F50FAADuF5MFAAAI
B+UHAACAFJMFAAAKGD4IAABhFcAIAAB8GJ0FAAB/GAIJAACWGAcJAABhFTUJAAB8GJ0FAADcGAcJ
AADrGG4JAAABGXQJAAAiGaMJAABhFYgKAABhFbgKAAB9F50FAAB8GJ0FAAACFpMFAACAFJMFAABA
FvUGAABhFfULAACKGQcJAABhFVAMAAB9F50FAAB8GJ0FAACAFJMFAABAFvUGAAC5Gp0FAACfFJ0F
AADIGpgMAADcGpgMAAD1Gp0FAAB8GJ0FAgACAAMAAgADAAUAAQAEAAUAAgAFAAcAAgANAAkAAQAO
AAkAAgAQAAsAAgARAA0AAgATAA8AAgAVABEAAgAWABMAAgAYABUAAgAZABcAAgAaABkAAgAeABsA
AQAfABsAAgAgAB0AAQAhAB0AAQAkAB8AAgAjAB8AAgAlACEAAgAmACMAAgAoACUAAgAqACcAAgAs
ACkAAQAtACkAAgA/ACsAAgBBAC0AAQBEAC8AAgBDAC8AAQBGADEAAgBFADEAAgBIADMAAQBJADMA
AgBLADUAAQBMADUAAgBRADcAAgBSADkAAQBTADkAAgBVADsAAgBXAD0AAQBYAD0AAgBZAD8AAgBa
AEEAAQBbAEEAAgBdAEMAAQBeAEMAAgBhAEUAAgBjAEcAAgBlAEkAAgBnAEsAAgBpAE0AAgBrAE8A
AgBtAFEAAQBuAFEAAgBvAFMAAQBwAFMAAQByAFUAAgBxAFUAAgB0AFcAAgB1AFkAAgB3AFsAAQB4
AFsAAgB9AF0AAgB/AF8AAgCBAGEAAQCCAGEAAgCEAGMAAQCFAGMAAgCHAGUAAQCKAGcAAgCJAGcA
AQCNAGkAAgCMAGkAAgCQAGsAAQCRAGsAAgCSAG0AAQCTAG0AAQCWAG8AAgCVAG8AAgCXAHEAAQCY
AHEA8gF0AocCBIAAAAEAAACeF05uAAAAAAAA4gMAAAQAAAAAAAAAAAAAAAEAxgAAAAAABAAAAAAA
AAAAAAAAAQDPAAAAAAALAAAAAAAAAAAAAAAKAAoBAAAAAAsAAAAAAAAAAAAAAAoAnQUAAAAABAAA
AAAAAAAAAAAAAQCGBwAAAAALAAAAAAAAAAAAAAAKAFoJAAAAAAsAAAAAAAAAAAAAAAoALAwAAAAA
AAAAAAEAAADhHQAABQAEAAYABAAhAaQCAAAAPE1vZHVsZT4AU1RfMGNlZjI5YTkzOTNmNGU0Yzhk
ZGEwMjNkOTEwNTI2ZTUuY3Nwcm9qLmRsbABSZXNvdXJjZXMAU1RfMGNlZjI5YTkzOTNmNGU0Yzhk
ZGEwMjNkOTEwNTI2ZTUuY3Nwcm9qLlByb3BlcnRpZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF9l
OWM5Y2IzYTVhYzQ0OWQyOTNkZGViNTI0MmFkZWM3OC5jc3Byb2oAU2NyaXB0UmVzdWx0cwBtc2Nv
cmxpYgBTeXN0ZW0AT2JqZWN0AFN5c3RlbS5Db25maWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGlu
Z3NCYXNlAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVy
LkR0cy5UYXNrcy5TY3JpcHRUYXNrAFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBFbnVtAFN5
c3RlbS5SZXNvdXJjZXMAUmVzb3VyY2VNYW5hZ2VyAHJlc291cmNlTWFuAFN5c3RlbS5HbG9iYWxp
emF0aW9uAEN1bHR1cmVJbmZvAHJlc291cmNlQ3VsdHVyZQAuY3RvcgBnZXRfUmVzb3VyY2VNYW5h
Z2VyAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAEN1bHR1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9E
ZWZhdWx0AERlZmF1bHQATWFpbgB2YWx1ZV9fAFN1Y2Nlc3MARmFpbHVyZQB2YWx1ZQBTeXN0ZW0u
UnVudGltZS5WZXJzaW9uaW5nAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBTeXN0ZW0uUmVmbGVj
dGlvbgBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUA
QXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBB
c3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1i
bHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1ibHlDdWx0dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVy
c2lvbkF0dHJpYnV0ZQBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9u
UmVsYXhhdGlvbnNBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAU1RfMGNl
ZjI5YTkzOTNmNGU0YzhkZGEwMjNkOTEwNTI2ZTUuY3Nwcm9qAFN5c3RlbS5EaWFnbm9zdGljcwBE
ZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlw
ZUZyb21IYW5kbGUAQXNzZW1ibHkAZ2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2RlbABF
ZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5l
cmF0ZWRBdHRyaWJ1dGUALmNjdG9yAFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQA8
PmNfX0Rpc3BsYXlDbGFzczIASURUU1ZpcnR1YWxJbnB1dENvbHVtbjEwMABNaWNyb3NvZnQuU3Fs
U2VydmVyLkR0cy5QaXBlbGluZS5XcmFwcGVyAHZDb2x1bW4APE1haW4+Yl9fMABlbGVtZW50AGdl
dF9OYW1lAFN0cmluZwBTdHJpbmdDb21wYXJpc29uAEVxdWFscwBNaWNyb3NvZnQuU3FsU2VydmVy
Lk1hbmFnZWREVFMATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBQYWNrYWdlAEV4ZWN1
dGFibGVzAGdldF9FeGVjdXRhYmxlcwBFeGVjdXRhYmxlAEFkZABTZXF1ZW5jZQBEdHNDb250YWlu
ZXIAc2V0X0ZhaWxQYWNrYWdlT25GYWlsdXJlAHNldF9GYWlsUGFyZW50T25GYWlsdXJlAHNldF9O
YW1lAHNldF9EZXNjcmlwdGlvbgBBcHBsaWNhdGlvbgBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRz
AFZhcmlhYmxlcwBnZXRfVmFyaWFibGVzAFZhcmlhYmxlAGdldF9JdGVtAGdldF9WYWx1ZQBUb1N0
cmluZwBUcmltAEluZGV4T2YASW50MzIAQ29uY2F0AENvbm5lY3Rpb25zAGdldF9Db25uZWN0aW9u
cwBDb25uZWN0aW9uTWFuYWdlcgBGb3JtYXQAc2V0X0Nvbm5lY3Rpb25TdHJpbmcAVGFza0hvc3QA
RHRzUHJvcGVydGllcwBnZXRfUHJvcGVydGllcwBEdHNQcm9wZXJ0eQBTZXRWYWx1ZQBJRFRTRXZl
bnRzAFNhdmVUb1htbABTeXN0ZW0uRGF0YQBTeXN0ZW0uRGF0YS5TcWxDbGllbnQAU3FsQ29tbWFu
ZABTcWxDb25uZWN0aW9uAFN5c3RlbS5EYXRhLkNvbW1vbgBEYkNvbm5lY3Rpb24Ac2V0X0Nvbm5l
Y3Rpb24ARGJDb21tYW5kAENvbW1hbmRUeXBlAHNldF9Db21tYW5kVHlwZQBzZXRfQ29tbWFuZFRl
eHQAU3FsUGFyYW1ldGVyAERiUGFyYW1ldGVyAFBhcmFtZXRlckRpcmVjdGlvbgBzZXRfRGlyZWN0
aW9uAERiVHlwZQBzZXRfRGJUeXBlAFNxbFBhcmFtZXRlckNvbGxlY3Rpb24AZ2V0X1BhcmFtZXRl
cnMAU3FsRGF0YUFkYXB0ZXIARGF0YVNldABDb25uZWN0aW9uU3RhdGUAZ2V0X1N0YXRlAE9wZW4A
c2V0X1NlbGVjdENvbW1hbmQAU3FsRGF0YVJlYWRlcgBFeGVjdXRlUmVhZGVyAERiRGF0YVJlYWRl
cgBSZXBsYWNlAFRvVXBwZXIAQ29udGFpbnMAUmVhZABDbG9zZQBFbXB0eQBvcF9FcXVhbGl0eQBD
aGFyAFNwbGl0AGdldF9Jbm5lck9iamVjdABNaWNyb3NvZnQuU3FsU2VydmVyLlNRTFRhc2sATWlj
cm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuRXhlY3V0ZVNRTFRhc2sARXhlY3V0ZVNRTFRhc2sA
SURUU1BhcmFtZXRlckJpbmRpbmdzAGdldF9QYXJhbWV0ZXJCaW5kaW5ncwBJRFRTUGFyYW1ldGVy
QmluZGluZwBEYXRlVGltZQBnZXRfTm93AEdldEJpbmRpbmcAc2V0X0R0c1ZhcmlhYmxlTmFtZQBQ
YXJhbWV0ZXJEaXJlY3Rpb25zAHNldF9QYXJhbWV0ZXJEaXJlY3Rpb24Ac2V0X0RhdGFUeXBlAHNl
dF9QYXJhbWV0ZXJOYW1lAHNldF9QYXJhbWV0ZXJTaXplAG9wX0luZXF1YWxpdHkAUHJlY2VkZW5j
ZUNvbnN0cmFpbnRzAGdldF9QcmVjZWRlbmNlQ29uc3RyYWludHMAUHJlY2VkZW5jZUNvbnN0cmFp
bnQATWFpblBpcGUASURUU1BpcGVsaW5lMTAwAElEVFNDb21wb25lbnRNZXRhRGF0YUNvbGxlY3Rp
b24xMDAAZ2V0X0NvbXBvbmVudE1ldGFEYXRhQ29sbGVjdGlvbgBJRFRTQ29tcG9uZW50TWV0YURh
dGExMDAATmV3AHNldF9Db21wb25lbnRDbGFzc0lEAENNYW5hZ2VkQ29tcG9uZW50V3JhcHBlcgBJ
bnN0YW50aWF0ZQBJRFRTRGVzaWdudGltZUNvbXBvbmVudDEwMABQcm92aWRlQ29tcG9uZW50UHJv
cGVydGllcwBJRFRTUnVudGltZUNvbm5lY3Rpb25Db2xsZWN0aW9uMTAwAGdldF9SdW50aW1lQ29u
bmVjdGlvbkNvbGxlY3Rpb24AZ2V0X0NvdW50AElEVFNSdW50aW1lQ29ubmVjdGlvbjEwMABEdHND
b252ZXJ0AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRFRTUnVudGltZVdyYXAATWljcm9zb2Z0LlNxbFNl
cnZlci5EdHMuUnVudGltZS5XcmFwcGVyAElEVFNDb25uZWN0aW9uTWFuYWdlcjEwMABHZXRFeHRl
bmRlZEludGVyZmFjZQBzZXRfQ29ubmVjdGlvbk1hbmFnZXIAZ2V0X0lEAHNldF9Db25uZWN0aW9u
TWFuYWdlcklEAElEVFNDdXN0b21Qcm9wZXJ0eTEwMABTZXRDb21wb25lbnRQcm9wZXJ0eQBBY3F1
aXJlQ29ubmVjdGlvbnMAUmVpbml0aWFsaXplTWV0YURhdGEAUmVsZWFzZUNvbm5lY3Rpb25zADxQ
cml2YXRlSW1wbGVtZW50YXRpb25EZXRhaWxzPntBQzlGNjMyOS1DRDAwLTRENjEtQTgwOC1FRjBF
RjdBQTUxNUF9AFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAERpY3Rpb25hcnlgMgAkJG1ldGhv
ZDB4NjAwMDAwNy0xAFRyeUdldFZhbHVlACQkbWV0aG9kMHg2MDAwMDA3LTIASURUU1BhdGhDb2xs
ZWN0aW9uMTAwAGdldF9QYXRoQ29sbGVjdGlvbgBJRFRTUGF0aDEwMABJRFRTT3V0cHV0Q29sbGVj
dGlvbjEwMABnZXRfT3V0cHV0Q29sbGVjdGlvbgBJRFRTT3V0cHV0MTAwAElEVFNJbnB1dENvbGxl
Y3Rpb24xMDAAZ2V0X0lucHV0Q29sbGVjdGlvbgBJRFRTSW5wdXQxMDAAQXR0YWNoUGF0aEFuZFBy
b3BhZ2F0ZU5vdGlmaWNhdGlvbnMASURUU1ZpcnR1YWxJbnB1dDEwMABHZXRWaXJ0dWFsSW5wdXQA
SURUU1ZpcnR1YWxJbnB1dENvbHVtbkNvbGxlY3Rpb24xMDAAZ2V0X1ZpcnR1YWxJbnB1dENvbHVt
bkNvbGxlY3Rpb24ASURUU091dHB1dENvbHVtbkNvbGxlY3Rpb24xMDAAZ2V0X091dHB1dENvbHVt
bkNvbGxlY3Rpb24AU3lzdGVtLkNvbGxlY3Rpb25zAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IA
Z2V0X0N1cnJlbnQAZ2V0X0xpbmVhZ2VJRABJRFRTSW5wdXRDb2x1bW4xMDAARFRTVXNhZ2VUeXBl
AFNldFVzYWdlVHlwZQBEVFNJbnNlcnRQbGFjZW1lbnQASW5zZXJ0T3V0cHV0AFNldE91dHB1dFBy
b3BlcnR5AE1vdmVOZXh0AElEaXNwb3NhYmxlAERpc3Bvc2UASURUU0V4dGVybmFsTWV0YWRhdGFD
b2x1bW5Db2xsZWN0aW9uMTAwAGdldF9FeHRlcm5hbE1ldGFkYXRhQ29sdW1uQ29sbGVjdGlvbgBz
ZXRfSXNVc2VkAHNldF9IYXNTaWRlRWZmZWN0cwAkJG1ldGhvZDB4NjAwMDAwNy0zAExpc3RgMQBU
b0FycmF5AFByZWRpY2F0ZWAxAEFycmF5AEZpbmQASXNOdWxsT3JFbXB0eQBJRFRTSW5wdXRDb2x1
bW5Db2xsZWN0aW9uMTAwAGdldF9JbnB1dENvbHVtbkNvbGxlY3Rpb24ASURUU0N1c3RvbVByb3Bl
cnR5Q29sbGVjdGlvbjEwMABnZXRfQ3VzdG9tUHJvcGVydHlDb2xsZWN0aW9uAHNldF9WYWx1ZQBJ
RFRTT3V0cHV0Q29sdW1uMTAwAHNldF9FeHRlcm5hbE1ldGFkYXRhQ29sdW1uSUQARFRTUm93RGlz
cG9zaXRpb24Ac2V0X0Vycm9yUm93RGlzcG9zaXRpb24Ac2V0X1RydW5jYXRpb25Sb3dEaXNwb3Np
dGlvbgBEYXRhVHlwZQBTZXREYXRhVHlwZVByb3BlcnRpZXMAc2V0X01hcHBlZENvbHVtbklEACQk
bWV0aG9kMHg2MDAwMDA3LTQAJCRtZXRob2QweDYwMDAwMDctNQBUb0xvd2VyACQkbWV0aG9kMHg2
MDAwMDA3LTYASW5zZXJ0T3V0cHV0Q29sdW1uQXQAZ2V0X0RhdGFUeXBlAGdldF9MZW5ndGgAZ2V0
X0NvZGVQYWdlACQkbWV0aG9kMHg2MDAwMDA3LTcAU2V0SW5wdXRDb2x1bW5Qcm9wZXJ0eQBTZXRP
dXRwdXRDb2x1bW5Qcm9wZXJ0eQAkJG1ldGhvZDB4NjAwMDAwNy04ACQkbWV0aG9kMHg2MDAwMDA3
LTkAJCRtZXRob2QweDYwMDAwMDctMTAAc2V0X0lzU29ydGVkAHNldF9Tb3J0S2V5UG9zaXRpb24A
JCRtZXRob2QweDYwMDAwMDctMTEAJCRtZXRob2QweDYwMDAwMDctMTIAc2V0X0NvbnRhY3RJbmZv
ACQkbWV0aG9kMHg2MDAwMDA3LTEzAGdldF9Tb3J0S2V5UG9zaXRpb24AJCRtZXRob2QweDYwMDAw
MDctMTQAJCRtZXRob2QweDYwMDAwMDctMTUAQ29udmVydABUb0ludDMyAElEVFNFeHRlcm5hbE1l
dGFkYXRhQ29sdW1uMTAwAEdldElucHV0Q29sdW1uQnlMaW5lYWdlSUQATWFwSW5wdXRDb2x1bW4A
c2V0X1Rhc2tSZXN1bHQARXhjZXB0aW9uAElEVFNPYmplY3QxMDAAX1Z0YmxHYXAxXzQAU3lzdGVt
LlJ1bnRpbWUuSW50ZXJvcFNlcnZpY2VzAERpc3BJZEF0dHJpYnV0ZQBwYnN0ck5hbWUAX1Z0YmxH
YXAyXzIAX1Z0YmxHYXAzXzMAX1Z0YmxHYXA0XzUATmFtZQBMZW5ndGgATGluZWFnZUlEAENvZGVQ
YWdlAFNvcnRLZXlQb3NpdGlvbgBHdWlkQXR0cmlidXRlAFR5cGVJZGVudGlmaWVyQXR0cmlidXRl
AENvbUltcG9ydEF0dHJpYnV0ZQBJRFRTT2JqZWN0TW9kZWwxMDAAQ29DbGFzc0F0dHJpYnV0ZQBf
VnRibEdhcDFfMQBDb21wb25lbnRNZXRhRGF0YUNvbGxlY3Rpb24AUGF0aENvbGxlY3Rpb24ASUVu
dW1lcmFibGUASW5kZXgAX1Z0YmxHYXAxXzIASXRlbQBEZWZhdWx0TWVtYmVyQXR0cmlidXRlAGdl
dF9EZXNjcmlwdGlvbgBwYnN0ckRlc2NyaXB0aW9uAGdldF9Db21wb25lbnRDbGFzc0lEAGJzdHJD
b21wb25lbnRDbGFzc0lEAF9WdGJsR2FwM18xAF9WdGJsR2FwNF8yMQBnZXRfQ29udGFjdEluZm8A
cGJzdHJDb250YWN0SW5mbwBEZXNjcmlwdGlvbgBDb21wb25lbnRDbGFzc0lEAElucHV0Q29sbGVj
dGlvbgBPdXRwdXRDb2xsZWN0aW9uAEN1c3RvbVByb3BlcnR5Q29sbGVjdGlvbgBSdW50aW1lQ29u
bmVjdGlvbkNvbGxlY3Rpb24AQ29udGFjdEluZm8AbE91dHB1dElEAGxPdXRwdXRDb2x1bW5JbmRl
eABic3RyTmFtZQBic3RyRGVzY3JpcHRpb24AbElucHV0SUQAcElEVFNWaXJ0dWFsSW5wdXRPYmpl
Y3QAbExpbmVhZ2VJRABlVXNhZ2VUeXBlAFByb3BlcnR5TmFtZQB2VmFsdWUAX1Z0YmxHYXAyXzEA
bElucHV0Q29sdW1uSUQAbE91dHB1dENvbHVtbklEAGVJbnNlcnRQbGFjZW1lbnQAX1Z0YmxHYXA0
XzYAcFRyYW5zYWN0aW9uAF9WdGJsR2FwNV8xAGxFeHRlcm5hbE1ldGFkYXRhQ29sdW1uSUQAQ291
bnQAX1Z0YmxHYXAxXzgAZ2V0X0Nvbm5lY3Rpb25NYW5hZ2VySUQAcGJzdHJDb25uZWN0aW9uTWFu
YWdlcklEAGdldF9Db25uZWN0aW9uTWFuYWdlcgBwcElEVFNDb25uZWN0aW9uTWFuYWdlcgBDb25u
ZWN0aW9uTWFuYWdlcklEAHB2VmFsdWUAVmFsdWUAX1Z0YmxHYXAxXzMAX1Z0YmxHYXAxXzEyAHBJ
RFRTT3V0cHV0AHBJRFRTSW5wdXQAc2V0X0lEAHBJRABfVnRibEdhcDFfMTQAX1Z0YmxHYXAyXzUA
Z2V0X0lzU29ydGVkAHBiSXNTb3J0ZWQASUQAT3V0cHV0Q29sdW1uQ29sbGVjdGlvbgBJc1NvcnRl
ZABfVnRibEdhcDFfNgBnZXRfSGFzU2lkZUVmZmVjdHMAcGJIYXNTaWRlRWZmZWN0cwBfVnRibEdh
cDNfMTEASGFzU2lkZUVmZmVjdHMASW5wdXRDb2x1bW5Db2xsZWN0aW9uAEV4dGVybmFsTWV0YWRh
dGFDb2x1bW5Db2xsZWN0aW9uAFZpcnR1YWxJbnB1dENvbHVtbkNvbGxlY3Rpb24AVVRfUkVBRE9O
TFkAVVRfUkVBRFdSSVRFAFVUX0lHTk9SRUQASVBfQkVGT1JFAElQX0FGVEVSAGdldF9Jc1VzZWQA
cGJJc1VzZWQASXNVc2VkAF9WdGJsR2FwMl8xMQBfVnRibEdhcDJfNgBfVnRibEdhcDNfMgBnZXRf
TWFwcGVkQ29sdW1uSUQAcGxNYXBwZWRDb2x1bW5JRABfVnRibEdhcDRfMQBwbFNvcnRLZXlQb3Np
dGlvbgBfVnRibEdhcDVfNABlRGF0YVR5cGUAbExlbmd0aABsUHJlY2lzaW9uAGxTY2FsZQBsQ29k
ZVBhZ2UAZ2V0X0Vycm9yUm93RGlzcG9zaXRpb24AcGVEaXNwb3NpdGlvbgBnZXRfVHJ1bmNhdGlv
blJvd0Rpc3Bvc2l0aW9uAF9WdGJsR2FwNl8yAGdldF9FeHRlcm5hbE1ldGFkYXRhQ29sdW1uSUQA
cGxFeHRlcm5hbE1ldGFkYXRhQ29sdW1uSUQATWFwcGVkQ29sdW1uSUQARXJyb3JSb3dEaXNwb3Np
dGlvbgBUcnVuY2F0aW9uUm93RGlzcG9zaXRpb24ARXh0ZXJuYWxNZXRhZGF0YUNvbHVtbklEAFJE
X05vdFVzZWQAUkRfSWdub3JlRmFpbHVyZQBSRF9SZWRpcmVjdFJvdwBSRF9GYWlsQ29tcG9uZW50
AERUX0VNUFRZAERUX05VTEwARFRfSTIARFRfSTQARFRfUjQARFRfUjgARFRfQ1kARFRfREFURQBE
VF9CT09MAERUX0RFQ0lNQUwARFRfSTEARFRfVUkxAERUX1VJMgBEVF9VSTQARFRfSTgARFRfVUk4
AERUX0ZJTEVUSU1FAERUX0dVSUQARFRfQllURVMARFRfU1RSAERUX1dTVFIARFRfTlVNRVJJQwBE
VF9EQkRBVEUARFRfREJUSU1FAERUX0RCVElNRVNUQU1QAERUX0RCVElNRTIARFRfREJUSU1FU1RB
TVBPRkZTRVQARFRfSU1BR0UARFRfVEVYVABEVF9OVEVYVABEVF9EQlRJTUVTVEFNUDIARFRfQllS
RUZfSTIARFRfQllSRUZfSTQARFRfQllSRUZfUjQARFRfQllSRUZfUjgARFRfQllSRUZfQ1kARFRf
QllSRUZfREFURQBEVF9CWVJFRl9CT09MAERUX0JZUkVGX0RFQ0lNQUwARFRfQllSRUZfSTEARFRf
QllSRUZfVUkxAERUX0JZUkVGX1VJMgBEVF9CWVJFRl9VSTQARFRfQllSRUZfSTgARFRfQllSRUZf
VUk4AERUX0JZUkVGX0ZJTEVUSU1FAERUX0JZUkVGX0dVSUQARFRfQllSRUZfTlVNRVJJQwBEVF9C
WVJFRl9EQkRBVEUARFRfQllSRUZfREJUSU1FAERUX0JZUkVGX0RCVElNRVNUQU1QAERUX0JZUkVG
X0RCVElNRTIARFRfQllSRUZfREJUSU1FU1RBTVBPRkZTRVQARFRfQllSRUZfREJUSU1FU1RBTVAy
AElEVFNFeGVjdXRhYmxlMTAwAElEVFNJbmZvRXZlbnRzMTAwAFNUXzBjZWYyOWE5MzkzZjRlNGM4
ZGRhMDIzZDkxMDUyNmU1LmNzcHJvai5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMAAAB/
UwBUAF8AMABjAGUAZgAyADkAYQA5ADMAOQAzAGYANABlADQAYwA4AGQAZABhADAAMgAzAGQAOQAx
ADAANQAyADYAZQA1AC4AYwBzAHAAcgBvAGoALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMA
bwB1AHIAYwBlAHMAAB1TAFQATwBDAEsAOgBTAEUAUQBVAEUATgBDAEUAACVTAGUAcQB1AGUAbgBj
AGUAIABDAG8AbgB0AGEAaQBuAGUAcgAAE1MAUQBMAF8AUQB1AGUAcgB5AAANUwBFAEwARQBDAFQA
AAEAC0UAeABlAGMAIAAAC08ATABFAEQAQgAAGU8ATABFAEQAQgAgAFMAbwB1AHIAYwBlAACBDVAA
cgBvAHYAaQBkAGUAcgA9AFMAUQBMAE8ATABFAEQAQgAuADEAOwBEAGEAdABhACAAUwBvAHUAcgBj
AGUAPQAxADcAMgAuADIANQAuADEANgA0AC4ANgAzADsASQBuAGkAdABpAGEAbAAgAEMAYQB0AGEA
bABvAGcAPQBEAE0AXwBNAGUAdABhAGQAYQB0AGEAOwBUAHIAdQBzAHQAZQBkAF8AQwBvAG4AbgBl
AGMAdABpAG8AbgAgAD0AIABGAGEAbABzAGUAOwAgAFUAcwBlAHIAIABJAEQAPQBzAGEAOwBQAGEA
cwBzAHcAbwByAGQAPQBQAGEAcwBzAHcAbwByAGQAMQAyADMAOwAAG1MAVABPAEMASwA6AFMAUQBM
AFQAYQBzAGsAAAlOAGEAbQBlAAAjRQB4AGUAYwB1AHQAZQAgAFAAcgBvAGMAZQBkAHUAcgBlAAAX
RABlAHMAYwByAGkAcAB0AGkAbwBuAAAVQwBvAG4AbgBlAGMAdABpAG8AbgAAJVMAcQBsAFMAdABh
AHQAZQBtAGUAbgB0AFMAbwB1AHIAYwBlAAAnUABhAGMAawBhAGcAZQBTAGEAdgBlAEwAbwBjAGEA
dABpAG8AbgAACy4AZAB0AHMAeAAAGU0AZQB0AGEARABhAHQAYQBDAG8AbgBuAABPWwBkAGIAbwBd
AC4AWwBBAFQATQBUAE4AXwBHAEUAVABfAEMATwBOAE4ARQBDAFQASQBPAE4AXwBEAEUAVABBAEkA
TABTAF8AUwBQAF0AABNDAGwAaQBlAG4AdABfAEkARAAAFUAAQwBsAGkAZQBuAHQAXwBJAEQAABdA
AFAAcgBvAGoAZQBjAHQAXwBJAEQAABVQAHIAbwBqAGUAYwB0AF8ASQBEAAAZQABUAGUAbQBwAGwA
YQB0AGUAXwBJAGQAABdUAGUAbQBwAGwAYQB0AGUAXwBJAGQAACVAAFAASwBHAF8AUwBhAHYAZQBf
AEwAbwBjAGEAdABpAG8AbgAAGUAAUwB0AGEAdAB1AHMAXwBjAG8AZABlAAARQABNAGUAcwBzAGEA
ZwBlAAARQABUAG8AbwBsAF8ASQBEAAAPVABvAG8AbABfAEkARAAAE1MAUgBDAF8AUQB1AGUAcgB5
AAAVVAByAGEAbgBzAF8AdAB5AHAAZQAAAyAAABNNAEUAUgBHAEUASgBPAEkATgAAFVMAUgBDAF8A
UQB1AGUAcgB5ADIAAA1MAE8ATwBLAFUAUAAAE0wASwBQAF8AUQB1AGUAcgB5AAAXTABLAFAAXwBD
AG8AbAB1AG0AbgBzAAATRABTAFQAXwBUAGEAYgBsAGUAABtUAGUAbQBwAGwAYQB0AGUAXwBOAGEA
bQBlAAATVABhAHMAawBfAG4AYQBtAGUAABVUAHIAYQBuAHMAXwBSAHUAbABlAAArRABTAFQAXwBD
AG8AbgBuAGUAYwB0AGkAbwBuAF8AUwB0AHIAaQBuAGcAACVTAG8AdQByAGMAZQBfAEMAbwBuAG4A
XwBTAHQAcgBpAG4AZwAAa3MAZQBsAGUAYwB0ACAAVAB5AHAAZQAgAEYAUgBPAE0AIABFAFQATABf
AFQARQBNAFAATABBAFQARQBfAE0AUwAgAFcASABFAFIARQAgAFQAZQBtAHAAbABhAHQAZQBfAEkA
RAAgAD0AIAAACVQAeQBwAGUAABFEAEEAVABBAFQAWQBQAEUAAClQAHIAbwB2AGkAZABlAHIAPQBT
AFEATABPAEwARQBEAEIALgAxADsAAHlzAGUAbABlAGMAdAAgACcAMQAnACAAZgByAG8AbQAgAEkA
bgBmAG8AcgBtAGEAdABpAG8AbgBfAFMAYwBoAGUAbQBhAC4AVABhAGIAbABlAHMAIAB3AGgAZQBy
AGUAIABUAEEAQgBMAEUAXwBOAEEATQBFAD0AJwABAycAAUtbAGQAYgBvAF0ALgBbAEEAVABNAFQA
TgBfAEcARQBUAF8ARABBAFQAQQBUAFkAUABFAF8ARABFAFQAQQBJAEwAUwBfAFMAUABdAAAZQABU
AGEAYgBsAGUARQB4AGkAcwB0AHMAACNPAEwARQBEAEIAIABEAGUAcwB0AGkAbgBhAHQAaQBvAG4A
ACVTAFQATwBDAEsAOgBQAGkAcABlAGwAaQBuAGUAVABhAHMAawAAA04AACdWAF8AUwBvAHUAcgBj
AGUAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAJVQBzAGUAcgAAD1QARQBTAFQASQBOAEcAABVFAFgA
RQBDAFUAVABFAFMAUQBMAAAHUABSAEUAAAMkAAANUwBUAFIASQBOAEcAABFEAEEAVABFAFQASQBN
AEUAAAlEAEEAVABFAAADMAAADVUAcwBlAHIAOgA6AAANUwBPAFUAUgBDAEUAAANZAAAJRABGAFQA
XwAALUQAVABTAEEAZABhAHAAdABlAHIALgBPAGwAZQBEAGIAUwBvAHUAcgBjAGUAABdPAEwARQBE
AEIAUwBvAHUAcgBjAGUAABVBAGMAYwBlAHMAcwBNAG8AZABlAAAVUwBxAGwAQwBvAG0AbQBhAG4A
ZAAAF08AbABlAEQAQgBTAG8AdQByAGMAZQAAIUMATwBOAEQASQBUAEkATwBOAEEATABTAFAATABJ
AFQAABtEAEUAUgBJAFYARQBEAEMATwBMAFUATQBOAAAZQwBIAEEAUgBBAEMAVABFAFIATQBBAFAA
ABNBAEcARwBSAEUARwBBAFQARQAAEVIATwBXAEMATwBVAE4AVAAACVMATwBSAFQAADFTAE8AUgBU
ACYARQBMAEkATQBJAE4AQQBUAEUARABVAFAATABJAEMAQQBUAEUAUwAAEVUATgBJAE8ATgBBAEwA
TAAAC00ARQBSAEcARQAAGU8ATABFAEQAQgBDAE8ATQBNAEEATgBEAAATTQBVAEwAVABJAEMAQQBT
AFQAACVFAHgAZQBjAHUAdABlACAAUAByAG8AYwBlAGQAdQByAGUAXwAAO0QAVABTAFQAcgBhAG4A
cwBmAG8AcgBtAC4AQwBvAG4AZABpAHQAaQBvAG4AYQBsAFMAcABsAGkAdAAAHUYAaQBsAHQAZQBy
AF8AUgBvAHUAdABlAHIAXwAAb0UAdgBhAGwAdQBhAHQAZQBzACAAYQBuAGQAIABkAGkAcgBlAGMA
dABzACAAcgBvAHcAcwAgAGkAbgAgAGEAIABkAGEAdABhAHMAZQB0ACAAYgBhAHMAZQBkACAAYQAg
AGMAbwBsAHUAbQBuAC4AACFDAG8AbgBkAGkAdABpAG8AbgBhAGwAUwBwAGwAaQB0AAAbRABlAHIA
aQB2AGUAZABDAG8AbAB1AG0AbgAAGUMAaABhAHIAYQBjAHQAZQByAE0AYQBwAAATQQBnAGcAcgBl
AGcAYQB0AGUAAA1MAG8AbwBrAHUAcAAAEVIAbwB3AEMAbwB1AG4AdAAACVMAbwByAHQAABFVAG4A
aQBvAG4AQQBsAGwAAAtNAGUAcgBnAGUAABNNAGUAcgBnAGUASgBvAGkAbgAAE00AdQBsAHQAaQBD
AGEAcwB0AAADWwAAA10AAB9FAHYAYQBsAHUAYQB0AGkAbwBuAE8AcgBkAGUAcgAAJUYAcgBpAGUA
bgBkAGwAeQBFAHgAcAByAGUAcwBzAGkAbwBuAAA1RABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBE
AGUAcgBpAHYAZQBkAEMAbwBsAHUAbQBuAAApRABlAHIAaQB2AGUAZABDAG8AbABUAHIAYQBuAHMA
ZgBvAHIAbQBfAACAhU8AdgBlAHIAcgBpAGQAZQAgAHQAaABlACAAbwByAGcAaQBuAGEAbAAgAGMA
bwBsAHUAbQBuACAAewAwAH0AIAB3AGkAdABoACAATwBUAEgARQBSAFMAIABpAGYAIAB0AGgAZQAg
AHMAdAByAGkAbgBnACAAaQBzACAATgBVAEwATAAuAAAVRQB4AHAAcgBlAHMAcwBpAG8AbgAAM0QA
VABTAFQAcgBhAG4AcwBmAG8AcgBtAC4AQwBoAGEAcgBhAGMAdABlAHIATQBhAHAAADFjAGEAcABp
AHQAYQBsAGkAcwBlACAAYQBsAGwAIABpAG4AaQB0AGkAYQBsAHMAXwAAL2MAYQBwAGkAdABhAGwA
aQBzAGUAIABhAGwAbAAgAGkAbgBpAHQAaQBhAGwAcwAALUQAVABTAFQAcgBhAG4AcwBmAG8AcgBt
AC4AQQBnAGcAcgBlAGcAYQB0AGUAABVBAGcAZwByAGUAZwBhAHQAZQBfAAALYwBvAHUAbgB0AAAR
YwBvAHUAbgB0AGEAbABsAAAbYwBvAHUAbgB0AGQAaQBzAHQAaQBuAGMAdAAAB3MAdQBtAAAHYQB2
AGcAAAdtAGkAbgAAB20AYQB4AAAnQQBnAGcAcgBlAGcAYQB0AGkAbwBuAEMAbwBsAHUAbQBuAEkA
ZAAAH0EAZwBnAHIAZQBnAGEAdABpAG8AbgBUAHkAcABlAAALSQBzAEIAaQBnAAA1QQBnAGcAcgBl
AGcAYQB0AGkAbwBuAEMAbwBtAHAAYQByAGkAcwBvAG4ARgBsAGEAZwBzAAAnRABUAFMAVAByAGEA
bgBzAGYAbwByAG0ALgBMAG8AbwBrAHUAcAAAD04ATwBNAEEAVABDAEgAAAMjAAAPIABXAEgARQBS
AEUAIAAACyAAYQBuAGQAIAAAD0wAbwBvAGsAdQBwAF8AABNDAGEAYwBoAGUAVAB5AHAAZQAAH04A
bwBNAGEAdABjAGgAQgBlAGgAYQB2AGkAbwByAAAHSQBOAF8AACtKAG8AaQBuAFQAbwBSAGUAZgBl
AHIAZQBuAGMAZQBDAG8AbAB1AG0AbgAACWYAcgBvAG0AAAN+AAAvQwBvAHAAeQBGAHIAbwBtAFIA
ZQBmAGUAcgBlAG4AYwBlAEMAbwBsAHUAbQBuAAArRABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBS
AG8AdwBDAG8AdQBuAHQAACFnAGUAdAAgAHIAbwB3ACAAYwBvAHUAbgB0AGUAcgBfAAAhZwBlAHQA
cwAgAHIAbwB3ACAAYwBvAHUAbgB0AGUAcgAAGVYAYQByAGkAYQBiAGwAZQBOAGEAbQBlAAAjRABU
AFMAVAByAGEAbgBzAGYAbwByAG0ALgBTAG8AcgB0AAAdUwBvAHIAdABUAHIAYQBuAHMAZgBvAHIA
bQBfAAAbUwBvAHIAdABjAG8AbQBwAG8AbgBlAG4AdAAACUQARQBTAEMAACVOAGUAdwBTAG8AcgB0
AEsAZQB5AFAAbwBzAGkAdABpAG8AbgAAJ0UAbABpAG0AaQBuAGEAdABlAEQAdQBwAGwAaQBjAGEA
dABlAHMAACtEAFQAUwBUAHIAYQBuAHMAZgBvAHIAbQAuAFUAbgBpAG8AbgBBAGwAbAAAJVUAbgBp
AG8AbgAgAEEAbABsACAAYwBvAGwAdQBtAG4AcwBfAAAlRABUAFMAVAByAGEAbgBzAGYAbwByAG0A
LgBNAGUAcgBnAGUAACVNAGUAcgBnAGUAIABBAGwAbAAgAGMAbwBsAHUAbQBuAHMAXwAAM0QAVABT
AFQAcgBhAG4AcwBmAG8AcgBtAC4ATwBMAEUARABCAEMAbwBtAG0AYQBuAGQAAB9PAEwARQAgAEQA
QgAgAEMAbwBtAG0AYQBuAGQAXwAAGU8ATABFAEQAQgBTAG8AdQByAGMAZQAxAAAbTwBMAEUARABC
ACAAUwBvAHUAcgBjAGUAMgAACUYAVQBMAEwAAAtJAE4ATgBFAFIAAA1yAG8AdwBfAGkAZAAAEU8A
UgBEAEUAUgAgAEIAWQAAFSAATwByAGQAZQByACAAYgB5ACAAACVNAGUAcgBnAGUAUwBvAHIAdABU
AHIAYQBuAHMAZgBvAHIAbQAAC1MAbwByAHQAMQAALUQAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4A
TQBlAHIAZwBlAEoAbwBpAG4AAAttAGUAcgBnAGUAABFKAG8AaQBuAFQAeQBwAGUAAC1EAFQAUwBU
AHIAYQBuAHMAZgBvAHIAbQAuAE0AdQBsAHQAaQBjAGEAcwB0AAAVTQB1AGwAdABpAGMAYQBzAHQA
XwAAE00AdQBsAHQAaQBjAGEAcwB0AAAxRABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBEAGEAdABh
AEMAbwBuAHYAZQByAHQAADNEAGEAdABhACAAQwBvAG4AdgBlAHIAcwBpAG8AbgAgAEMAbwBtAHAA
bwBuAGUAbgB0AAAtRABhAHQAYQBDAG8AbgB2AGUAcgB0ACAAQwBvAG0AcABvAG4AZQBuAHQAXwAA
FUMAbwBwAHkAQwBvAGwAdQBtAG4AAIHRUwBlAGwAZQBjAHQAIABDAE8ATABVAE0ATgBfAE4AQQBN
AEUALABEAEEAVABBAF8AVABZAFAARQAsAEkAcwBuAHUAbABsACgAQwBIAEEAUgBBAEMAVABFAFIA
XwBNAEEAWABJAE0AVQBNAF8ATABFAE4ARwBUAEgALAAwACkAIABBAHMAIABDAEgAQQBSAEEAQwBU
AEUAUgBfAE0AQQBYAEkATQBVAE0AXwBMAEUATgBHAFQASAAsAEkAcwBuAHUAbABsACgATgBVAE0A
RQBSAEkAQwBfAFAAUgBFAEMASQBTAEkATwBOACwAMAApACAAQQBzACAATgBVAE0ARQBSAEkAQwBf
AFAAUgBFAEMASQBTAEkATwBOACwASQBzAG4AdQBsAGwAKABOAFUATQBFAFIASQBDAF8AUwBDAEEA
TABFACwAMAApACAAQQBzACAATgBVAE0ARQBSAEkAQwBfAFMAQwBBAEwARQAgAGYAcgBvAG0AIABJ
AG4AZgBvAHIAbQBhAHQAaQBvAG4AXwBTAGMAaABlAG0AYQAuAEMATwBMAFUATQBOAFMAIAB3AGgA
ZQByAGUAIABUAEEAQgBMAEUAXwBOAEEATQBFAD0AJwABF0MATwBMAFUATQBOAF8ATgBBAE0ARQAA
E0QAQQBUAEEAXwBUAFkAUABFAAAxQwBIAEEAUgBBAEMAVABFAFIAXwBNAEEAWABJAE0AVQBNAF8A
TABFAE4ARwBUAEgAACNOAFUATQBFAFIASQBDAF8AUABSAEUAQwBJAFMASQBPAE4AABtOAFUATQBF
AFIASQBDAF8AUwBDAEEATABFAAAPdgBhAHIAYwBoAGEAcgAACWMAaABhAHIAABFuAHYAYQByAGMA
aABhAHIAAA9uAHUAbQBlAHIAaQBjAAALZgBsAG8AYQB0AAARZABhAHQAZQB0AGkAbQBlAAAJZABh
AHQAZQAAD2kAbgB0AGUAZwBlAHIAAAdpAG4AdAAADWIAaQBnAGkAbgB0AAARcwBtAGEAbABsAGkA
bgB0AAAPdABpAG4AeQBpAG4AdAAAB2IAaQB0AAA1UwBvAHUAcgBjAGUASQBuAHAAdQB0AEMAbwBs
AHUAbQBuAEwAaQBuAGUAYQBnAGUASQBEAAA3RABUAFMAQQBkAGEAcAB0AGUAcgAuAE8AbABlAEQA
YgBEAGUAcwB0AGkAbgBhAHQAaQBvAG4AACNPAEwARQBEAEIARABlAHMAdABpAG4AYQB0AGkAbwBu
AF8AABVPAHAAZQBuAFIAbwB3AHMAZQB0AAAfRgBhAHMAdABMAG8AYQBkAE8AcAB0AGkAbwBuAHMA
ADNUAEEAQgBMAE8AQwBLACwAQwBIAEUAQwBLAF8AQwBPAE4AUwBUAFIAQQBJAE4AVABTAABBRABh
AHQAYQBDAG8AbgB2AGUAcgB0ACAAQwBvAG0AcABvAG4AZQBuAHQAXwBNAHUAbAB0AGkAQwBhAHMA
dABfAAADXwAAI0UAcgByAG8AcgBQAGEAYwBrAGEAZwBlAC4AZAB0AHMAeAAAKWOfrADNYU2oCO8O
96pRWgAIt3pcVhk04IkIiYRdzYCAzJEDBhIVAwYSGQMgAAEEAAASFQQAABIZBQABARIZBAgAEhUE
CAASGQMGEgwEAAASDAQIABIMAgYIAwYRFAQAAAAABAEAAAAEIAEBDgQgAQEIBgABElERVQQgABJZ
BiACAQ4SWQQHARIVBSABARFhCAEAAgAAAAAAAwAAAQMGEhwEIAECDgMgAA4GIAICDhF1BCAAEn0G
IAESgIEOBCABAQIFIAASgJEFIAASgJUGIAESgJkcAyAAHAQgAQgOBCABAggFAAIODg4FIAASgKEG
IAESgKUOBgACDg4dHAUgABKArQYgARKAsRwFIAIBHBwGAAMODg4OCSADAQ4SeRKAtQYgAQESgL0G
IAEBEYDJBSACAQ4cBiABARGA1QYgAQERgNkFIAASgN0IIAESgM0SgM0FIAARgOkGIAEBEoC5BSAA
EoDtBCABHA4FIAIODg4DIAACAgYOBQACAg4OCSAEEoCZDgIOHAYgAR0OHQMFIAASgP0FIAASgQEF
AAARgQUGIAESgQEIBiABARGBCQQgAQEcBSAAEoENCyACEoEREoCBEoCBBCAAEigEIAASLAQgABIw
BCAAEjgDIAAIBSABEjwcCAABEoE5EoClBSABARJABiACEkQOHAgGFRKBRQIOCAcVEoFFAg4IByAC
ARMAEwEIIAICEwAQEwEFAAIOHBwEIAASTAQgABJQBCAAElQFIAESWBwEIAASXAUgARJgHAcgAgES
WBJgBCAAEmQEIAASaAQgABJsBSAAEoFtBSABEhwcCiAEEnAIEmQIEXQHIAISWBF4CAcgAxJECA4c
BCAAEnwGFRKBhQEOBSABARMABSAAHRMABhUSgYkBDgUgAgEcGA8QAQIeAB0eABUSgYkBHgADCgEO
BAABAg4FIAASgIAFAAIODhwFIAASgIQFIAESRBwFIAASgIgGIAEBEYCMBCAAEkQKIAUBEYCQCAgI
CAkgBBKAiAgIDg4FIAARgJAIIAQSRAgIDhwGIAESgIgcBSABEiwcBAABCBwGIAESgJQcBiACCAgR
dAUgARJwCAggAxKAlAgICAUAAQ4dHIIpB4EZEnkSgIUSgI0OCBKAgRKApRKAqRKAuRKAvRKAzRKA
zRKAzRKAzRKAzRKAzRKAzRKA4RKA7Q4ODg4ODg4ODg4IEoC5EoC9EoDtEoDhDhKAuRKAvRKA7RKA
4QgSgLkSgL0SgM0SgM0SgM0SgM0SgM0SgM0SgOESgKUSgKUSgIEOCB0ODggSgKkOEoD5DhKBARKA
qRIgEiwSNBIsEiwSLBIsEiwSLBIsEiwSLBIsEiwSLBIsEiwSLB0OHQ4OHQ4ODggIEoCBEoCpEoD5
Dg4ODhKBARIwEmASZBJoElgICA4dDg4SHBJYEjASYBJkEmgSRB0OFRKBhQEODg4ODg4SHAgOFRKB
iQEOEhgScBKAiBJEEjASYBJkEmgSWBIcEjASYBJkElgSaBIcDg4IEoCICBJEEoCICBJEEjASYBJk
EmgODhIcEnAdDhJYDg4ODhKAiBIwDg4SMB0OEnASZAgOEhwIEhwSMBIwEjASNBIsCA4dDh0OEjAS
ZBJwEhwSHBIwEmASZAgSHBJgEmQSHBJEEkQSWAgSMBJgEmQIHQ4OEiwSMBKAuRKAvRKA4RKA7QgO
DggICBJkElgIEoCIEiwSMBJgEmQSYBJkEoCAEnwSbBKAiBKAlBJwDggdDg4SLBIwEoC5EoC9EoDh
EoDtCA4OCAgIEmQSWAgSgIgSLBIwEmASZBJgEmQSgIASfBJsEoCIEoCUEnAOHQMdDggOCBKBbRKB
fRwdDggdHAgBAA0AAAAAAAETCAEAZQAAAAAACAEAZgAAAAAACAEAbAAAAAAACAEAcwAAAAAACAEA
egAAAAAAAygADgUoABGAkAMoAAgpAQAkRDVEREI2MkMtQkJDRi00NzlGLUJBQzItNDM4MkE5NTBC
MzU2AAApAQAkNDEwRTkxRTktMkM0NS00ODdBLTg1MUEtNUIzREZFNzQ3MzI5AAAFIAEBElFfAQBa
U3lzdGVtLk9iamVjdCwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFs
LCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5AAAIAQAMAAAAAAABHAQoABIoBCgAEkwI
AQAAAAAAAAABGwgBAA4AAAAAAAUoARIsHCkBACQwNzA3NTBGMi02MzFELTRFM0UtOEZFNS1CRTZC
MUNERjI2MzIAAAkBAARJdGVtAAAIAQBnAAAAAAAIAQBoAAAAAAAIAQBpAAAAAAAIAQByAAAAAAAI
AQCFAAAAAAAEKAASXAQoABJUBSgAEoCEBCgAEjgpAQAkODg3QkQwNjEtODJENC00RjA2LUEyMjIt
MzM3RDQyRTdGODk2AAApAQAkRkY1REQzRjEtOTlDMS00RkZCLUIwOTctMUIxQjJCOUU5QjJEAAAI
AQALAAAAAAAIAQAQAAAAAAAIAQARAAAAAAAIAQATAAAAAAAIAQAUAAAAAAAIAQAVAAAAAAAIAQAX
AAAAAAAIAQAeAAAAAAABGQgBAB8AAAAAAAgBACEAAAAAAAUoARI8HCkBACREOTQyODg5My04QTk1
LTRERkQtODI2Qy00MDM1RTU3MjhDNjAAAAQgABJABCgAEkApAQAkRDdGRDFERkMtMzY0RS00N0Iz
LTk1OUEtQzY2QzFEREIzREE1AAApAQAkRTQ2OThBN0YtOUU0MC00N0FELUE2QzYtNzg0QkZBQ0Ew
Q0E5AAADKAAcKQEAJEEwODM2RTVFLTUwQ0YtNEIyOC05NTc3LUUyNTE3MzcyNUYwQgAAKQEAJDZB
MzMxRUJELUE5NTAtNDNCNS04M0EyLTAzMzU4NUY0MTdGNwAAKQEAJEUyNUUyMzRDLTBGOUEtNEEy
RC05M0E4LTFBQTA5N0U2MzU1QwAABSgBElgcKQEAJEU3MDA3MDZDLUYyM0MtNDAwQS1CRDYyLUFD
NzYwQjExQjk4NQAACAEAagAAAAAACAEAbwAAAAAABCgAEmwDKAACKQEAJDg5QjhFMzA2LTdDMkEt
NDcyRi04ODUwLTcyMDJCNERBRjE3QgAABSgBEmAcKQEAJDZBRjQxNTg0LTcxRjItNDAxRS1CMTNF
LUM2NzhCOTJEM0E1QQAACAEAdAAAAAAABSgAEoCABCgAEnwpAQAkNzMwRDcyMkMtMkUwMC00QzdB
LTg2NDEtMEQzNzgzNTNBOTQ0AAAEKAASaCkBACQ5OTQ0RjY4NC00OUM0LTQzNTQtQUI3Ri1FRTQy
MkE2NTBFMEUAAAgBAPz///8AAICrLAAAgKVTeXN0ZW0uUnVudGltZS5JbnRlcm9wU2VydmljZXMu
Q3VzdG9tTWFyc2hhbGVycy5FbnVtZXJhdG9yVG9FbnVtVmFyaWFudE1hcnNoYWxlciwgQ3VzdG9t
TWFyc2hhbGVycywgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRv
a2VuPWIwM2Y1ZjdmMTFkNTBhM2EABSgBEhwcKQEAJDc3Rjg0MDAyLUM4NzgtNEIzOC04NDJELUIx
RTI1QTlGQkNDOAAABigBEoCIHCkBACRCQzk0MkZFQy0yQ0VBLTQ2NjUtQTI5MS0zODIwMEEwQzk1
OUYAAAgBAGsAAAAAACkBACQxQzE5RDRGOC0xMDc1LTQyOUEtOUFEOS01N0IyQzNGNzE4ODQAAAMG
EXQEAgAAAAUgAgEODl8BACQwQjRBRjE4Qi0zNjk5LTQyODQtOUJGNy1DMjlEQkUzRDc4QkY1TWlj
cm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUuV3JhcHBlci5EVFNVc2FnZVR5cGUAAAMGEXhl
AQAkMEI0QUYxOEItMzY5OS00Mjg0LTlCRjctQzI5REJFM0Q3OEJGO01pY3Jvc29mdC5TcWxTZXJ2
ZXIuRHRzLlBpcGVsaW5lLldyYXBwZXIuRFRTSW5zZXJ0UGxhY2VtZW50AAAGKAESgJQcKQEAJDI5
MEM4OEU5LTFBOTYtNEEyQS04RjQxLTQ1NEI0OEFDOTBBRQAAKQEAJDI0MjQ0RDQ4LTI3NjQtNEY3
OS04RTMzLTRDOUE3QjhENEUyRAAABSgBEkQcKQEAJDJEOTFENkY1LTM0OUUtNDUyRi04MEU0LUU3
NzkzRjA4Qzg0MwAACAEAbgAAAAAABSAAEYCMCAEAdgAAAAAABSgAEYCMKQEAJDNDN0ZDQkUwLTgy
ODctNEI5Ny1CNjMyLTdDNjBDNjNEQUFGNAAABAYRgIwEBAAAAGQBACQwQjRBRjE4Qi0zNjk5LTQy
ODQtOUJGNy1DMjlEQkUzRDc4QkY6TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUuV3Jh
cHBlci5EVFNSb3dEaXNwb3NpdGlvbgAABAYRgJAEAwAAAAQFAAAABAYAAAAEBwAAAAQLAAAABA4A
AAAEEAAAAAQRAAAABBIAAAAEEwAAAAQUAAAABBUAAAAEQAAAAARIAAAABIAAAAAEgQAAAASCAAAA
BIMAAAAEhQAAAASGAAAABIcAAAAEkQAAAASSAAAABC0BAAAELgEAAAQvAQAABDABAAAEAkAAAAQD
QAAABARAAAAEBUAAAAQGQAAABAdAAAAEC0AAAAQOQAAABBBAAAAEEUAAAAQSQAAABBNAAAAEFEAA
AAQVQAAABEBAAAAESEAAAASDQAAABIVAAAAEhkAAAASHQAAABIhAAAAEiUAAAASKQAAAWgEAJEI0
NTJEQTVBLTU0RTItNEY2My04RDYxLTFCMTkzNzQ0OTA0RDBNaWNyb3NvZnQuU3FsU2VydmVyLkR0
cy5SdW50aW1lLldyYXBwZXIuRGF0YVR5cGUAACkBACQ1Q0NEMTQ0RS01MUFELTQxMUYtQTlENC1F
OUFFNTAxNjUwRjQAACkBACQyMDNFMjRCRC01MjAzLTRDNzYtQUZDNy03Qzg1NDVFQkExQTAAACkB
ACQ0RTg1MzU3NC1DMkUzLTRDQUUtQjc5MS0yRDRBNUQxRDBDOTgAACkBACQ0OTA1MDcyNy0xRjM0
LTQ0QkItODA2My0xNTJGRUZFRTREMDAAACkBACQyQzY0RjgzQi04RTdGLTRBQzYtOTEzOC03NUJG
MzYzMDAyRUUAABABAAtGaXJlV2FybmluZwAARwEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC4w
AQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0LwEAKlNUXzBjZWYyOWE5
MzkzZjRlNGM4ZGRhMDIzZDkxMDUyNmU1LmNzcHJvagAABQEAAAAADQEACEhleGF3YXJlAAAeAQAZ
Q29weXJpZ2h0IEAgSGV4YXdhcmUgMjAxNQAACAEACAAAAAAAHgEAAQBUAhZXcmFwTm9uRXhjZXB0
aW9uVGhyb3dzAQDEBwEAAAAAAAAAAADeBwEAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0AcBAAAA
AAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAA
AAABAAAAAABIAAAAWCABADQEAAAAAAAAAAAAADQENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJ
AE4ARgBPAAAAAAC9BO/+AAABAAAAAQBObp4XAAABAE5unhc/AAAAAAAAAAQAAAACAAAAAAAAAAAA
AAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABh
AHQAaQBvAG4AAAAAAAAAsASUAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABwAwAA
AQAwADAAMAAwADAANABiADAAAAA0AAkAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAEgAZQB4
AGEAdwBhAHIAZQAAAAAAgAArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMA
VABfADAAYwBlAGYAMgA5AGEAOQAzADkAMwBmADQAZQA0AGMAOABkAGQAYQAwADIAMwBkADkAMQAw
ADUAMgA2AGUANQAuAGMAcwBwAHIAbwBqAAAAAABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4A
AAAAADEALgAwAC4ANgAwADQANgAuADIAOAAyADMAOAAAAAAAgAAvAAEASQBuAHQAZQByAG4AYQBs
AE4AYQBtAGUAAABTAFQAXwAwAGMAZQBmADIAOQBhADkAMwA5ADMAZgA0AGUANABjADgAZABkAGEA
MAAyADMAZAA5ADEAMAA1ADIANgBlADUALgBjAHMAcAByAG8AagAuAGQAbABsAAAAAABYABoAAQBM
AGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIABIAGUA
eABhAHcAYQByAGUAIAAyADAAMQA1AAAAiAAvAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBh
AG0AZQAAAFMAVABfADAAYwBlAGYAMgA5AGEAOQAzADkAMwBmADQAZQA0AGMAOABkAGQAYQAwADIA
MwBkADkAMQAwADUAMgA2AGUANQAuAGMAcwBwAHIAbwBqAC4AZABsAGwAAAAAAHgAKwABAFAAcgBv
AGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMABjAGUAZgAyADkAYQA5ADMAOQAzAGYANABlADQA
YwA4AGQAZABhADAAMgAzAGQAOQAxADAANQAyADYAZQA1AC4AYwBzAHAAcgBvAGoAAAAAAEQADwAB
AFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANgAwADQANgAuADIAOAAyADMA
OAAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANgAw
ADQANgAuADIAOAAyADMAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAwA
AADwNwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="132,42"
          Id="Package\Script Task"
          TopLeft="42.5,42.084905660377" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>