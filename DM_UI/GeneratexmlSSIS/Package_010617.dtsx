<?xml version="1.0"?>
<DTS:Executable
  DTS:refId="Package" xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:CreatorName="CORP\30655"
  DTS:CreatorComputerName="EBII433F1"
  DTS:CreationDate="10/20/2015 4:24:32 PM"
  DTS:PackageType="5"
  DTS:VersionBuild="715"
  DTS:VersionGUID="{702803C0-CF58-43C0-B736-7C02ECEE42F1}"
  DTS:LastModifiedProductVersion="11.0.2100.60"
  DTS:LocaleID="1033"
  DTS:ObjectName="Automaton Baloise"
  DTS:DTSID="{198E3A4F-BAC7-4807-83FB-DF7F43DA7D6B}"
  DTS:CreationName="SSIS.Package.3">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="Client_ID"
      DTS:DTSID="{F01730AE-32E1-4C58-AB5D-58E4AD2C5778}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">0001</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="6789"
      DTS:ObjectName="DeltaLoad"
      DTS:DTSID="{39E56EE0-0825-4E8B-857E-75FEA47026FC}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="3">1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="MetaDataConn"
      DTS:DTSID="{A2C33035-7E29-47A6-82DA-8A4431108F08}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="PackageSaveLocation"
      DTS:DTSID="{36355568-C0C5-4826-93CB-B4896BAE7B05}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">C:\\Users\\33278\\Documents\\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="Project_ID"
      DTS:DTSID="{1E9BC050-74F4-4B5D-AA43-71FE0A7751E0}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">HX_PRJ01</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="Template_Id"
      DTS:DTSID="{8959BC96-9361-462A-BF0B-0DC710241D23}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="3">10012</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="6789"
      DTS:ObjectName="Tool_ID"
      DTS:DTSID="{84F685A0-3130-4708-94F2-9B63C83C5D39}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="3">1</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:ThreadHint="0"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:DTSID="{0FB6E796-420D-42A2-B2EC-131CA826D9AB}"
      DTS:Description="Script Task"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">
      <DTS:Variables>
        <DTS:Variable
          DTS:Namespace="User"
          DTS:IncludeInDebugDump="2345"
          DTS:ObjectName="SQL_Query"
          DTS:DTSID="{84BB6820-2750-4A71-B3AE-1058F447EAE1}"
          DTS:CreationName="">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:EventHandlers>
        <DTS:EventHandler
          DTS:refId="Package\Script Task.EventHandlers[OnError]"
          DTS:EventID="153018280"
          DTS:EventName="OnError"
          DTS:LocaleID="-1"
          DTS:DTSID="{23D1B18D-B13B-49C9-AA69-393F797F2639}"
          DTS:CreationName="OnError">
          <DTS:Variables>
            <DTS:Variable
              DTS:Namespace="System"
              DTS:IncludeInDebugDump="6789"
              DTS:ObjectName="Propagate"
              DTS:DTSID="{80507D87-01E9-4131-B926-67FD8315BDFF}"
              DTS:Description="The propagate property of the event"
              DTS:CreationName="">
              <DTS:VariableValue
                DTS:DataType="11">-1</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:Executables />
        </DTS:EventHandler>
      </DTS:EventHandlers>
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_0cef29a9393f4e4c8dda023d910526e5"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::SQL_Query,User::Client_ID,User::DeltaLoad,User::MetaDataConn,User::PackageSaveLocation,User::Project_ID,User::Template_Id,User::Tool_ID">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="st_0cef29a9393f4e4c8dda023d910526e5.csproj"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_0cef29a9393f4e4c8dda023d910526e5.csproj</RootNamespace>
    <AssemblyName>ST_0cef29a9393f4e4c8dda023d910526e5.csproj</AssemblyName>
    <ProjectGuid>{C0FCFF17-7581-4520-BCC1-8ED2A17FE389}</ProjectGuid>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>x86</PlatformTarget>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Microsoft.SqlServer.Dts.Design, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="devenv.exe" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebug519a594f-da24-4629-a875-35e4ddafb7de/357e17d4-4b90-4aaf-a2e5-26b2b96e4e1a&quot;" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
  <PropertyGroup>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Data;
using System.Data.SqlClient;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using System.Data.Sql;
using Microsoft.SqlServer.Dts.Tasks;
using Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask;
using ExecuteSQLTask=Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask;
using Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.Connections;

using System.Data.SqlTypes;
using Microsoft.SqlServer.Server;
using System.IO;
using System.Collections.Generic;

namespace ST_e9c9cb3a5ac449d293ddeb5242adec78.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/
        public void Main()
        {
            Package p = new Package();
            Sequence exec_SEQ = (Sequence)p.Executables.Add("STOCK:SEQUENCE");
            exec_SEQ.FailPackageOnFailure = true;
            exec_SEQ.FailParentOnFailure = true;
            exec_SEQ.Name = @"Sequence Container";
            exec_SEQ.Description = @"Sequence Container";
            Application Automaton_app = new Application();
            try
            {
                string SQL_Query = Dts.Variables["SQL_Query"].Value.ToString().Trim();
                int test = SQL_Query.IndexOf("SELECT");
                Executable exec = null;

                if (!SQL_Query.Equals(""))
                {
                    if (test.Equals(-1))
                    {
                        SQL_Query = "Exec " + SQL_Query;
                    }
                    ConnectionManager cm = p.Connections.Add("OLEDB");
                    cm.Name = "OLEDB Source";
                    cm.ConnectionString = string.Format("Provider=SQLOLEDB.1;Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False; User ID=sa;Password=Password123;");
                    exec = exec_SEQ.Executables.Add("STOCK:SQLTask");
                    TaskHost th = exec as TaskHost;

                    th.Properties["Name"].SetValue(th, "Execute Procedure");
                    th.Properties["Description"].SetValue(th, "Execute Procedure");
                    th.Properties["Connection"].SetValue(th, "OLEDB Source");
                    //th.Properties["SqlStatementSource"].SetValue(th, "Truncate table dbo.Employee_TGT");
                    th.Properties["SqlStatementSource"].SetValue(th, SQL_Query);
                    //Automaton_app.SaveToSqlServer(p, null, "172.25.164.63", "sa", "Password123");
                    //Automaton_app.SaveToSqlServer(p, null, "172.25.121.105", null, null);

                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + SQL_Query + ".dtsx", p, null);
                }
                else
                {
                    SqlCommand Sqlcmd1 = new SqlCommand();
                    SqlConnection SqlConn1 = new SqlConnection();                    
                    
                    //SqlConn1.ConnectionString = @"Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;";
                    SqlConn1.ConnectionString = Dts.Variables["MetaDataConn"].Value.ToString().Trim();
                    Sqlcmd1.Connection = SqlConn1;
                    Sqlcmd1.CommandType = CommandType.StoredProcedure;
                    Sqlcmd1.CommandText = "[dbo].[ATMTN_GET_CONNECTION_DETAILS_SP]";
                    SqlParameter param1;
                    string Testdata = Dts.Variables["Client_ID"].Value.ToString().Trim();
                    param1 = new SqlParameter("@Client_ID", Dts.Variables["Client_ID"].Value.ToString().Trim());
                    param1.Direction = ParameterDirection.Input;
                    param1.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param1);

                    SqlParameter param2;
                    param2 = new SqlParameter("@Project_ID", Dts.Variables["Project_ID"].Value.ToString().Trim());
                    param2.Direction = ParameterDirection.Input;
                    param2.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param2);

                    SqlParameter param3;
                    param3 = new SqlParameter("@Template_Id", Dts.Variables["Template_Id"].Value.ToString().Trim());
                    param3.Direction = ParameterDirection.Input;
                    param3.DbType = DbType.Int32;
                    Sqlcmd1.Parameters.Add(param3);

                    SqlParameter param4;
                    param4 = new SqlParameter("@PKG_Save_Location", Dts.Variables["PackageSaveLocation"].Value.ToString().Trim());
                    param4.Direction = ParameterDirection.Input;
                    param4.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param4);

                    SqlParameter param5;
                    param5 = new SqlParameter("@Status_code", "");
                    param5.Direction = ParameterDirection.Output;
                    param5.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param5);

                    SqlParameter param6;
                    param6 = new SqlParameter("@Message", "");
                    param6.Direction = ParameterDirection.Output;
                    param6.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param6);

                    SqlParameter param7;
                    param7 = new SqlParameter("@Tool_ID", Dts.Variables["Tool_ID"].Value.ToString().Trim());
                    param7.Direction = ParameterDirection.Input;
                    param7.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param7);

                    SqlDataAdapter sqlAdp1 = new SqlDataAdapter();
                    DataSet dsCols1 = new DataSet();
                    if (SqlConn1.State == ConnectionState.Closed)
                        SqlConn1.Open();
                    sqlAdp1.SelectCommand = Sqlcmd1;

                    SqlDataReader rdr1 = null;
                    rdr1 = Sqlcmd1.ExecuteReader();
                    string SRC_Query = null;
                    string SRC_Query1 = null;
                    string LKP_Query = null;
                    string DST_Table = null;
                    string Template_Name = null;
                    string SRC_Table = null;
                    string TransRule = null;
                    string TransType = null;
                    string LKP_Columns = null;
                    string SRC_ConnectionString = null;
                    string DST_Connection_String = null;
                    int LookupOutput = 0;
                    
                    while (rdr1.Read())
                    {
                        SRC_Query = (string)rdr1["SRC_Query"];
                        TransType = rdr1["Trans_type"].ToString().Replace(" ", "").ToUpper();
                        if (TransType.Contains("MERGEJOIN"))
                        {
                            SRC_Query1 = (string)rdr1["SRC_Query2"];
                        }
                        if (TransType.Contains("LOOKUP"))
                        {
                            LKP_Query = (string)rdr1["LKP_Query"];
                            LKP_Columns = (string)rdr1["LKP_Columns"];
                        }                        
                        DST_Table = (string)rdr1["DST_Table"];                      
                        Template_Name = (string)rdr1["Template_Name"];
                        SRC_Table = (string)rdr1["Task_name"];
                        TransRule = (string)rdr1["Trans_Rule"];
                        DST_Connection_String = (string)rdr1["DST_Connection_String"];
                        SRC_ConnectionString = (string)rdr1["Source_Conn_String"];
                    }
                    
                    SqlConn1.Close();

                    

                    int DeltaLoad = (int)Dts.Variables["DeltaLoad"].Value;
                    
                    //Source Connection
                    ConnectionManager cm = p.Connections.Add("OLEDB");
                    cm.Name = "OLEDB Source";
                    cm.ConnectionString = SRC_ConnectionString;

                    //Destination Connection
                    ConnectionManager cm1 = p.Connections.Add("OLEDB");
                    cm1.Name = "OLEDB Destination";
                    cm1.ConnectionString = DST_Connection_String;
                    Executable e = exec_SEQ.Executables.Add("STOCK:PipelineTask");
                    if (DeltaLoad == 0)
                    {
                        PrecedenceConstraint pcFileTasks = p.PrecedenceConstraints.Add((Executable)exec, (Executable)e);
                    }

                    string ExecSQL_First = "N";
                    int parameterCount = 0;
                    string[] parameterList = null;
                    string SRC_Target = null;
                    int DType = 130;
                    Variable SQLParam;
                    p.Variables.Add("V_SourceProductName", false, "User", "TESTING");
                    

                    if (TransType.Split('~')[0].Trim() == "EXECUTESQL" && TransRule.Split('~')[0].Trim().Split('#')[0].Trim().ToUpper() == "PRE")
                    {
                        exec = exec_SEQ.Executables.Add("STOCK:SQLTask");
                        TaskHost th = exec as TaskHost;

                        string SQLConnection = null;


                        ExecuteSQLTask EXST = (ExecuteSQLTask)th.InnerObject;

                        SRC_Target = TransRule.Split('~')[0].Trim().Split('#')[2].Trim();

                        parameterList = null;
                        if (SRC_Target.Contains("$"))
                        {
                            parameterList = SRC_Target.Split('$')[1].Trim().Split(',');
                            SRC_Target = SRC_Target.Split('$')[0].Trim().ToUpper();
                        }


                        if (parameterList != null)
                        {

                            foreach (string parameter in parameterList)
                            {
                                EXST.ParameterBindings.Add();
                               
                                switch (parameter.Split('.')[0].ToUpper().Trim())
                                {
                                    case "STRING":
                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", "0");
                                        DType = 130;
                                        break;
                                    case "DATETIME":
                                    case "DATE":

                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", DateTime.Now);
                                        DType = 133;
                                        break;
                                    default:
                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", 0);
                                        DType = 3;
                                        break;
                                }


                                IDTSParameterBinding parameterBinding = EXST.ParameterBindings.GetBinding(parameterCount);
                                parameterBinding.DtsVariableName = "User::" + parameter.Split('.')[1];

                                parameterBinding.ParameterDirection = ParameterDirections.Output;
                                //parameterBinding.DataType = Dtype;
                                parameterBinding.DataType = DType;
                                //parameterBinding.DataType = (int)OleDBDataTypes.VARCHAR;
                                parameterBinding.ParameterName = parameterCount;
                                parameterBinding.ParameterSize = -1;
                                parameterCount++;

                            }

                        }




                        if (TransRule.Split('~')[0].Trim().Split('#')[2].Trim().ToUpper().Split('$')[0].Trim() == "SOURCE")
                        {
                            SQLConnection = "OLEDB Source";
                        }
                        else
                        {
                            SQLConnection = "OLEDB Destination";
                        }
                        th.Properties["Name"].SetValue(th, "Execute Procedure");
                        th.Properties["Description"].SetValue(th, "Execute Procedure");
                        th.Properties["Connection"].SetValue(th, SQLConnection);
                        th.Properties["SqlStatementSource"].SetValue(th, TransRule.Split('~')[0].Split('#')[1]);
                        
                        if (TransType.Split('~')[1].Trim() != "EXECUTESQL")
                        {
                            PrecedenceConstraint pcFileTasks1 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec, (Executable)e);
                        }
                        ExecSQL_First = "Y";
                    }
                    TaskHost thMainPipe = e as TaskHost;
                    MainPipe dataFlowTask = thMainPipe.InnerObject as MainPipe;

                    thMainPipe.Name = "DFT_" + DST_Table; 
                    
                    IDTSComponentMetaData100 component = dataFlowTask.ComponentMetaDataCollection.New();
                    component.ComponentClassID = "DTSAdapter.OleDbSource";
                    IDTSDesigntimeComponent100 instance = component.Instantiate();
                    instance.ProvideComponentProperties();
                    component.Name = "OLEDBSource";
                    component.Description = "OLEDBSource";
                    
                    //Connect the Execute SQL task to the data flow task

                    if (component.RuntimeConnectionCollection.Count > 0)
                    {
                        component.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);
                        component.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;
                    }
                                   
                    instance.SetComponentProperty("AccessMode", 2);
                    instance.SetComponentProperty("SqlCommand", SRC_Query);

                    instance.AcquireConnections(null);
                    instance.ReinitializeMetaData();
                    instance.ReleaseConnections();
                    
                    IDTSComponentMetaData100 dataConditional_Split = null;
                    IDTSComponentMetaData100 data_DerivedColumn = null;
                    IDTSComponentMetaData100 dataConvertComponent = null;
                    IDTSComponentMetaData100 aggregate = null;
                    IDTSComponentMetaData100 lookupComponent = null;
                    IDTSComponentMetaData100 componentUnionAll = null;
                    IDTSComponentMetaData100 RowCountComponent = null;
                    IDTSComponentMetaData100 sortWrapper = null;
                    IDTSComponentMetaData100 MergeSortWrapper = null;
                    IDTSComponentMetaData100 dataOLEDbCommand = null;
                    IDTSComponentMetaData100 componentMerge = null;
                    IDTSComponentMetaData100 mergeJoin = null;
                    IDTSComponentMetaData100 copyMapComponent = null;
                    IDTSComponentMetaData100 multiCastComponent = null;
                    IDTSComponentMetaData100 component1 = null;
                    IDTSComponentMetaData100 componentSCD = null;
                    string[] TransList = TransType.Split('~');
                    string[] RuleList = TransRule.Split('~');
                    string namelist = string.Empty;
                    string multiCast = "N";
                    String[] joinColumns = null;

                    string LastTrans = "OleDBSource";
                    string testsplit;
                    int condSplitCnt = 0;
                    string MulticastTargetTable = string.Empty;
                    
                    for (int i = 0; i < TransList.Length; i++)
                    {
                        if (ExecSQL_First == "Y")
                        {
                            i = i + 1;
                        }
                        testsplit = TransType.Split(',')[0].Trim();
                        RuleList[i] = RuleList[i].Trim();
                        switch (TransList[i])
                        {
                            case "EXECUTESQL":

                                Executable exec1 = exec_SEQ.Executables.Add("STOCK:SQLTask");
                                TaskHost th1 = exec1 as TaskHost;
                               
                                ExecuteSQLTask EST = (ExecuteSQLTask)th1.InnerObject;
                                parameterCount = 0;
                                string ExecProcName = "Execute Procedure_" + i;
                                string testSql = RuleList[i];
                                string ExecSql_query = RuleList[i].Split('#')[1];
                                string SQLConnection = null;
                                SRC_Target = RuleList[i].Split('#')[2];
                                
                                parameterList = null;
                                if (SRC_Target.Contains("$"))
                                {
                                    parameterList = SRC_Target.Split('$')[1].Trim().Split(',');
                                    SRC_Target = SRC_Target.Split('$')[0].Trim().ToUpper();
                                }

                                
                                if (parameterList != null)
                                {
                                    
                                    foreach (string parameter in parameterList)
                                    {
                                        EST.ParameterBindings.Add();

                                        switch (parameter.Split('.')[0].ToUpper().Trim())
                                        {
                                            case "STRING":
                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", "0");
                                                DType = 130;
                                                break;
                                            case "DATETIME":
                                            case "DATE":

                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", DateTime.Now);
                                                DType = 133;
                                                break;
                                            default:
                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", 0);
                                                DType = 3;
                                                break;
                                        }


                                        IDTSParameterBinding parameterBinding = EST.ParameterBindings.GetBinding(parameterCount);
                                        parameterBinding.DtsVariableName = "User::" + parameter.Split('.')[1];

                                        parameterBinding.ParameterDirection = ParameterDirections.Output;
                                        //parameterBinding.DataType = Dtype;
                                        parameterBinding.DataType = DType;
                                        //parameterBinding.DataType = (int)OleDBDataTypes.VARCHAR;
                                        parameterBinding.ParameterName = parameterCount;
                                        parameterBinding.ParameterSize = -1;
                                        parameterCount++;

                                    }

                                }

                                if (RuleList[i].Split('#')[2].Trim().ToUpper().Split('$')[0].Trim() == "SOURCE")
                                {
                                    SQLConnection = "OLEDB Source";
                                }
                                else
                                {
                                    SQLConnection = "OLEDB Destination";
                                }

                                th1.Properties["Name"].SetValue(th1, ExecProcName);
                                th1.Properties["Description"].SetValue(th1, "Execute Procedure");
                                th1.Properties["Connection"].SetValue(th1, SQLConnection);
                                th1.Properties["SqlStatementSource"].SetValue(th1, ExecSql_query);

                                if (ExecSQL_First == "Y" && RuleList[i].Split('#')[0].Trim().ToUpper() == "PRE")
                                {

                                    PrecedenceConstraint pcFileTasks2 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec, (Executable)exec1);
                                    PrecedenceConstraint pcFileTasks3 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec1, (Executable)e);
                                    ExecSQL_First = "N";
                                }
                                else
                                {
                                    PrecedenceConstraint pcFileTasks4 = exec_SEQ.PrecedenceConstraints.Add((Executable)e, (Executable)exec1);
                                }

                                break;
                            case "CONDITIONALSPLIT":
                                dataConditional_Split = dataFlowTask.ComponentMetaDataCollection.New();
                                dataConditional_Split.ComponentClassID = "DTSTransform.ConditionalSplit";
                                CManagedComponentWrapper data_Split_Wrapper = dataConditional_Split.Instantiate();
                                data_Split_Wrapper.ProvideComponentProperties();
                                dataConditional_Split.Name = "Filter_Router_"+i;
                                dataConditional_Split.Description = "Evaluates and directs rows in a dataset based a column.";

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 input = dataConditional_Split.InputCollection[0];
                                IDTSVirtualInput100 dataConvertVirtualInput = input.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 destinationVirtualInputColumns = dataConvertVirtualInput.VirtualInputColumnCollection;
                                IDTSOutput100 dataConvertOutput = dataConditional_Split.OutputCollection[0];
                                IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;

                                int sourceColumnLineageId;
                                int evalOrder = 0;

                                string get_name = "";
                                string[] CondRules = RuleList[i].Split('#');

                                //get_name = ConditionalSplit.Split('>')[0].Trim();
                                foreach (string rule in CondRules)
                                {
                                    foreach (IDTSVirtualInputColumn100 virtualInputColumn in destinationVirtualInputColumns)
                                    {
                                        get_name = virtualInputColumn.Name.ToString();
                                        string getname = "[" + get_name + "]";

                                        if (rule.Trim().ToUpper().Contains(get_name.ToUpper()))
                                        {
                                            sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                            data_Split_Wrapper.SetUsageType(input.ID, dataConvertVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READONLY);
                                            IDTSOutput100 splitOutput_1 = data_Split_Wrapper.InsertOutput(DTSInsertPlacement.IP_BEFORE, dataConditional_Split.OutputCollection[evalOrder].ID);
                                            data_Split_Wrapper.SetOutputProperty(splitOutput_1.ID, "EvaluationOrder", evalOrder);
                                            data_Split_Wrapper.SetOutputProperty(splitOutput_1.ID, "FriendlyExpression", rule.Trim());
                                            evalOrder++;
                                        }
                                    }
                                    
                                    condSplitCnt = evalOrder - 1;
                                }
                                LastTrans = "ConditionalSplit";
                                break;
                            case "DERIVEDCOLUMN":
                                data_DerivedColumn = dataFlowTask.ComponentMetaDataCollection.New();
                                data_DerivedColumn.ComponentClassID = "DTSTransform.DerivedColumn";
                                CManagedComponentWrapper DesignDerivedTransformColumns = data_DerivedColumn.Instantiate();
                                DesignDerivedTransformColumns.ProvideComponentProperties();
                                data_DerivedColumn.Name = "DerivedColTransform_" + i;

                                data_DerivedColumn.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
                                data_DerivedColumn.InputCollection[0].HasSideEffects = false;
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 DerivedColumnInput = data_DerivedColumn.InputCollection[0];
                                IDTSVirtualInput100 DerivedColumnVirtualInput = DerivedColumnInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 DerivedColumnVirtualInputColumns = DerivedColumnVirtualInput.VirtualInputColumnCollection;
                                IDTSCustomProperty100 ConcatProperty = null;
                                //RuleList[i] = RuleList[i] + "#ZZ_STATUS_CODE = \"P\"";


                                string[] DerColumns = new string[10]; //create 10 empty index in array terms




                                string[] RulesList = RuleList[i].Split('#');
                                //int DerColCount = 0;

                                List<string> ColCollection = new List<string>();
                                foreach (string Rulevalues in RulesList)
                                {
                                    string _val = string.Empty;
                                    _val = Rulevalues.Split('$')[0].Trim();
                                    ColCollection.Add(_val);
                                }

                                foreach (string RuleValue in RulesList)
                                {
                                    string newDerCol = "Y";
                                    string _v = string.Empty;
                                    _v = RuleValue.Split('$')[0].Trim();


                                    // Iterate through the virtual input column collection.
                                    foreach (IDTSVirtualInputColumn100 vColumn in DerivedColumnVirtualInputColumns)
                                    {


                                        for (int j = 0; j < RulesList.Length; j++)
                                        {


                                            //DerColumns[DerColCount] = vColumn.Name;
                                            //DerColCount++;
                                            if (vColumn.Name == _v)
                                            {
                                                IDTSInputColumn100 vCol = DesignDerivedTransformColumns.SetUsageType(DerivedColumnInput.ID, DerivedColumnVirtualInput, vColumn.LineageID, DTSUsageType.UT_READWRITE);
                                                break;
                                            }

                                        }


                                    }

                                    string[] ColumnCollection = ColCollection.ToArray();

                                    foreach (IDTSVirtualInputColumn100 vColumn in DerivedColumnVirtualInputColumns)
                                    {

                                        string ColName = Array.Find(ColCollection.ToArray(), element => element.Equals(vColumn.Name, StringComparison.Ordinal));
                                        if (string.IsNullOrEmpty(ColName))
                                        {
                                            IDTSInputColumn100 vCol = DesignDerivedTransformColumns.SetUsageType(DerivedColumnInput.ID, DerivedColumnVirtualInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                        }
                                    }

                                    foreach (IDTSInputColumn100 inputColumn in DerivedColumnInput.InputColumnCollection)
                                    {
                                        if (inputColumn.Name == RuleValue.Split('$')[0].Trim())
                                        {
                                            inputColumn.Description = string.Format("Override the orginal column {0} with OTHERS if the string is NULL.", inputColumn.Name);
                                            ConcatProperty = inputColumn.CustomPropertyCollection["Expression"];

                                            ConcatProperty.Name = "Expression";
                                            ConcatProperty.Value = RuleValue.Split('$')[1].Trim();

                                            ConcatProperty = inputColumn.CustomPropertyCollection["FriendlyExpression"];
                                            ConcatProperty.Name = "FriendlyExpression";
                                            ConcatProperty.Value = ConcatProperty.Value = RuleValue.Split('$')[1].Trim();
                                            newDerCol = "N";
                                        }
                                    }

                                    if (newDerCol == "Y")
                                    {
                                        IDTSOutputColumn100 ConCatCol = data_DerivedColumn.OutputCollection[0].OutputColumnCollection.New();
                                        ConCatCol.Name = RuleValue.Split('$')[0].Trim();
                                        ConCatCol.ExternalMetadataColumnID = 0;
                                        ConCatCol.ErrorRowDisposition = DTSRowDisposition.RD_FailComponent;
                                        ConCatCol.TruncationRowDisposition = DTSRowDisposition.RD_FailComponent;
                                        IDTSCustomProperty100 ConCatProp = ConCatCol.CustomPropertyCollection.New();
                                        ConCatCol.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                                        ConCatProp.Name = "Expression";
                                        ConCatProp.Value = RuleValue.Split('$')[1].Trim();
                                        ConCatProp = ConCatCol.CustomPropertyCollection.New();
                                        ConCatProp.Name = "FriendlyExpression";
                                        ConCatProp.Value = RuleValue.Split('$')[1].Trim();
                                        ConCatCol.MappedColumnID = 0;

                                    }
                                }

                                LastTrans = "DerivedColumn";

                                break;
                            case "CHARACTERMAP":
                                dataConvertComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                dataConvertComponent.ComponentClassID = "DTSTransform.CharacterMap";
                                dataConvertComponent.Name = "capitalise all initials_"+i;
                                dataConvertComponent.Description = "capitalise all initials";
                                CManagedComponentWrapper dataConvertWrapper = dataConvertComponent.Instantiate();
                                dataConvertWrapper.ProvideComponentProperties();
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 CharMapInput = dataConvertComponent.InputCollection[0];
                                IDTSVirtualInput100 CharMapDataConvertVirtualInput = dataConvertComponent.InputCollection[0].GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 CharMapDestinationVirtualInputColumns = CharMapDataConvertVirtualInput.VirtualInputColumnCollection;
                                IDTSOutput100 CharMapDataConvertOutput = dataConvertComponent.OutputCollection[0];
                                IDTSOutputColumnCollection100 CharMapDataConvertOutputColumns = CharMapDataConvertOutput.OutputColumnCollection;
                                //IDTSOutputColumn100 newOutputColumn;
                                foreach (IDTSVirtualInputColumn100 virtualInputColumn in CharMapDestinationVirtualInputColumns)
                                {
                                    get_name = virtualInputColumn.Name.ToString();
                                    IDTSInputColumn100 inputColumn = dataConvertWrapper.SetUsageType(CharMapInput.ID, CharMapDataConvertVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READONLY);
                                    
                                    if (RuleList[i].IndexOf(get_name) > 0)
                                    {
                                        sourceColumnLineageId = CharMapDataConvertVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                        dataConvertWrapper.SetUsageType(dataConvertComponent.InputCollection[0].ID, CharMapDataConvertVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READWRITE);
                                        //dataConvertWrapper.SetOutputColumnProperty(CharMapDataConvertOutput.ID, virtualInputColumn.ID, "MapFlags", 0);
                                        
                                        /*-------------Enable this code to add a new column into the data flow --------------------*/
                                        //newOutputColumn=dataConvertWrapper.InsertOutputColumnAt(CharMapDataConvertOutput.ID, 1, get_name, string.Empty);
                                        //newOutputColumn.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, 100, 0, 0, 1252);
                                        //newOutputColumn.MappedColumnID = 0;
                                        //dataConvertWrapper.SetOutputColumnProperty(CharMapDataConvertOutput.ID, newOutputColumn.ID, "InputColumnLineageID", sourceColumnLineageId);

                                        /*  MapColumns details
                                         -----------------------------
                                            Byte reversal (2)
                                            Full width (6)
                                            Half width (5)
                                            Hiragana (3)
                                            Katakana (4)
                                            Linguistic casing (7)
                                            Lowercase (0)
                                            Simplified Chinese (8)
                                            Traditional Chinese(9)
                                            Uppercase (1)*/

                                    }
                                }
                                LastTrans = "CharacterMap";
                                break;
                            case "AGGREGATE":
                                aggregate = dataFlowTask.ComponentMetaDataCollection.New();
                                aggregate.ComponentClassID = "DTSTransform.Aggregate";
                                CManagedComponentWrapper AggregateWrapper = aggregate.Instantiate();
                                AggregateWrapper.ProvideComponentProperties();
                                aggregate.Name = "Aggregate_" + i;
                                //AggregateWrapper.AcquireConnections(null);
                                AggregateWrapper.AcquireConnections(null);
                                AggregateWrapper.ReinitializeMetaData();
                                AggregateWrapper.ReleaseConnections();

                                //aggregate.InputCollection[0].InputColumnCollection.RemoveAll();
                                //aggregate.OutputCollection[0].OutputColumnCollection.RemoveAll();

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                }

                                IDTSInput100 AggregateInput = aggregate.InputCollection[0];
                                IDTSVirtualInput100 AggregateVirtualInput = AggregateInput.GetVirtualInput();
                                IDTSOutput100 AggregateOutputCollection = aggregate.OutputCollection[0];
                                IDTSInput100 AggregateInputCollection = aggregate.InputCollection[0];
                                IDTSVirtualInputColumnCollection100 AggregateVirtualInputColumns = AggregateVirtualInput.VirtualInputColumnCollection;

                                foreach (IDTSVirtualInputColumn100 virtualInputColumn in AggregateVirtualInputColumns)
                                {
                                    get_name = virtualInputColumn.Name.ToString();
                                    //AggregateWrapper.SetUsageType(AggregateInput.ID, AggregateVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READWRITE);
                                    IDTSInputColumn100 inputColumn = AggregateWrapper.SetUsageType(AggregateInput.ID, AggregateVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READONLY);

                                    //AggregateWrapper.SetInputColumnProperty(AggregateInput.ID, inputColumn.ID, "CopyFromReferenceColumn", virtualInputColumn);
                                    
                                    string ColumnName = null;
                                    if (RuleList[i].IndexOf(get_name) > 0)
                                    {
                                        ColumnName = RuleList[i].Split('=')[0].Trim();
                                        string RuleName = RuleList[i].Split('=')[1].Trim().Split('(')[0].Trim().ToLower();
                                        int AggregateProperty = 0;
                                        switch (RuleName)
                                        {
                                            case "count":
                                                AggregateProperty = 1;
                                                break;
                                            case "countall":
                                                AggregateProperty = 2;
                                                break;
                                            case "countdistinct":
                                                AggregateProperty = 3;
                                                break;
                                            case "sum":
                                                AggregateProperty = 4;
                                                break;
                                            case "max":
                                                AggregateProperty = 5;
                                                break;
                                            case "min":
                                                AggregateProperty = 6;
                                                break;
                                        }

                                        //AggregateWrapper.SetUsageType(AggregateInputCollection.ID, AggregateVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READWRITE);
                                        IDTSOutputColumn100 newOutputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, ColumnName, string.Empty);
                                        newOutputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                        newOutputColumn.MappedColumnID = 0;
                                        for (int x = 0; x < newOutputColumn.CustomPropertyCollection.Count; x++)
                                        {
                                            IDTSCustomProperty100 property = newOutputColumn.CustomPropertyCollection[x];
                                            switch (property.Name)
                                            {
                                                case "AggregationColumnId":
                                                    property.Value = virtualInputColumn.LineageID;
                                                    break;
                                                case "AggregationType":
                                                    property.Value = AggregateProperty;
                                                    break;
                                                case "IsBig":
                                                    property.Value = 0;
                                                    break;
                                                case "AggregationComparisonFlags":
                                                    property.Value = 0;
                                                    break;
                                            }
                                        }
                                        IDTSOutputColumn100 InputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, get_name, string.Empty);
                                        InputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                        InputColumn.MappedColumnID = 1;
                                        sourceColumnLineageId = AggregateVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                        for (int x = 0; x < InputColumn.CustomPropertyCollection.Count; x++)
                                        {
                                            IDTSCustomProperty100 property = InputColumn.CustomPropertyCollection[x];
                                            switch (property.Name)
                                            {
                                                case "AggregationColumnId":
                                                    property.Value = virtualInputColumn.LineageID;
                                                    break;
                                                case "AggregationType":
                                                    property.Value = 0;
                                                    break;
                                                case "IsBig":
                                                    property.Value = 0;
                                                    break;
                                                case "AggregationComparisonFlags":
                                                    property.Value = 0;
                                                    break;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        IDTSOutputColumn100 InputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, get_name, string.Empty);
                                        InputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                        for (int x = 0; x < InputColumn.CustomPropertyCollection.Count; x++)
                                        {
                                            IDTSCustomProperty100 property = InputColumn.CustomPropertyCollection[x];
                                            switch (property.Name)
                                            {
                                                case "AggregationColumnId":
                                                    property.Value = virtualInputColumn.LineageID;
                                                    break;
                                                case "AggregationType":
                                                    property.Value = 0;
                                                    break;
                                                case "IsBig":
                                                    property.Value = 0;
                                                    break;
                                                case "AggregationComparisonFlags":
                                                    property.Value = 0;
                                                    break;
                                            }
                                        }
                                    }
                                }

                                LastTrans = "Aggregate";
                                break;
                            case "LOOKUP":
                                lookupComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                lookupComponent.ComponentClassID = "DTSTransform.Lookup";

                                if(RuleList[i].Contains("$"))
                                {
                                    if (RuleList[i].Split('$')[1].Trim().Replace(" ","").ToUpper() == "NOMATCH")
                                    {
                                        LookupOutput = 1;
                                    }

                                    RuleList[i] = RuleList[i].Split('$')[0].Trim();
                                }

                                if (RuleList[i].Contains("#"))
                                {
                                    LKP_Query = LKP_Query + " WHERE " + RuleList[i].Split('#')[1].Trim();

                                    RuleList[i] = RuleList[i].Split('#')[0].Trim();
                                }
                                

                                
                                CManagedComponentWrapper lookupWrapper = lookupComponent.Instantiate();
                                lookupWrapper.ProvideComponentProperties();
                                lookupComponent.Name = "Lookup_" + i;
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], lookupComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                }
                                lookupComponent.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);

                                lookupComponent.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;

                                // Cache Type - Full = 0, Partial = 1, None = 2

                                lookupWrapper.SetComponentProperty("CacheType", 0);
                                lookupWrapper.SetComponentProperty("NoMatchBehavior", 1);// 1= Redirect rows to No Match output
                                lookupWrapper.SetComponentProperty("SqlCommand", LKP_Query);

                                // initialize metadata

                                lookupWrapper.AcquireConnections(null);
                                lookupWrapper.ReinitializeMetaData();
                                lookupWrapper.ReleaseConnections();

                                // Mark the columns we are joining on

                                IDTSInput100 lookupInput = lookupComponent.InputCollection[0];
                                IDTSInputColumnCollection100 lookupInputColumns = lookupInput.InputColumnCollection;
                                IDTSVirtualInput100 lookupVirtualInput = lookupInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 lookupVirtualInputColumns = lookupVirtualInput.VirtualInputColumnCollection;

                                // Note: join columns should be marked as READONLY

                                joinColumns = RuleList[i].Split('|');
                                foreach (string conditions in joinColumns)
                                {
                                    string columnName = conditions.Replace("IN_", "").Split('=')[1].Trim();
                                    IDTSVirtualInputColumn100 virtualColumn = lookupVirtualInputColumns[columnName];
                                    IDTSInputColumn100 inputColumn = lookupWrapper.SetUsageType(lookupInput.ID, lookupVirtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                    lookupWrapper.SetInputColumnProperty(lookupInput.ID, inputColumn.ID, "JoinToReferenceColumn", conditions.Replace("IN_", "").Split('=')[0].Trim());
                                }

                                string[] ReadWriteColumns = LKP_Query.Replace("from", "~").Split('~')[0].Replace("SELECT", "").Replace(" ", "").Split(',');
                                //var ReadWriteColumns = new string[] { "SNo" };
                                /* 
                                string columnName1;
                                foreach (string columnName in ReadWriteColumns)
                                {
                                    if(columnName.Contains("AS"))
                                    {
                                        columnName1 = columnName.Replace("AS", "~").Split('~')[1];
                                    }
                                    else
                                    {
                                        columnName1 = columnName;
                                    }
                                    IDTSVirtualInputColumn100 virtualColumn = lookupVirtualInputColumns[columnName1];
                                    IDTSInputColumn100 inputColumn = lookupWrapper.SetUsageType(lookupInput.ID, lookupVirtualInput, virtualColumn.LineageID, DTSUsageType.UT_READWRITE);

                                    lookupWrapper.SetInputColumnProperty(lookupInput.ID, inputColumn.ID, "CopyFromReferenceColumn", columnName1);
                                }                                 
                                */
                    
                                //LKP_New_Columns = "address,city,company_name,county,cust_code,email,first_name,phone1,phone2,state,zip,ZZ_STATUS_CODE";
                                string[] newColumns = LKP_Columns.Split(',');
                                IDTSOutput100 lookupMatchOutput = lookupComponent.OutputCollection[LookupOutput];
                                foreach (string sourceColumn in newColumns)
                                {
                                    if(!RuleList[i].Contains(sourceColumn))
                                    {
                                        //sourceColumn =  sourceColumn;
                                        string newColumnName = sourceColumn.Trim();
                                        string description = sourceColumn;

                                        // insert the new column
                                        IDTSOutputColumn100 outputColumn = lookupWrapper.InsertOutputColumnAt(lookupMatchOutput.ID, 0, newColumnName, description);
                                        outputColumn.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                                        lookupWrapper.SetOutputColumnProperty(lookupMatchOutput.ID, outputColumn.ID, "CopyFromReferenceColumn", sourceColumn);
                                    }
                                }

                                LastTrans = "Lookup";
                                break;

                            case "ROWCOUNT":
                                Variable Counter = p.Variables.Add(RuleList[i].Trim(), false, "User", 0);
                                RowCountComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                RowCountComponent.ComponentClassID = "DTSTransform.RowCount";
                                RowCountComponent.Name = "get row counter_"+i;
                                RowCountComponent.Description = "gets row counter";

                                CManagedComponentWrapper RowCountWrapper = RowCountComponent.Instantiate();
                                RowCountWrapper.ProvideComponentProperties();
                                RowCountWrapper.SetComponentProperty("VariableName", RuleList[i].Trim());

                                // Connect the source and the transform

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                }

                                LastTrans = "RowCount";
                                break;
                            case "SORT":
                            case "SORT&ELIMINATEDUPLICATES":
                                string SortColumn = RuleList[i].Split(' ')[0].Trim();
                                string SortType = RuleList[i].Split(' ')[1].Trim();
                                sortWrapper = dataFlowTask.ComponentMetaDataCollection.New();
                                
                                sortWrapper.ComponentClassID = "DTSTransform.Sort";
                                
                                CManagedComponentWrapper sortinstance = sortWrapper.Instantiate();
                                sortinstance.ProvideComponentProperties();
                                sortWrapper.Name = "SortTransform_"+i;
                                sortWrapper.Description = "Sortcomponent";

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], sortWrapper.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                }
                                string[] sortcolumns = SortColumn.Split(',');
                                IDTSInputColumn100 col = null;
                                IDTSVirtualInput100 vSortInput = sortWrapper.InputCollection[0].GetVirtualInput();
                                //IDTSVirtualInputColumn100 vColumn = null;
                                int sortPos = 1;
                                foreach (string SortColumn1 in sortcolumns)
                                {
                                    foreach (IDTSVirtualInputColumn100 vColumn in vSortInput.VirtualInputColumnCollection)
                                    {
                                        //if (SortColumn.Contains(col.Name))
                                        if (vColumn.Name == SortColumn1.Trim())
                                        {
                                            col = sortinstance.SetUsageType(sortWrapper.InputCollection[0].ID, vSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                            int sortPref;

                                            if (SortType.ToUpper() == "DESC")
                                            {
                                                sortPref = -1 * sortPos;
                                            }
                                            else
                                            {
                                                sortPref = sortPos;
                                            }
                                            if (col.CustomPropertyCollection.Count > 0)
                                            {
                                                sortinstance.SetInputColumnProperty(sortWrapper.InputCollection[0].ID, col.ID, "NewSortKeyPosition", sortPref);
                                                sortPos++;
                                            }
                                        }
                                    }
                                }
                                foreach (IDTSVirtualInputColumn100 vColumn in vSortInput.VirtualInputColumnCollection)
                                {
                                    if (!SortColumn.Contains(vColumn.Name))
                                    {
                                        col = sortinstance.SetUsageType(sortWrapper.InputCollection[0].ID, vSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                    }
                                }
                                if (TransList[i] == "SORT&ELIMINATEDUPLICATES")
                                {
                                    sortinstance.SetComponentProperty("EliminateDuplicates", 1);
                                }
                                else
                                {
                                    sortinstance.SetComponentProperty("EliminateDuplicates", 0);
                                }

                                LastTrans = "Sort";
                                break;
                            case "UNIONALL":
                                componentUnionAll = dataFlowTask.ComponentMetaDataCollection.New();
                                componentUnionAll.ComponentClassID = "DTSTransform.UnionAll";
                                CManagedComponentWrapper instanceUnionAll = componentUnionAll.Instantiate();
                                instanceUnionAll.ProvideComponentProperties();
                                componentUnionAll.Name = "Union All columns_"+i;                                

                                // connect path form source to destination
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                }

                                LastTrans = "UnionAll";
                                break;
                            case "MERGE":                               

                                componentMerge = dataFlowTask.ComponentMetaDataCollection.New();                   
                                componentMerge.ComponentClassID = "DTSTransform.Merge";
                                CManagedComponentWrapper instanceMerge = componentMerge.Instantiate();
                                instanceMerge.ProvideComponentProperties();
                                componentMerge.Name = "Merge All columns_"+i;
                                component1.OutputCollection[0].IsSorted = true;
                                component1.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;

                                // connect path form source to destination
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentMerge.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break; 
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                }
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component1.OutputCollection[0], componentMerge.InputCollection[1]);

                                LastTrans = "Merge";
                                break;

                            case "OLEDBCOMMAND":
                                dataOLEDbCommand = dataFlowTask.ComponentMetaDataCollection.New();

                                dataOLEDbCommand.ComponentClassID = "DTSTransform.OLEDBCommand";
                                CManagedComponentWrapper OLEDB_Wrapper = dataOLEDbCommand.Instantiate();
                                OLEDB_Wrapper.ProvideComponentProperties();
                                dataOLEDbCommand.Name = "OLE DB Command_"+i;                                

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    /*case "CopyColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(copyMapComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;*/
                    
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break; 
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                }
                                if (dataOLEDbCommand.RuntimeConnectionCollection.Count > 0)
                                {
                                    dataOLEDbCommand.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);
                                    dataOLEDbCommand.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                                }
                                OLEDB_Wrapper.SetComponentProperty("SqlCommand", RuleList[i].Trim());
                                LastTrans = "OLEDB";
                                break;
                            case "MERGEJOIN":
                                component1 = dataFlowTask.ComponentMetaDataCollection.New();

                                component1.ComponentClassID = "DTSAdapter.OleDbSource";
                                IDTSDesigntimeComponent100 instance1 = component1.Instantiate();
                                instance1.ProvideComponentProperties();
                                component1.Name = "OLEDBSource1";
                                component1.Description = "OLEDBSource1";
                                IDTSComponentMetaData100 MyComponentMetadata = dataFlowTask.ComponentMetaDataCollection["OLEDBSource1"];

                                MyComponentMetadata.Name = "OLEDB Source2";
                    
                                //Connect the Execute SQL task to the data flow task

                                if (component1.RuntimeConnectionCollection.Count > 0)
                                {
                                    component1.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);
                                    component1.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;
                                }

                                string MergeSortColumn = "row_id";
                                string[] MergeSortColumns = RuleList[i].Split('=');
                                string[] FirstColumn = MergeSortColumns[0].Split('.');
                                MergeSortColumn = FirstColumn[1];
                                if (!SRC_Query1.ToUpper().Contains("ORDER BY"))
                                {
                                    SRC_Query1 = SRC_Query1 + " Order by " + MergeSortColumn;
                                }
                                instance1.SetComponentProperty("AccessMode", 2);
                                instance1.SetComponentProperty("SqlCommand", SRC_Query1);
                                //instance1.SetComponentProperty("SqlCommand", "Select row_id, cust_code from Customer Order by Row_ID");

                                instance1.AcquireConnections(null);
                                instance1.ReinitializeMetaData();
                                instance1.ReleaseConnections();

                                MergeSortWrapper = dataFlowTask.ComponentMetaDataCollection.New();
                                MergeSortWrapper.ComponentClassID = "DTSTransform.Sort";
                                CManagedComponentWrapper MergeSortinstance = MergeSortWrapper.Instantiate();
                                MergeSortinstance.ProvideComponentProperties();
                                MergeSortWrapper.Name = "MergeSortTransform";
                                MergeSortWrapper.Description = "MergeSortTransform";
                                MergeSortWrapper.ContactInfo = "Sort1";
                                //MergeSortWrapper.SetComponentProperty("EliminateDuplicates", 1);                    
                                
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;

                                }
                                
                                IDTSVirtualInput100 vMergeSortInput = MergeSortWrapper.InputCollection[0].GetVirtualInput();
                                //IDTSVirtualInputColumn100 vColumn = null;
                                IDTSInputColumn100 MergeCol = null;

                                foreach (IDTSVirtualInputColumn100 vColumn in vMergeSortInput.VirtualInputColumnCollection)
                                {
                                    //if (SortColumn.Contains(col.Name))
                                    if (vColumn.Name == MergeSortColumn.Trim())
                                    {
                                        MergeCol = MergeSortinstance.SetUsageType(MergeSortWrapper.InputCollection[0].ID, vMergeSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);

                                        if (MergeCol.CustomPropertyCollection.Count > 0)
                                        {
                                            MergeSortinstance.SetInputColumnProperty(MergeSortWrapper.InputCollection[0].ID, MergeCol.ID, "NewSortKeyPosition", 1);

                                        }
                                    }
                                }

                                foreach (IDTSVirtualInputColumn100 vColumn in vMergeSortInput.VirtualInputColumnCollection)
                                {
                                    if (!MergeSortColumn.Contains(vColumn.Name))
                                    {
                                        MergeCol = MergeSortinstance.SetUsageType(MergeSortWrapper.InputCollection[0].ID, vMergeSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                    }
                                }
                                MergeSortinstance.SetComponentProperty("EliminateDuplicates", 1);
                    
                                mergeJoin = dataFlowTask.ComponentMetaDataCollection.New();
                                mergeJoin.ComponentClassID = "DTSTransform.MergeJoin";
                                mergeJoin.Name = "merge";
                                CManagedComponentWrapper mergeInstance = mergeJoin.Instantiate();
                                mergeInstance.ProvideComponentProperties();
                   
                                //create path from source1 to merge

                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(MergeSortWrapper.OutputCollection[0], mergeJoin.InputCollection[0]);
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component1.OutputCollection[0], mergeJoin.InputCollection[1]);

                                MergeSortWrapper.OutputCollection[0].IsSorted = true;
                                MergeSortWrapper.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;
                                mergeJoin.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
                                mergeJoin.InputCollection[0].HasSideEffects = false;
                                component1.OutputCollection[0].IsSorted = true;
                                component1.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;
                                mergeJoin.InputCollection[1].ExternalMetadataColumnCollection.IsUsed = false;
                                mergeJoin.InputCollection[1].HasSideEffects = false;

                               IDTSInput100 mergeInput1 = mergeJoin.InputCollection[0];
                                
                               IDTSVirtualInput100 vMergeInput1 = mergeInput1.GetVirtualInput();
                               int NumKeyColumns = 0;
                               foreach (IDTSVirtualInputColumn100 vColumn in vMergeInput1.VirtualInputColumnCollection)
                               {
                                   mergeInstance.SetUsageType(mergeInput1.ID, vMergeInput1, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                   if (vColumn.SortKeyPosition > NumKeyColumns)
                                       NumKeyColumns = vColumn.SortKeyPosition;
                               }
                                IDTSInput100 mergeInput2 = mergeJoin.InputCollection[1];
                                IDTSVirtualInput100 vMergeInput2 = mergeInput2.GetVirtualInput();            
                               foreach (IDTSVirtualInputColumn100 vColumn in vMergeInput2.VirtualInputColumnCollection)
                               {
                                   if (!MergeSortColumn.Contains(vColumn.Name))
                                   {
                                       mergeInstance.SetUsageType(mergeInput2.ID, vMergeInput2, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                       if (vColumn.SortKeyPosition > NumKeyColumns)
                                           NumKeyColumns = vColumn.SortKeyPosition;
                                   }
                               } 
                               IDTSCustomProperty100 property1 = mergeJoin.CustomPropertyCollection[0];
                               property1.Value = 2;
                               IDTSCustomProperty100 property2 = mergeJoin.CustomPropertyCollection[1];
                               property2.Value = 1;

                               IDTSOutput100 outt = mergeJoin.OutputCollection[0];

                               for (int merge_cnt = (outt.OutputColumnCollection.Count / 2); merge_cnt < outt.OutputColumnCollection.Count; merge_cnt++)
                               {
                                   if (!MergeSortColumn.Contains(outt.OutputColumnCollection[merge_cnt].Name))
                                   {                                       
                                       outt.OutputColumnCollection[merge_cnt].Name = outt.OutputColumnCollection[merge_cnt].Name;
                                   }
                               }

                               mergeInstance.SetComponentProperty("JoinType", 1); //full join (0),left outer (1),inner (2)
                               mergeInstance.AcquireConnections(null);
                               mergeInstance.ReinitializeMetaData();
                               mergeInstance.ReleaseConnections();
                    
                                LastTrans = "MergeJoin";
                                break;

                            case "MULTICAST":
                                multiCastComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                multiCastComponent.ComponentClassID = "DTSTransform.Multicast";
                                CManagedComponentWrapper multiCastWrapper = multiCastComponent.Instantiate();
                                multiCastWrapper.ProvideComponentProperties();

                                multiCastComponent.Name = "Multicast_"+i;
                                multiCastComponent.Description = "Multicast";
                                MulticastTargetTable = RuleList[i];
                                multiCast = "Y";
                    

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                }

                                IDTSInput100 multiCastInput = multiCastComponent.InputCollection[0];
                                IDTSVirtualInput100 multiCastVirtualInput = multiCastInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 multiCastVirtualInputColumns = multiCastVirtualInput.VirtualInputColumnCollection;

                                LastTrans = "MultiCast";
                            break;

                        }
                    }

                    /*
                    componentSCD = dataFlowTask.ComponentMetaDataCollection.New();
                    componentSCD.ComponentClassID = "DTSTransform.SCD";
                    CManagedComponentWrapper SCDDesignTime = componentSCD.Instantiate();
                    SCDDesignTime.ProvideComponentProperties();
                    componentSCD.Name = "SCD Task";
                    // string compName = new Application().PipelineComponentInfos["Slowly Changing Dimension"].CreationName;

                    componentSCD.Description = "SCD Transform Example";

                    switch (LastTrans)
                    {
                        case "OleDBSource":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "ConditionalSplit":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "DerivedColumn":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "CharacterMap":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Aggregate":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Lookup":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentSCD.InputCollection[0]);
                            break;
                        case "RowCount":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Sort":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "UnionAll":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "OLEDB":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Merge":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "MergeJoin":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "MultiCast":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                    }

                    
                    try
                    {
                        // Set the custom properties of the SCD.              
                        SCDDesignTime.SetComponentProperty("CurrentRowWhere", "[CurrentStatus] = 'A'");
                        SCDDesignTime.SetComponentProperty("EnableInferredMember", false);
                        SCDDesignTime.SetComponentProperty("UpdateChangingAttributeHistory", false);
                        SCDDesignTime.SetComponentProperty("SqlCommand", "SELECT [city], [cust_code], [first_name], [phone1],[CurrentStatus] FROM [dbo].[CUSTOMER_TGT]");
                        componentSCD.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                        componentSCD.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);

                    }
                    catch (Exception exception)
                    {

                    }

                    //MapColumn(componentSCD, SCDDesignTime);
                    IDTSInput100 SCDInput = componentSCD.InputCollection[0];
                    IDTSVirtualInput100 virtualInput = SCDInput.GetVirtualInput();
                    IDTSVirtualInputColumnCollection100 SCDVirtualInputColumns = virtualInput.VirtualInputColumnCollection;
                    
                    //Setting all properties
                    foreach (IDTSVirtualInputColumn100 virtualColumn in SCDVirtualInputColumns)
                    {
                        try
                        {
                            String cname1 = virtualColumn.Name;

                            if (cname1 == "cust_code")
                            {
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 1);
                            }
                            // designTime.SetInputColumnProperty(SCDInput.ID,virtualColumn.ID, "ColumnType", 1);
                            if (cname1 == "city")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 3);
                            }
                            if (cname1 == "phone1")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 2);
                            }
                            if (cname1 == "first_name")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 4);
                            }
                            //if (cname1 == "CurrentStatus")
                            //{
                            //    IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                            //    SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "CurrentRowWhere", "");
                            //}
                        }
                        catch (Exception fg)
                        {

                        }
                    }

                    SCDDesignTime.AcquireConnections(null);
                    SCDDesignTime.ReinitializeMetaData();
                    SCDDesignTime.ReleaseConnections();
                    IDTSInputColumn100 SCDCol = null;
                    IDTSVirtualInput100 vSCDInput = componentSCD.InputCollection[0].GetVirtualInput();
                    //IDTSVirtualInputColumn100 vColumn = null;

                    foreach (IDTSVirtualInputColumn100 vSCDColumn in vSCDInput.VirtualInputColumnCollection)
                    {

                        SCDCol = SCDDesignTime.SetUsageType(componentSCD.InputCollection[0].ID, vSCDInput, vSCDColumn.LineageID, DTSUsageType.UT_READONLY);
                        
                    }
                     

                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + "ErrorPackage.dtsx", p, null);
                    */

                    //Data Convert Transform start//
                    
                    int condCount = 0;

                    string[] DEST_Tables = DST_Table.Split(',');

                    foreach (string DEST_TABLE in DEST_Tables)
                    {
                        
                        IDTSComponentMetaData100 dataConvertComponent1 = dataFlowTask.ComponentMetaDataCollection.New();
                        dataConvertComponent1.ComponentClassID = "DTSTransform.DataConvert";
                        CManagedComponentWrapper dataConvertWrapper1 = dataConvertComponent1.Instantiate();
                        dataConvertWrapper1.ProvideComponentProperties();
                        
                        dataConvertComponent1.Description = "Data Conversion Component";
                        dataConvertComponent1.Name = "DataConvert Component_" + condCount;

                        if (condCount > 0)
                        {
                            LastTrans = "ConditionalSplit";
                        }
                        SqlCommand Sqlcmd = new SqlCommand();
                        SqlConnection SqlConn = new SqlConnection();
                        //SqlConn.ConnectionString = "Data Source=RAJESH-PC;Initial Catalog=Test;Integrated Security=SSPI";
                        switch (LastTrans)
                        {
                            case "OleDBSource":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "ConditionalSplit":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[condCount], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "DerivedColumn":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "CharacterMap":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Aggregate":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Lookup":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "RowCount":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Sort":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "UnionAll":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "OLEDB":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "CopyColumn":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(copyMapComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "MergeJoin":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Merge":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "MultiCast":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                        }
                        SqlConn.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");
                        
                        Sqlcmd.Connection = SqlConn;
                        Sqlcmd.CommandType = CommandType.Text;
                        
                        Sqlcmd.CommandText = "Select COLUMN_NAME,DATA_TYPE,Isnull(CHARACTER_MAXIMUM_LENGTH,0) As CHARACTER_MAXIMUM_LENGTH,Isnull(NUMERIC_PRECISION,0) As NUMERIC_PRECISION,Isnull(NUMERIC_SCALE,0) As NUMERIC_SCALE from Information_Schema.COLUMNS where TABLE_NAME='" + DEST_TABLE + "'";
                        SqlDataAdapter sqlAdp = new SqlDataAdapter();
                        DataSet dsCols = new DataSet();
                        if (SqlConn.State == ConnectionState.Closed)
                            SqlConn.Open();
                        sqlAdp.SelectCommand = Sqlcmd;
                        SqlDataReader rdr = null;
                        rdr = Sqlcmd.ExecuteReader();
                        int a = 0;
                        while (rdr.Read())
                        {
                            try
                            {
                                string COLUMN_NAME = (string)rdr["COLUMN_NAME"];
                                string DATA_TYPE = (string)rdr["DATA_TYPE"];
                                int CHARACTER_MAXIMUM_LENGTH = (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
                                int NUMERIC_PRECISION = Convert.ToInt32(rdr["NUMERIC_PRECISION"]);
                                int NUMERIC_SCALE = Convert.ToInt32(rdr["NUMERIC_SCALE"]);

                                IDTSVirtualInput100 dataConvertVirtualInput = dataConvertComponent1.InputCollection[0].GetVirtualInput();
                                IDTSOutput100 dataConvertOutput = dataConvertComponent1.OutputCollection[0];
                                IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;
                                
                                int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[COLUMN_NAME].LineageID;

                                dataConvertWrapper1.SetUsageType(
                                    dataConvertComponent1.InputCollection[0].ID,
                                    dataConvertVirtualInput, sourceColumnLineageId,
                                    DTSUsageType.UT_READONLY);

                                IDTSOutputColumn100 ConvCol1 = dataConvertWrapper1.InsertOutputColumnAt(dataConvertOutput.ID, 0, COLUMN_NAME, string.Empty);

                                if (DATA_TYPE.ToLower() == "varchar" || DATA_TYPE.ToLower() == "char")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 1252);
                                }
                                if (DATA_TYPE.ToLower() == "nvarchar")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "numeric")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_NUMERIC, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "float")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R8, 0, 0, NUMERIC_SCALE, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "datetime" || DATA_TYPE.ToLower() == "date")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBDATE, 0, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "integer" || DATA_TYPE.ToLower() == "int" || DATA_TYPE.ToLower() == "bigint")

                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I8, 0, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "smallint" || DATA_TYPE.ToLower() == "tinyint")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I2, 0, 0, 0, 0);
                                }
                               
                                else if (DATA_TYPE.ToLower() == "bit")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_BOOL, 0, 0, 0, 0);
                                }

                                                          
                                ConvCol1.MappedColumnID = a;

                                dataConvertWrapper1.SetOutputColumnProperty(
                                        dataConvertOutput.ID,
                                        ConvCol1.ID,
                                        "SourceInputColumnLineageID",
                                        sourceColumnLineageId);
                                a = a + 1;
                            }
                            catch (Exception ex)
                            {

                            }
                        }

                        if (SqlConn.State == ConnectionState.Open)
                            SqlConn.Close();
                        
                        //Get input and virtual input for destination to select and map columns:

                        IDTSComponentMetaData100 destination = dataFlowTask.ComponentMetaDataCollection.New();
                        destination.ComponentClassID = "DTSAdapter.OleDbDestination";
                        CManagedComponentWrapper destDesignTime = destination.Instantiate();
                        destDesignTime.ProvideComponentProperties();
                        destination.Name = "OLEDBDestination_" + DEST_TABLE;


                        destination.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                        destination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);

                        destDesignTime.SetComponentProperty("OpenRowset", DEST_TABLE); //Prajakta - To add the value from "DST Table"
                        destDesignTime.SetComponentProperty("AccessMode", 3);
                        destDesignTime.SetComponentProperty("FastLoadOptions", "TABLOCK,CHECK_CONSTRAINTS");
                        //Connect the source to destination component:
                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent1.OutputCollection[0], destination.InputCollection[0]);
                        IDTSInput100 destinationInputerr = destination.InputCollection[0];
                        IDTSVirtualInput100 destinationVirtualInputerr = destinationInputerr.GetVirtualInput();
                        IDTSVirtualInputColumnCollection100 destinationVirtualInputColumnserr = destinationVirtualInputerr.VirtualInputColumnCollection;

                        //Reinitialize the destination metadata:

                        destDesignTime.AcquireConnections(null);
                        destDesignTime.ReinitializeMetaData();
                        destDesignTime.ReleaseConnections();

                        //Get the destination s default input and virtual input:

                        IDTSInput100 destInput = destination.InputCollection[0];
                        IDTSVirtualInput100 vInput = destInput.GetVirtualInput();
                        IDTSInputColumnCollection100 destInputCols = destInput.InputColumnCollection;
                        IDTSExternalMetadataColumnCollection100 destExtCols = destInput.ExternalMetadataColumnCollection;
                        IDTSOutputColumnCollection100 sourceColumns = dataConvertComponent1.OutputCollection[0].OutputColumnCollection;

                        IDTSOutputColumnCollection100 exSourceColumns = component.OutputCollection[0].OutputColumnCollection;
                        
                        // The OLEDB destination requires you to hook up the external data conversion columns
                        foreach (IDTSOutputColumn100 outputCol in sourceColumns)
                        {
                            try
                            {
                                // Get the external column id
                                IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
                                if (extCol != null)
                                {
                                    // Create an input column from an output col of previous component.
                                    vInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                                    IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
                                    if (inputCol != null)
                                    {
                                        // map the input column with an external metadata column
                                        destDesignTime.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
                                    }
                                }
                            }
                            catch (Exception exc)
                            {
                                foreach(string joinCol in joinColumns)
                                {
                                    if (outputCol.Name != joinCol)
                                    {
                                        Dts.TaskResult = (int)ScriptResults.Failure;
                                    }
                                }
                            }
                        }
                        condCount = condCount + 1;
                    }

                    if (multiCast == "Y")
                    {
                        int multiCastCount = 1;

                        string[] multiCast_Tables = MulticastTargetTable.Split('#');

                        foreach (string TGT_TABLE in multiCast_Tables)
                        {

                            IDTSComponentMetaData100 dataConvertComponent1 = dataFlowTask.ComponentMetaDataCollection.New();
                            dataConvertComponent1.ComponentClassID = "DTSTransform.DataConvert";
                            CManagedComponentWrapper dataConvertWrapper1 = dataConvertComponent1.Instantiate();
                            dataConvertWrapper1.ProvideComponentProperties();

                            dataConvertComponent1.Description = "Data Conversion Component";
                            dataConvertComponent1.Name = "DataConvert Component_MultiCast_" + multiCastCount;


                            SqlCommand Sqlcmd = new SqlCommand();
                            SqlConnection SqlConn = new SqlConnection();
                            //SqlConn.ConnectionString = "Data Source=RAJESH-PC;Initial Catalog=Test;Integrated Security=SSPI";

                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[multiCastCount], dataConvertComponent1.InputCollection[0]);

                            SqlConn.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");

                            Sqlcmd.Connection = SqlConn;
                            Sqlcmd.CommandType = CommandType.Text;

                            Sqlcmd.CommandText = "Select COLUMN_NAME,DATA_TYPE,Isnull(CHARACTER_MAXIMUM_LENGTH,0) As CHARACTER_MAXIMUM_LENGTH,Isnull(NUMERIC_PRECISION,0) As NUMERIC_PRECISION,Isnull(NUMERIC_SCALE,0) As NUMERIC_SCALE from Information_Schema.COLUMNS where TABLE_NAME='" + TGT_TABLE + "'";
                            SqlDataAdapter sqlAdp = new SqlDataAdapter();
                            DataSet dsCols = new DataSet();
                            if (SqlConn.State == ConnectionState.Closed)
                                SqlConn.Open();
                            sqlAdp.SelectCommand = Sqlcmd;
                            SqlDataReader rdr = null;
                            rdr = Sqlcmd.ExecuteReader();
                            int a = 0;
                            while (rdr.Read())
                            {
                                try
                                {
                                    string COLUMN_NAME = (string)rdr["COLUMN_NAME"];
                                    string DATA_TYPE = (string)rdr["DATA_TYPE"];
                                    int CHARACTER_MAXIMUM_LENGTH = (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
                                    int NUMERIC_PRECISION = Convert.ToInt32(rdr["NUMERIC_PRECISION"]);
                                    int NUMERIC_SCALE = Convert.ToInt32(rdr["NUMERIC_SCALE"]);

                                    IDTSVirtualInput100 dataConvertVirtualInput = dataConvertComponent1.InputCollection[0].GetVirtualInput();
                                    IDTSOutput100 dataConvertOutput = dataConvertComponent1.OutputCollection[0];
                                    IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;

                                    int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[COLUMN_NAME].LineageID;

                                    dataConvertWrapper1.SetUsageType(
                                        dataConvertComponent1.InputCollection[0].ID,
                                        dataConvertVirtualInput, sourceColumnLineageId,
                                        DTSUsageType.UT_READONLY);

                                    IDTSOutputColumn100 ConvCol1 = dataConvertWrapper1.InsertOutputColumnAt(dataConvertOutput.ID, 0, COLUMN_NAME, string.Empty);

                                    if (DATA_TYPE.ToLower() == "varchar" || DATA_TYPE.ToLower() == "char")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 1252);
                                    }
                                    if (DATA_TYPE.ToLower() == "nvarchar")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "numeric")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_NUMERIC, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "float")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R8, 0, 0, NUMERIC_SCALE, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "datetime" || DATA_TYPE.ToLower() == "date")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBDATE, 0, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "integer" || DATA_TYPE.ToLower() == "int")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I8, 0, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "smallint" || DATA_TYPE.ToLower() == "tinyint")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I2, 0, 0, 0, 0);
                                    }

                                    else if (DATA_TYPE.ToLower() == "bit")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_BOOL, 0, 0, 0, 0);
                                    }


                                    ConvCol1.MappedColumnID = a;

                                    dataConvertWrapper1.SetOutputColumnProperty(
                                            dataConvertOutput.ID,
                                            ConvCol1.ID,
                                            "SourceInputColumnLineageID",
                                            sourceColumnLineageId);
                                    a = a + 1;
                                }
                                catch (Exception ex)
                                {

                                }
                            }

                            if (SqlConn.State == ConnectionState.Open)
                                SqlConn.Close();

                            //Get input and virtual input for destination to select and map columns:

                            IDTSComponentMetaData100 destination = dataFlowTask.ComponentMetaDataCollection.New();
                            destination.ComponentClassID = "DTSAdapter.OleDbDestination";
                            CManagedComponentWrapper destDesignTime = destination.Instantiate();
                            destDesignTime.ProvideComponentProperties();
                            destination.Name = "OLEDBDestination_" + TGT_TABLE + "_" + multiCastCount;


                            destination.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                            destination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);

                            destDesignTime.SetComponentProperty("OpenRowset", TGT_TABLE); //Prajakta - To add the value from "DST Table"
                            destDesignTime.SetComponentProperty("AccessMode", 3);
                            destDesignTime.SetComponentProperty("FastLoadOptions", "TABLOCK,CHECK_CONSTRAINTS");
                            //Connect the source to destination component:
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent1.OutputCollection[0], destination.InputCollection[0]);
                            IDTSInput100 destinationInputerr = destination.InputCollection[0];
                            IDTSVirtualInput100 destinationVirtualInputerr = destinationInputerr.GetVirtualInput();
                            IDTSVirtualInputColumnCollection100 destinationVirtualInputColumnserr = destinationVirtualInputerr.VirtualInputColumnCollection;

                            //Reinitialize the destination metadata:

                            destDesignTime.AcquireConnections(null);
                            destDesignTime.ReinitializeMetaData();
                            destDesignTime.ReleaseConnections();

                            //Get the destination s default input and virtual input:

                            IDTSInput100 destInput = destination.InputCollection[0];
                            IDTSVirtualInput100 vInput = destInput.GetVirtualInput();
                            IDTSInputColumnCollection100 destInputCols = destInput.InputColumnCollection;
                            IDTSExternalMetadataColumnCollection100 destExtCols = destInput.ExternalMetadataColumnCollection;
                            IDTSOutputColumnCollection100 sourceColumns = dataConvertComponent1.OutputCollection[0].OutputColumnCollection;

                            IDTSOutputColumnCollection100 exSourceColumns = component.OutputCollection[0].OutputColumnCollection;

                            // The OLEDB destination requires you to hook up the external data conversion columns
                            foreach (IDTSOutputColumn100 outputCol in sourceColumns)
                            {
                                try
                                {
                                    // Get the external column id
                                    IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
                                    if (extCol != null)
                                    {
                                        // Create an input column from an output col of previous component.
                                        vInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                                        IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
                                        if (inputCol != null)
                                        {
                                            // map the input column with an external metadata column
                                            destDesignTime.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
                                        }
                                    }
                                }
                                catch (Exception exc)
                                {
                                    foreach (string joinCol in joinColumns)
                                    {
                                        if (outputCol.Name != joinCol)
                                        {
                                            Dts.TaskResult = (int)ScriptResults.Failure;
                                        }
                                    }
                                }
                            }
                            multiCastCount = multiCastCount + 1;
                        }
                    }


                    //We then save the package into a file system.
                    //Dts.TaskResult = (int)ScriptResults.Success;
                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + Template_Name + ".dtsx", p, null);
                    //p.Execute();
                }

            }
            catch (Exception ex)
            {
                Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + "ErrorPackage.dtsx", p, null);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:ProjectId>{BCC422BA-10FD-488F-8FE6-8AF6FD310273}</msb:ProjectId>
		<msb:NoContent>Reference;Import;Folder</msb:NoContent>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>st_0cef29a9393f4e4c8dda023d910526e5</msb:DisplayName>
		<msb:CodeName>st_0cef29a9393f4e4c8dda023d910526e5</msb:CodeName>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Project Include="st_0cef29a9393f4e4c8dda023d910526e5.csproj"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Settings.get_Default():ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Sett" +
    "ings")]

namespace ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_0cef29a9393f4e4c8dda023d910526e5.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Hexaware")]
[assembly: AssemblyProduct("ST_0cef29a9393f4e4c8dda023d910526e5.csproj")]
[assembly: AssemblyCopyright("Copyright @ Hexaware 2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_0cef29a9393f4e4c8dda023d910526e5.csproj.dll">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
b1EAAAYROW8lAAAGFownAAABb1kAAAZvUAAABitsES1vGQAABm9OAAAGETpvJgAABhaMJwAAAW9R
AAAGETlvJQAABhaMJwAAAW9ZAAAGb1AAAAYrNREtbxkAAAZvTgAABhE9byYAAAYWjCcAAAFvUQAA
BhE5byUAAAYWjCcAAAFvWQAABm9QAAAGETlvKgAABm9BAAAGFjE8ETlvKgAABhaMJwAAAW8/AAAG
ESAoaAAACm9GAAAGETlvKgAABhaMJwAAAW8/AAAGESBvagAACm9EAAAGEaJyHAcAcBFAEUWabyUA
AApvMwAABiZy9QAAcBNDOH4PAAARLW8YAAAGbxwAAAYTPhE+csAGAHBvJAAABhE+bycAAAYToxGj
by4AAAYRPnJREABwbyEAAAYRPnJREABwbx8AAAYRLW8YAAAGclEQAHBvGgAABhOkEaRyaxAAcG8h
AAAGET5vKgAABm9BAAAGFjE8ET5vKgAABhaMJwAAAW8/AAAGER8oaAAACm9GAAAGET5vKgAABhaM
JwAAAW8/AAAGER9vagAACm9EAAAGcocQAHATpRFAEUWaF40/AAABE/wR/BYfPZ0R/G9QAAAKE6YR
phaaF40/AAABE/wR/BYfLp0R/G9QAAAKE6cRpxeaE6URFG9IAAAKcpUQAHBvSQAACi0QERRypxAA
cBGlKDMAAAoTFBGjcgYHAHAYjCcAAAFvMwAABiYRo3IcBwBwERRvMwAABiYRoxRvOwAABhGjby8A
AAYRo288AAAGES1vGAAABm8cAAAGEzgROHKpDgBwbyQAAAYROG8nAAAGE6gRqG8uAAAGEThyvRAA
cG8hAAAGEThyvRAAcG8fAAAGEThy4xAAcG8tAAAGEUMlE/85+wMAAP4TfhMAAAQ6rgAAAB8Nc3EA
AAolcjIHAHAWKHIAAAolckAJAHAXKHIAAAolcmIJAHAYKHIAAAolcn4JAHAZKHIAAAolcpgJAHAa
KHIAAAolcqwJAHAbKHIAAAolcroJAHAcKHIAAAolcswJAHAdKHIAAAolctYJAHAeKHIAAAolcvUA
AHAfCShyAAAKJXLoCQBwHwoocgAACiVy9AkAcB8LKHIAAAolcggKAHAfDChyAAAK/hOAEwAABP4T
fhMAAAQR//4NAAEocwAACjkqAwAA/gwAAUUNAAAABQAAAD8AAAB5AAAAswAAAO0AAAAnAQAAYgEA
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
awAAAQAAAABWaQAAVwAAAK1pAABNAAAAawAAAQIAAABBaQAAyQAAAApqAAAdAAAAAAAAAAAAAACL
awAAkAIAABtuAAADAAAAawAAAQAAAAAKcAAAVwAAAGFwAABNAAAAawAAAQIAAAD1bwAAyQAAAL5w
AAAdAAAAAAAAAAAAAABGAAAA5nAAACxxAABFAAAAawAAAR4CKMIAAAoqAAAAALQAAADOyu++AQAA
AJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249
NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5
I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJlc291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQA
AABCU0pCAQABAAAAAAAMAAAAdjQuMC4zMDMxOQAAAAAFAGwAAABYJAAAI34AAMQkAAAYHgAAI1N0
cmluZ3MAAAAA3EIAAPgWAAAjVVMA1FkAABAAAAAjR1VJRAAAAORZAAAYEAAAI0Jsb2IAAAAAAAAA
AgAAAVc/ogkJCwAAAPolMwAWAAABAAAAdAAAACkAAABYAAAAmAAAAHoAAAAZAAAAyQAAAEEAAADn
AAAAVAAAAAIAAAAVAAAAOAAAAFIAAAADAAAAAQAAAAcAAAABAAAAAgAAAAEAAAAAAAoAAQAAAAAA
BgDWAM8ACgDyAN0ADgBSASkBBgBuAc8ABgCEAXMBBgC1AaABBgBsAlICBgCXAoUCBgCuAoUCBgDL
AoUCBgDqAoUCBgADA4UCBgAcA4UCBgA3A4UCBgBSA4UCBgBrA4UCBgCkA4QDBgDEA4QDBgAgBA0E
BgA9BM8ABgBCBM8ABgBmBIUCCgCSBHwECgCrBHwEBgDABIQDDgDiBCkBBAAXBTEFBgB+Bc8ABgCF
Bc8AEgDcBbwFEgDkBbwFEgAABrwFEgAPBrwFEgAYBrwFEgBvBrwFDgB7BikBEgCVBrwFEgCtBrwF
BgDfBs8AEgDsBrwFEgAIB7wFEgA2B7wFEgA/B7wFEgBcB7wFEgBxB7wFFgCoB5IHFgCzB5IHFgDU
B8EHFgDwB8EHFgD6B4YHFgAmCJIHFgAzCMEHFgA/CIYHFgBgCIYHFgByCJIHFgCYCJIHFgCnCIYH
FgCvCIYHFgDgCJIHFgD8CMEHEgAtCbwFEgBdCbwFBgByCc8AGgDiCbUJGgDxCbUJGgAdCrUJBgAy
Cs8AGgBiCrUJBADMCjEFBADVCjEFBADlCjEFBAAoCzEFBABaCzEFBAB/CzEFBAC1CzEFBAACDDEF
EgAbDLwFHgBxDEkMBABxDEkMBADUDDEFBgCgDYUNBADhDTEFBAAKDjEFBAAWDjEFBABDDjEFBABR
DjEFBAB8DjEFBACtDjEFBADRDjEFBAAWDzEFBgBiD08PBACWDzEFBACpDzEFBADDDzEFBgD+D88A
BAASEDEFBgCREIUNBgCgEM8ABgCsEM8ABADFEDEFBAD8EDEFBABDETEFBAB0ETEFBAC7EUkMBgCE
E88ABACUEzEFBgDqE88ABAD0EzEFBgAtFA4UBgCaFA4UBgCoFA4UBgDAFA4UBADTFDEFBgDmFA4U
BgAuFU8PBgBRFYUCAAAAAAEAAAAAAAEAAQAAABAAOQBDAAUAAQABAAABEAB5AEMACQADAAUAAQAQ
AIIAjQANAAQACAADAQAAuAAAABEABAAKAAMBEAAEBQAABQAHAAoAoRAAABcFMQUAAAgADAChEAAA
zAoxBQAACAAXAKEQAADVCjEFAAAIABcAoRAAAOUKMQUAAAgAGgChEAAAKAsxBQAACAAdAKEQAABa
CzEFAAAIAC4AoRAAAH8LMQUAAAgALgChEAAAtQsxBQAACAA/AKEQAAACDDEFAAAIAEIAoRAAAHEM
SQwAAAgARwChEAAA1AwxBQAACABHAAAAAABADQAABQAIAE0AoRAAAOENMQUAABYATQChEAAACg4x
BQAAFgBPAKEQAAAWDjEFAAAWAFEAoRAAAEMOMQUAABYAUgChEAAAUQ4xBQAAFgBZAKEQAAB8DjEF
AAAWAFoAoRAAAK0OMQUAABYAZAChEAAA0Q4xBQAAFgBnAKEQAAAWDzEFAAAWAGkAoRAAAJYPMQUA
ABYAbQABAQAAqQ8xBREAFgB1AAEBAADDDzEFEQAaAHUAoRAAABIQMQUAAB0AdQChEAAAxRAxBQAA
HQB5AKEQAAD8EDEFAAAdAH0AoRAAAEMRMQUAAB0AgQABAQAAdBExBREAHQCXAAEBAAC7EUkMEQAi
AJcAoRAAAJQTMQUAAFkAlwChEAAA9BMxBQAAWQCZAKEQAADTFDEFAABZAJkAoRAAAKgdSQwAAFkA
mQChEAAAuh1JDAAAWQCZABEAlAETABEAwQEXABEACwI5AAYGNAJHAFaAPAJKAFaARAJKAAYAWgWN
ABMArQ3pARMAzQ3pARMAfRDpARMA7RHpARMAARLpARMAVxLpARMAmhLpARMArhLpARMAwhLpARMA
9xLpARMADBPpARMAMRPpARMAWhPpARMAbxPpAQYGNAJHAFaAKhnrClaANhnrClaAQxnrCgYGNAJH
AFaAThlaC1aAWBlaCwYGNAJHAFaA+RqXDFaABBuXDFaAFRuXDFaAJBuXDAYGNAJHAFaANRsGDVaA
PhsGDVaARhsGDVaATBsGDVaAUhsGDVaAWBsGDVaAXhsGDVaAZBsGDVaAbBsGDVaAdBsGDVaAfxsG
DVaAhRsGDVaAjBsGDVaAkxsGDVaAmhsGDVaAoBsGDVaApxsGDVaAsxsGDVaAuxsGDVaAxBsGDVaA
yxsGDVaA0xsGDVaA3hsGDVaA6BsGDVaA8hsGDVaAARwGDVaADBwGDVaAIRwGDVaAKhwGDVaAMhwG
DVaAOxwGDVaASxwGDVaAVxwGDVaAYxwGDVaAbxwGDVaAexwGDVaAhxwGDVaAlRwGDVaAoxwGDVaA
tBwGDVaAwBwGDVaAzRwGDVaA2hwGDVaA5xwGDVaA8xwGDVaAAB0GDVaAEh0GDVaAIB0GDVaAMR0G
DVaAQR0GDVaAUR0GDVaAZh0GDVaAdx0GDVaAkh0GDVAgAAAAAIMY0QEbAAEAWCAAAAAAkwjXAR8A
AQCRIAAAAACTCOsBJAABAJggAAAAAJMI9wEpAAEAoCAAAAAAlggbAj0AAgCzIAAAAACGGNEBGwAC
AKcgAAAAAJEY2wSJAAIA2CAAAAAAhgAvAhsAAgAklAAAAACGGNEBGwACALsgAAAAAIYY0QEbAAIA
wyAAAAAAhgBiBZEAAgAAAAAAAAAGGAIUGwADAAAAAAAAAMYNdQWWAAMAAAAAAAAAxg1WBlgABAAA
AAAAAAAGGEcUGwAFAAAAAAAAAMYNMhLsAgUAAAAAAAAAxg0/EsYBBQAAAAAAAAAGGFMUGwAFAAAA
AAAAAMYNiA/GAQUAAAAAAAAABhhfFBsABQAAAAAAAADGDUoSxgEFAAAAAAAAAMYNRhPGAQUAAAAA
AAAABhj3FBsABQAAAAAAAADGDQgLsgEFAAAAAAAAAMYN9w0RAgYAAAAAAAAAxg22BgIDBwAAAAAA
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
eBUAIAAAAAABIAEAPRQAIAAAAAABIAEAnhUAIAAAAAAAIAAAAAAAIAAAAAAAIAAAAAAAIAAAAAAA
IAAAAAABIAEA3BUAIAAAAAABAAEAbBYBAAIAdhYBIAMAiRYBIAQAkhYAIAAAAAABAAEAohYBIAIA
qxYBAAMAwxYBAAQAzhYAIAAAAAABIAEA2RYBIAIA5hYAIAAAAAABAAEAbBYBIAIA2RYBIAMA5hYA
IAAAAAABAAEAohYBAAIA+RYBIAMA2RYBIAQA5hYAIAAAAAABAAEAbBYBAAIACBcBIAMA2RYBIAQA
5hYAIAAAAAABAAEAGBcBAAIAbBYBIAEANRcAIAAAAAABAAEAohYBAAIA+RYBAAMAThcAIAAAAAAB
IAEAOhUAIAAAAAABIAEAkhcAIAAAAAABIAEAwRcAIAAAAAABIAEAPRQAIAAAAAABIAEA7RcAIAAA
AAABIAEAFBgBIAIAIBgAIAAAAAABIAEAOhUBAAEAMhgAIAAAAAABAAEAXBgAIAAAAAABIAEAOhUB
AAEAMhgBAAEAqRgAIAAAAAAAIAAAAAAAIAAAAAAAIAAAAAABAAEAwxYBAAIAzhYAIAAAAAABIAEA
OhUAIAAAAAAAIAAAAAABIAEAOhUAIAAAAAAAIAAAAAABAAEAMhgAIAAAAAABIAEAeBUAIAAAAAAB
IAEAPRQAIAAAAAAAIAAAAAABIAEAOhUBAAEAbBkAIAAAAAAAIAAAAAABAAEAwxYAIAAAAAABIAEA
OhUAIAAAAAABAAEAMhgAIAAAAAABIAEAPRQAIAAAAAABAAEAtBkAAAEA0RkBAAEA7xkBAAIA+RkB
AAMAARoBAAQADBoBAAUAExoBAAEANRoBAAEANRoBAAEAiRoBAAEAMhgHAJgACAAkAAgAnAAJAJwA
CgDNAQsAmAAMADQADgDNAQ8AmAARAJgAEwDNARQAmAAVAM0BFgCYABcAzQEYAJgAGQCYABoAzQEb
AM0BHACYAB8AzQEgAM0BIQDNASIAmAAlAJgAOQDRAVgAQQDRAVgASQDRAVgAUQDRAVgAWQDRAVgA
YQDRAVgAaQDRAVgAcQDRAVgAeQDRAVgAgQDRAVgAiQDRAV0AkQDRARsAmQDRARsACQDRARsAoQBU
BGIAoQBvBGkAKQDRAW4AuQDRAXoAyQDRARsAEQDRARsA0QDRARsAawB1BZYA4QCWBZoA8QDRARsA
8QDwBaEA+QALBqYAEQElBq0AEQE+Bq0AEQFWBlgAEQFfBlgAGQHRARsAGQCNBrIAIQGfBrgAKQG2
Br4AMQG/BsUACQDJBpYA4QDSBpYA4QDXBskA4QCWBZEAOQGWBc4A4QDlBtMA8QD4BtkAQQELBt8A
SQFWBlgA4QAaB+YASQEhB1gACQHwBaEAUQFNB+0AWQG2BvMAYQFoB/oA4QDlBgABGQF8BwcBcQHR
ARsAeQHRARsAgQEhB1gAcQHhBxEBiQEGCBgBiQEWCFgAmQHRAR8BoQFSCCUBoQFnCCwBcQGJCDMB
uQELBjkBwQHRARsAyQHRARsAgQG/CEIBgQHJCBsAwQHOCEgBcQHuCE8B4QG2BlUB4QAJCVoB4QAR
CZYA4QAZCZEA4QEiCWABgQEnCRsA8QBDCWQB6QELBmoBEQGfBrgAKQELBnYB4QB3CYAB4QB9CYcB
UQGJCcUAAQIHCo0BCQILBpMBGQI7CpkBCQJDCp8BEQJOClgAEQJ2CqYBEQKNCl0AEQKaCq0BEQKs
Cl0A4QC+CocBCQFDCWQBwwAIC7IB4wBBC7cBIwFFC1gAOwFzC7wBcwGaCxsACwFWBlgA+wBfBlgA
UwHYC8EBCwL4C8YB+wG2BsoBaQKKDNABMwKfDNkBSQG1DJYAIwK8DFgAmwHqDN8B2wH/DK0BewES
DRsA4wEnDRsA4QA6DeYBDADRAV0ADAALBvoBDADBDQIC4QDlBgsCywD3DRECcwJBCxYCMwEuDhsC
iwK2BiACKwFoDiYCywK2BisCgwKJDjECAwPBDjkCKwP1Dj4CqwI0D0MCQwNuD0gC2QJ8D8UAOwO2
Bk4CmwCID8YB0wK1DMYBkwG2D1QCkwK1DMYBywHWD18CqwHjD2cC2QL1D2AB+QIKEBsAGwM6EG8C
wwNfEK0A8wJqEK0AFADRARsAFAALBnsCFACYEIECHADRAY4CGQOyEJQC4QC3EKgCCwPiEK0C0wNu
D0gCiwN1BZYA4QAaB7MCgwNfBlgAowMcEbkC6wO2Br8CSwJWBlgAYwI5Ea0BYwNBC8UCKwRWBlgA
swRXEV0AiwSGEcsCmwSeEcsCOwQcEbkCAwRBC9ICewTEEdcCUwTaEV0A4QAVEpYAgwEdEuICgwAy
EuwCiwA/EsYBqwBKEsYBQwJ1BZYA+wP4C8YBawO1DMYBswFrEvICCwS1DMYBuwGCEvICwwLWEq0A
SwO2BvsCawTjEl0A0wC2BgIDawEhE1gAswBGE8YBQwEcEbkCWwP4C8YBIwR1BZYASQOMEwgDUwNu
D0gCqwO2Bg0DMwO2DxQD4wOyExsDuwS1DMYB8wHMEyEDIQHbE10A4QDlBioDGQDRARsAaQPRAV0A
cQPRAVgAeQPRARsAgQPRARsAkQPRAcQFoQPRAVgAeQPRAfQKCAAUAE4ACAAYAFMACABcAE4ACABg
AFMACABkAO8KCABsAE4ACABwAFMACAB4AE4ACAB8AFMACACAAO8KCACEAJwMCACMAE4ACACQAFMA
CACUAO8KCACYAAsNCACcAJwMCACgABANCACkABUNCACoABoNCACsAB8NCACwACQNCAC0ACkNCAC4
AC4NCAC8ADMNCADAADgNCADEAD0NCADIAEINCADMAEcNCADQAEwNCADUAFENCADYAFYNCADcAFsN
CADgAGANCADkAGUNCADoAGoNCADsAG8NCADwAHQNCAD0AHkNCAD4AH4NCAD8AIMNCAAAAYgNCAAE
AY0NCAAIAZINCAAMAZcNCAAQAZwNCAAUAaENCAAYAaYNCAAcAasNCAAgAbANCAAkAbUNCAAoAboN
CAAsAb8NCAAwAcQNCAA0AckNCAA4Ac4NCAA8AdMNCABAAdgNCABEAd0NCABIAeINCABMAecNCABQ
AewNCABUAfENCABYAfYNCABcAfsNCABgAQAOKQCTAIAALgA7AM8PLgBbAO4PLgAzAIsPLgBDALsP
LgBjAPcPLgATAIsPLgALAEMPLgAbALsPLgAjALsPLgArAMEPQwBrAFMASQCTAIAAYQCbAFMAgwCr
AFMAwwCbAFMA4wCbAFMA4wArBlMA4wAjBnAFAwE7BsoFAwGbAFMAAwErBlMAAwEjBpoFIwGbAFMA
IwErBlMAIwEjBpoFQwGbAFMAQwErBlMAQwEjBlkGQwFDBoMGYwEjBs8GYwErBlMAYwGbAFMAgwEr
BlMAgwE7BsoFgwEjBvkGgwGbAFMAoAEbBioFowErBlMAowEjBvkGowGbAFMAwAEbBioFwwFDBoMG
wwErBlMAwwEjBoUHwwGbAFMA4wErBlMA4wGbAFMA4wEjBrkHAAIbBjUFAwKbAFMAAwIjBuMHAwIr
BlMAIAIbBj4FIwIrBlMAIwIjBhEIIwKbAFMAQwKbAFMAYAIbBkcFYwKbAFMAYwJDBoMGYwIrBlMA
YwIjBjsIgwKbAFMAgwIrBlMAgwIjBmUIoAIbBlAFowIrBlMAowKbAFMAowIjBpUIowJDBoMGwAIb
BlkFwwIrBlMAwwIjBtoIwwKbAFMA4wJDBoMG4wKbAFMA4wIrBlMA4wIjBgoJAAMbBioGAwMrBlMA
AwMjBkgJAwObAFMAIAMbBioFIwObAFMAIwMrBlMAIwMjBncJQAMbBj8GQwMjBl0KQwNDBoMGQwMr
BlMAQwObAFMAYwMrBlMAYwNDBoMGYwMjBo4KYwObAFMAgAMbBkoGgwMjBsEKgwObAFMAgwMrBlMA
owNLBvoKowObAFMAwAMbBioGwwObAFMAwwNLBl4L4AMbBioG4wObAFMA4wNDBoMG4wMrBlMA4wMj
BssLAAQbBioFAwQrBlMAAwSbAFMAAwRDBoMGAwQjBvULIAQbBioFIwRDBoMGIwQrBlMAIwQjBiUM
IwSbAFMAQwQjBm0MQwQrBlMAQwSbAFMAYAQbBjUFYwSbAFMAYwRLBqEMgAQbBjUFgwSbAFMAgwRL
BgUOoAQbBj4FowSbAFMAowQrBlMAowQjBmAOwAQbBo0GwwQjBooOwwSbAFMAwwQrBlMA4AQbBpYG
4wQjBrQO4wSbAFMA4wQrBlMAAAUbBp8GAwUrBlMAAwWbAFMAAwUjBt4OIwWbAFMAIwVDBjIPIwUr
BlMAIwUjBggPQAUbBqgGgAUbBrEGoAUbBrEGwAUbBiMH4AUbBioGAAYbBioFQAYbBiwHYAYbBjUH
oAYbBj4HwAYbBkcH4AYbBlAHIAcbBlkHYAcbBmIHgAcbBm0HwAcbBnYH4AcbBj8GIAgbBioFYAgb
BjUFgAgbBjUFoAgbBj4FwAgbBj4FAAkbBioFIAkbBioFYAkbBjUFgAkbBjUFwAkbBkoGAAobBpYG
IAobBj8GQAobBiMHYAobBiMHoAobBr8I4AobBsgIAAsbBsgIIAsbBj8GQAsbBiMHYAsbBiMHoAsb
BjUFwAsbBjUFAAwbBp8GIAwbBr8IYAwbBjQJoAwbBjUFwAwbBpYG4AwbBj8GAA0bBqEJIA0bBj8G
QA0bBqEJYA0bBioFgA0bBkoGoA0bBiMHwA0bBiMH4A0bBioGAA4bBioGIA4bBioFQA4bBioFgA4b
BrgKoA4bBj8G4A4bBjUFAA8bBjUFQA8bBqEJgA8bBjUFoA8bBj8G4A8bBioFABAbBkoGIBAbBiMH
QBAbBiMHgBAbBioFoBAbBioF4BAbBr8IIBEbBkcFQBEbBkcFgBEbBk8MoBEbBk8M4BEbBqgGABIb
BlAFIBIbBlAFQBIbBjQJYBIbBjQJoBIbBl4MwBIbBl4M4BIbBiMHABMbBiMHBwAzBQkAMwULADMG
DQAzBg8AMwYRAEgGEwAzBhUAMwUXADMFGQAzBRsAMwUdADMFHwAzBSEAMwYjADMGJQAzBicAMwYp
ADMGKwAzBS0AMwUvADMGNQAzBTcAMwU5ADMGPQAzBkMAMwZFADMFRwBIBkkAMwZNADMFTwBIBlEA
MwZXADMFWQBIBlsAMwZhADMFYwBIBmUAMwZrAGsHbQAzBnUAMwZ3AEgGeQAzBXsAMwV9ADMGfwAz
BoEAMwWDADMFhQBIBocASAaJADMGiwAzBo0AMwaPADMGkQBIBpUAMwaZADMGmwBIBqEAMwajADMG
pQAzBqcAMwatADMGrwBIBrEAqgmzADMGtQBIBrcAqgm5ADMGvQAzBb8AMwXBADMFwwAzBcUAMwbH
ADMGyQBIBs0AqgnPADMG0wAzBtUASAbXADMG2wAzBd0AMwXfADMGdQAwAwIAAQADAAMABwAEAAkA
CgAKAAwACwANAA4AFQAPABcAEQAZABUAGwAWABwAFwAfABgAIAAZACQAGgAlABsAJgAcACgAHwAs
ACEALgAiADAAJQA4AAAAhAEvAAAAAwI0AAAAJwJCAAAAaxRiBQAAuxFmBQAAcBRsBQAAdxRsBQAA
gRRsBQAAihRsBQAAAxU1BgAAHxU6BgAATBVTBgAA7RViBQAAaxRiBQAA+RViBQAACha6BgAAGha/
BgAAKxbEBgAARBbKBgAAYBZiBQAATBV/BwAAaBdsBQAA2RdiBQAACAe0BwAAaxRiBQAA9RcNCAAA
TBWPCAAAZxhsBQAAahjRCAAAgRjWCAAATBUECQAAZxhsBQAAxxjWCAAA1hg9CQAA7BhDCQAADRly
CQAATBVXCgAATBWHCgAAaBdsBQAAZxhsBQAA7RViBQAAaxRiBQAAKxbEBgAATBXECwAAdRnWCAAA
TBUfDAAAaBdsBQAAZxhsBQAAaxRiBQAAKxbEBgAApBpsBQAAihRsBQAAsxpnDAAAxxpnDAAA4Bps
BQAAZxhsBQIAAgADAAIAAwAFAAEABAAFAAIABQAHAAIADQAJAAEADgAJAAIAEAALAAIAEQANAAIA
EwAPAAIAFQARAAIAFgATAAIAGAAVAAIAGQAXAAIAGgAZAAIAHgAbAAEAHwAbAAIAIAAdAAEAIQAd
AAEAJAAfAAIAIwAfAAIAJQAhAAIAJgAjAAIAKAAlAAIAKgAnAAIALAApAAEALQApAAIAPwArAAIA
QQAtAAEARAAvAAIAQwAvAAEARgAxAAIARQAxAAIASAAzAAEASQAzAAIASwA1AAEATAA1AAIAUQA3
AAIAUgA5AAEAUwA5AAIAVQA7AAIAVwA9AAEAWAA9AAIAWQA/AAIAWgBBAAEAWwBBAAIAXQBDAAEA
XgBDAAIAYQBFAAIAYwBHAAIAZQBJAAIAZwBLAAIAaQBNAAIAawBPAAIAbQBRAAEAbgBRAAIAbwBT
AAEAcABTAAEAcgBVAAIAcQBVAAIAdABXAAIAdQBZAAIAdwBbAAEAeABbAAIAfQBdAAIAfwBfAAIA
gQBhAAEAggBhAAIAhABjAAEAhQBjAAIAhwBlAAEAigBnAAIAiQBnAAEAjQBpAAIAjABpAAIAkABr
AAEAkQBrAAIAkgBtAAEAkwBtAAEAlgBvAAIAlQBvAAIAlwBxAAEAmABxAPIBdAKHAgSAAAABAAAA
WBfXdgAAAAAAAOIDAAAEAAAAAAAAAAAAAAABAMYAAAAAAAQAAAAAAAAAAAAAAAEAzwAAAAAACwAA
AAAAAAAAAAAACgAKAQAAAAALAAAAAAAAAAAAAAAKAJ0FAAAAAAQAAAAAAAAAAAAAAAEAhgcAAAAA
CwAAAAAAAAAAAAAACgCZCQAAAAALAAAAAAAAAAAAAAAKACYMAAAAAAAAAAABAAAAzB0AAAUABAAG
AAQAIwGkAgAAADxNb2R1bGU+AFNUXzBjZWYyOWE5MzkzZjRlNGM4ZGRhMDIzZDkxMDUyNmU1LmNz
cHJvai5kbGwAUmVzb3VyY2VzAFNUXzBjZWYyOWE5MzkzZjRlNGM4ZGRhMDIzZDkxMDUyNmU1LmNz
cHJvai5Qcm9wZXJ0aWVzAFNldHRpbmdzAFNjcmlwdE1haW4AU1RfZTljOWNiM2E1YWM0NDlkMjkz
ZGRlYjUyNDJhZGVjNzguY3Nwcm9qAFNjcmlwdFJlc3VsdHMAbXNjb3JsaWIAU3lzdGVtAE9iamVj
dABTeXN0ZW0uQ29uZmlndXJhdGlvbgBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBNaWNyb3NvZnQu
U3FsU2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0
VGFzawBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UARW51bQBTeXN0ZW0uUmVzb3VyY2VzAFJl
c291cmNlTWFuYWdlcgByZXNvdXJjZU1hbgBTeXN0ZW0uR2xvYmFsaXphdGlvbgBDdWx0dXJlSW5m
bwByZXNvdXJjZUN1bHR1cmUALmN0b3IAZ2V0X1Jlc291cmNlTWFuYWdlcgBnZXRfQ3VsdHVyZQBz
ZXRfQ3VsdHVyZQBDdWx0dXJlAGRlZmF1bHRJbnN0YW5jZQBnZXRfRGVmYXVsdABEZWZhdWx0AE1h
aW4AdmFsdWVfXwBTdWNjZXNzAEZhaWx1cmUAdmFsdWUAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmlu
ZwBUYXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAU3lzdGVtLlJlZmxlY3Rpb24AQXNzZW1ibHlUaXRs
ZUF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAEFzc2VtYmx5Q29uZmlndXJh
dGlvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0
cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmli
dXRlAEFzc2VtYmx5Q3VsdHVyZUF0dHJpYnV0ZQBBc3NlbWJseVZlcnNpb25BdHRyaWJ1dGUAU3lz
dGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmli
dXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAFNUXzBjZWYyOWE5MzkzZjRlNGM4ZGRh
MDIzZDkxMDUyNmU1LmNzcHJvagBTeXN0ZW0uRGlhZ25vc3RpY3MARGVidWdnZXJOb25Vc2VyQ29k
ZUF0dHJpYnV0ZQBUeXBlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAEFzc2Vt
Ymx5AGdldF9Bc3NlbWJseQBTeXN0ZW0uQ29tcG9uZW50TW9kZWwARWRpdG9yQnJvd3NhYmxlQXR0
cmlidXRlAEVkaXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAC5j
Y3RvcgBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAPD5jX19EaXNwbGF5Q2xhc3My
AElEVFNWaXJ0dWFsSW5wdXRDb2x1bW4xMDAATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxp
bmUuV3JhcHBlcgB2Q29sdW1uADxNYWluPmJfXzAAZWxlbWVudABnZXRfTmFtZQBTdHJpbmcAU3Ry
aW5nQ29tcGFyaXNvbgBFcXVhbHMATWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUAUGFja2FnZQBFeGVjdXRhYmxlcwBnZXRfRXhlY3V0
YWJsZXMARXhlY3V0YWJsZQBBZGQAU2VxdWVuY2UARHRzQ29udGFpbmVyAHNldF9GYWlsUGFja2Fn
ZU9uRmFpbHVyZQBzZXRfRmFpbFBhcmVudE9uRmFpbHVyZQBzZXRfTmFtZQBzZXRfRGVzY3JpcHRp
b24AQXBwbGljYXRpb24AU2NyaXB0T2JqZWN0TW9kZWwAZ2V0X0R0cwBWYXJpYWJsZXMAZ2V0X1Zh
cmlhYmxlcwBWYXJpYWJsZQBnZXRfSXRlbQBnZXRfVmFsdWUAVG9TdHJpbmcAVHJpbQBJbmRleE9m
AEludDMyAENvbmNhdABDb25uZWN0aW9ucwBnZXRfQ29ubmVjdGlvbnMAQ29ubmVjdGlvbk1hbmFn
ZXIARm9ybWF0AHNldF9Db25uZWN0aW9uU3RyaW5nAFRhc2tIb3N0AER0c1Byb3BlcnRpZXMAZ2V0
X1Byb3BlcnRpZXMARHRzUHJvcGVydHkAU2V0VmFsdWUASURUU0V2ZW50cwBTYXZlVG9YbWwAU3lz
dGVtLkRhdGEAU3lzdGVtLkRhdGEuU3FsQ2xpZW50AFNxbENvbW1hbmQAU3FsQ29ubmVjdGlvbgBT
eXN0ZW0uRGF0YS5Db21tb24ARGJDb25uZWN0aW9uAHNldF9Db25uZWN0aW9uAERiQ29tbWFuZABD
b21tYW5kVHlwZQBzZXRfQ29tbWFuZFR5cGUAc2V0X0NvbW1hbmRUZXh0AFNxbFBhcmFtZXRlcgBE
YlBhcmFtZXRlcgBQYXJhbWV0ZXJEaXJlY3Rpb24Ac2V0X0RpcmVjdGlvbgBEYlR5cGUAc2V0X0Ri
VHlwZQBTcWxQYXJhbWV0ZXJDb2xsZWN0aW9uAGdldF9QYXJhbWV0ZXJzAFNxbERhdGFBZGFwdGVy
AERhdGFTZXQAQ29ubmVjdGlvblN0YXRlAGdldF9TdGF0ZQBPcGVuAHNldF9TZWxlY3RDb21tYW5k
AFNxbERhdGFSZWFkZXIARXhlY3V0ZVJlYWRlcgBEYkRhdGFSZWFkZXIAUmVwbGFjZQBUb1VwcGVy
AENvbnRhaW5zAFJlYWQAQ2xvc2UAUHJlY2VkZW5jZUNvbnN0cmFpbnRzAGdldF9QcmVjZWRlbmNl
Q29uc3RyYWludHMAUHJlY2VkZW5jZUNvbnN0cmFpbnQAQ2hhcgBTcGxpdABvcF9FcXVhbGl0eQBn
ZXRfSW5uZXJPYmplY3QATWljcm9zb2Z0LlNxbFNlcnZlci5TUUxUYXNrAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuRHRzLlRhc2tzLkV4ZWN1dGVTUUxUYXNrAEV4ZWN1dGVTUUxUYXNrAElEVFNQYXJhbWV0
ZXJCaW5kaW5ncwBnZXRfUGFyYW1ldGVyQmluZGluZ3MASURUU1BhcmFtZXRlckJpbmRpbmcARGF0
ZVRpbWUAZ2V0X05vdwBHZXRCaW5kaW5nAHNldF9EdHNWYXJpYWJsZU5hbWUAUGFyYW1ldGVyRGly
ZWN0aW9ucwBzZXRfUGFyYW1ldGVyRGlyZWN0aW9uAHNldF9EYXRhVHlwZQBzZXRfUGFyYW1ldGVy
TmFtZQBzZXRfUGFyYW1ldGVyU2l6ZQBvcF9JbmVxdWFsaXR5AE1haW5QaXBlAElEVFNQaXBlbGlu
ZTEwMABJRFRTQ29tcG9uZW50TWV0YURhdGFDb2xsZWN0aW9uMTAwAGdldF9Db21wb25lbnRNZXRh
RGF0YUNvbGxlY3Rpb24ASURUU0NvbXBvbmVudE1ldGFEYXRhMTAwAE5ldwBzZXRfQ29tcG9uZW50
Q2xhc3NJRABDTWFuYWdlZENvbXBvbmVudFdyYXBwZXIASW5zdGFudGlhdGUASURUU0Rlc2lnbnRp
bWVDb21wb25lbnQxMDAAUHJvdmlkZUNvbXBvbmVudFByb3BlcnRpZXMASURUU1J1bnRpbWVDb25u
ZWN0aW9uQ29sbGVjdGlvbjEwMABnZXRfUnVudGltZUNvbm5lY3Rpb25Db2xsZWN0aW9uAGdldF9D
b3VudABJRFRTUnVudGltZUNvbm5lY3Rpb24xMDAARHRzQ29udmVydABNaWNyb3NvZnQuU3FsU2Vy
dmVyLkRUU1J1bnRpbWVXcmFwAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUuV3JhcHBl
cgBJRFRTQ29ubmVjdGlvbk1hbmFnZXIxMDAAR2V0RXh0ZW5kZWRJbnRlcmZhY2UAc2V0X0Nvbm5l
Y3Rpb25NYW5hZ2VyAGdldF9JRABzZXRfQ29ubmVjdGlvbk1hbmFnZXJJRABJRFRTQ3VzdG9tUHJv
cGVydHkxMDAAU2V0Q29tcG9uZW50UHJvcGVydHkAQWNxdWlyZUNvbm5lY3Rpb25zAFJlaW5pdGlh
bGl6ZU1ldGFEYXRhAFJlbGVhc2VDb25uZWN0aW9ucwBFbXB0eQA8UHJpdmF0ZUltcGxlbWVudGF0
aW9uRGV0YWlscz57RkUzRjRCMzQtODlBMS00Q0Y0LTlBMUItQzQ1MzFFRUZDRkNCfQBTeXN0ZW0u
Q29sbGVjdGlvbnMuR2VuZXJpYwBEaWN0aW9uYXJ5YDIAJCRtZXRob2QweDYwMDAwMDctMQBUcnlH
ZXRWYWx1ZQAkJG1ldGhvZDB4NjAwMDAwNy0yAElEVFNQYXRoQ29sbGVjdGlvbjEwMABnZXRfUGF0
aENvbGxlY3Rpb24ASURUU1BhdGgxMDAASURUU091dHB1dENvbGxlY3Rpb24xMDAAZ2V0X091dHB1
dENvbGxlY3Rpb24ASURUU091dHB1dDEwMABJRFRTSW5wdXRDb2xsZWN0aW9uMTAwAGdldF9JbnB1
dENvbGxlY3Rpb24ASURUU0lucHV0MTAwAEF0dGFjaFBhdGhBbmRQcm9wYWdhdGVOb3RpZmljYXRp
b25zAElEVFNWaXJ0dWFsSW5wdXQxMDAAR2V0VmlydHVhbElucHV0AElEVFNWaXJ0dWFsSW5wdXRD
b2x1bW5Db2xsZWN0aW9uMTAwAGdldF9WaXJ0dWFsSW5wdXRDb2x1bW5Db2xsZWN0aW9uAElEVFNP
dXRwdXRDb2x1bW5Db2xsZWN0aW9uMTAwAGdldF9PdXRwdXRDb2x1bW5Db2xsZWN0aW9uAFN5c3Rl
bS5Db2xsZWN0aW9ucwBJRW51bWVyYXRvcgBHZXRFbnVtZXJhdG9yAGdldF9DdXJyZW50AGdldF9M
aW5lYWdlSUQASURUU0lucHV0Q29sdW1uMTAwAERUU1VzYWdlVHlwZQBTZXRVc2FnZVR5cGUARFRT
SW5zZXJ0UGxhY2VtZW50AEluc2VydE91dHB1dABTZXRPdXRwdXRQcm9wZXJ0eQBNb3ZlTmV4dABJ
RGlzcG9zYWJsZQBEaXNwb3NlAElEVFNFeHRlcm5hbE1ldGFkYXRhQ29sdW1uQ29sbGVjdGlvbjEw
MABnZXRfRXh0ZXJuYWxNZXRhZGF0YUNvbHVtbkNvbGxlY3Rpb24Ac2V0X0lzVXNlZABzZXRfSGFz
U2lkZUVmZmVjdHMAJCRtZXRob2QweDYwMDAwMDctMwBMaXN0YDEAVG9BcnJheQBQcmVkaWNhdGVg
MQBBcnJheQBGaW5kAElzTnVsbE9yRW1wdHkASURUU0lucHV0Q29sdW1uQ29sbGVjdGlvbjEwMABn
ZXRfSW5wdXRDb2x1bW5Db2xsZWN0aW9uAElEVFNDdXN0b21Qcm9wZXJ0eUNvbGxlY3Rpb24xMDAA
Z2V0X0N1c3RvbVByb3BlcnR5Q29sbGVjdGlvbgBzZXRfVmFsdWUASURUU091dHB1dENvbHVtbjEw
MABzZXRfRXh0ZXJuYWxNZXRhZGF0YUNvbHVtbklEAERUU1Jvd0Rpc3Bvc2l0aW9uAHNldF9FcnJv
clJvd0Rpc3Bvc2l0aW9uAHNldF9UcnVuY2F0aW9uUm93RGlzcG9zaXRpb24ARGF0YVR5cGUAU2V0
RGF0YVR5cGVQcm9wZXJ0aWVzAHNldF9NYXBwZWRDb2x1bW5JRAAkJG1ldGhvZDB4NjAwMDAwNy00
ACQkbWV0aG9kMHg2MDAwMDA3LTUAVG9Mb3dlcgBJbnNlcnRPdXRwdXRDb2x1bW5BdABnZXRfRGF0
YVR5cGUAZ2V0X0xlbmd0aABnZXRfQ29kZVBhZ2UAJCRtZXRob2QweDYwMDAwMDctNgBTZXRJbnB1
dENvbHVtblByb3BlcnR5AFNldE91dHB1dENvbHVtblByb3BlcnR5ACQkbWV0aG9kMHg2MDAwMDA3
LTcAJCRtZXRob2QweDYwMDAwMDctOAAkJG1ldGhvZDB4NjAwMDAwNy05AHNldF9Jc1NvcnRlZABz
ZXRfU29ydEtleVBvc2l0aW9uACQkbWV0aG9kMHg2MDAwMDA3LTEwACQkbWV0aG9kMHg2MDAwMDA3
LTExAHNldF9Db250YWN0SW5mbwAkJG1ldGhvZDB4NjAwMDAwNy0xMgBnZXRfU29ydEtleVBvc2l0
aW9uACQkbWV0aG9kMHg2MDAwMDA3LTEzACQkbWV0aG9kMHg2MDAwMDA3LTE0AENvbnZlcnQAVG9J
bnQzMgBJRFRTRXh0ZXJuYWxNZXRhZGF0YUNvbHVtbjEwMABHZXRJbnB1dENvbHVtbkJ5TGluZWFn
ZUlEAE1hcElucHV0Q29sdW1uAHNldF9UYXNrUmVzdWx0AEV4Y2VwdGlvbgBJRFRTT2JqZWN0MTAw
AF9WdGJsR2FwMV80AFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcwBEaXNwSWRBdHRyaWJ1
dGUAcGJzdHJOYW1lAF9WdGJsR2FwMl8yAF9WdGJsR2FwM18zAF9WdGJsR2FwNF81AE5hbWUATGVu
Z3RoAExpbmVhZ2VJRABDb2RlUGFnZQBTb3J0S2V5UG9zaXRpb24AR3VpZEF0dHJpYnV0ZQBUeXBl
SWRlbnRpZmllckF0dHJpYnV0ZQBDb21JbXBvcnRBdHRyaWJ1dGUASURUU09iamVjdE1vZGVsMTAw
AENvQ2xhc3NBdHRyaWJ1dGUAX1Z0YmxHYXAxXzEAQ29tcG9uZW50TWV0YURhdGFDb2xsZWN0aW9u
AFBhdGhDb2xsZWN0aW9uAElFbnVtZXJhYmxlAEluZGV4AF9WdGJsR2FwMV8yAEl0ZW0ARGVmYXVs
dE1lbWJlckF0dHJpYnV0ZQBnZXRfRGVzY3JpcHRpb24AcGJzdHJEZXNjcmlwdGlvbgBnZXRfQ29t
cG9uZW50Q2xhc3NJRABic3RyQ29tcG9uZW50Q2xhc3NJRABfVnRibEdhcDNfMQBfVnRibEdhcDRf
MjEAZ2V0X0NvbnRhY3RJbmZvAHBic3RyQ29udGFjdEluZm8ARGVzY3JpcHRpb24AQ29tcG9uZW50
Q2xhc3NJRABJbnB1dENvbGxlY3Rpb24AT3V0cHV0Q29sbGVjdGlvbgBDdXN0b21Qcm9wZXJ0eUNv
bGxlY3Rpb24AUnVudGltZUNvbm5lY3Rpb25Db2xsZWN0aW9uAENvbnRhY3RJbmZvAGxPdXRwdXRJ
RABsT3V0cHV0Q29sdW1uSW5kZXgAYnN0ck5hbWUAYnN0ckRlc2NyaXB0aW9uAGxJbnB1dElEAHBJ
RFRTVmlydHVhbElucHV0T2JqZWN0AGxMaW5lYWdlSUQAZVVzYWdlVHlwZQBQcm9wZXJ0eU5hbWUA
dlZhbHVlAF9WdGJsR2FwMl8xAGxJbnB1dENvbHVtbklEAGxPdXRwdXRDb2x1bW5JRABlSW5zZXJ0
UGxhY2VtZW50AF9WdGJsR2FwNF82AHBUcmFuc2FjdGlvbgBfVnRibEdhcDVfMQBsRXh0ZXJuYWxN
ZXRhZGF0YUNvbHVtbklEAENvdW50AF9WdGJsR2FwMV84AGdldF9Db25uZWN0aW9uTWFuYWdlcklE
AHBic3RyQ29ubmVjdGlvbk1hbmFnZXJJRABnZXRfQ29ubmVjdGlvbk1hbmFnZXIAcHBJRFRTQ29u
bmVjdGlvbk1hbmFnZXIAQ29ubmVjdGlvbk1hbmFnZXJJRABwdlZhbHVlAFZhbHVlAF9WdGJsR2Fw
MV8zAF9WdGJsR2FwMV8xMgBwSURUU091dHB1dABwSURUU0lucHV0AHNldF9JRABwSUQAX1Z0YmxH
YXAxXzE0AF9WdGJsR2FwMl81AGdldF9Jc1NvcnRlZABwYklzU29ydGVkAElEAE91dHB1dENvbHVt
bkNvbGxlY3Rpb24ASXNTb3J0ZWQAX1Z0YmxHYXAxXzYAZ2V0X0hhc1NpZGVFZmZlY3RzAHBiSGFz
U2lkZUVmZmVjdHMAX1Z0YmxHYXAzXzExAEhhc1NpZGVFZmZlY3RzAElucHV0Q29sdW1uQ29sbGVj
dGlvbgBFeHRlcm5hbE1ldGFkYXRhQ29sdW1uQ29sbGVjdGlvbgBWaXJ0dWFsSW5wdXRDb2x1bW5D
b2xsZWN0aW9uAFVUX1JFQURPTkxZAFVUX1JFQURXUklURQBVVF9JR05PUkVEAElQX0JFRk9SRQBJ
UF9BRlRFUgBnZXRfSXNVc2VkAHBiSXNVc2VkAElzVXNlZABfVnRibEdhcDJfMTEAX1Z0YmxHYXAy
XzYAX1Z0YmxHYXAzXzIAZ2V0X01hcHBlZENvbHVtbklEAHBsTWFwcGVkQ29sdW1uSUQAX1Z0YmxH
YXA0XzEAcGxTb3J0S2V5UG9zaXRpb24AX1Z0YmxHYXA1XzQAZURhdGFUeXBlAGxMZW5ndGgAbFBy
ZWNpc2lvbgBsU2NhbGUAbENvZGVQYWdlAGdldF9FcnJvclJvd0Rpc3Bvc2l0aW9uAHBlRGlzcG9z
aXRpb24AZ2V0X1RydW5jYXRpb25Sb3dEaXNwb3NpdGlvbgBfVnRibEdhcDZfMgBnZXRfRXh0ZXJu
YWxNZXRhZGF0YUNvbHVtbklEAHBsRXh0ZXJuYWxNZXRhZGF0YUNvbHVtbklEAE1hcHBlZENvbHVt
bklEAEVycm9yUm93RGlzcG9zaXRpb24AVHJ1bmNhdGlvblJvd0Rpc3Bvc2l0aW9uAEV4dGVybmFs
TWV0YWRhdGFDb2x1bW5JRABSRF9Ob3RVc2VkAFJEX0lnbm9yZUZhaWx1cmUAUkRfUmVkaXJlY3RS
b3cAUkRfRmFpbENvbXBvbmVudABEVF9FTVBUWQBEVF9OVUxMAERUX0kyAERUX0k0AERUX1I0AERU
X1I4AERUX0NZAERUX0RBVEUARFRfQk9PTABEVF9ERUNJTUFMAERUX0kxAERUX1VJMQBEVF9VSTIA
RFRfVUk0AERUX0k4AERUX1VJOABEVF9GSUxFVElNRQBEVF9HVUlEAERUX0JZVEVTAERUX1NUUgBE
VF9XU1RSAERUX05VTUVSSUMARFRfREJEQVRFAERUX0RCVElNRQBEVF9EQlRJTUVTVEFNUABEVF9E
QlRJTUUyAERUX0RCVElNRVNUQU1QT0ZGU0VUAERUX0lNQUdFAERUX1RFWFQARFRfTlRFWFQARFRf
REJUSU1FU1RBTVAyAERUX0JZUkVGX0kyAERUX0JZUkVGX0k0AERUX0JZUkVGX1I0AERUX0JZUkVG
X1I4AERUX0JZUkVGX0NZAERUX0JZUkVGX0RBVEUARFRfQllSRUZfQk9PTABEVF9CWVJFRl9ERUNJ
TUFMAERUX0JZUkVGX0kxAERUX0JZUkVGX1VJMQBEVF9CWVJFRl9VSTIARFRfQllSRUZfVUk0AERU
X0JZUkVGX0k4AERUX0JZUkVGX1VJOABEVF9CWVJFRl9GSUxFVElNRQBEVF9CWVJFRl9HVUlEAERU
X0JZUkVGX05VTUVSSUMARFRfQllSRUZfREJEQVRFAERUX0JZUkVGX0RCVElNRQBEVF9CWVJFRl9E
QlRJTUVTVEFNUABEVF9CWVJFRl9EQlRJTUUyAERUX0JZUkVGX0RCVElNRVNUQU1QT0ZGU0VUAERU
X0JZUkVGX0RCVElNRVNUQU1QMgBJRFRTRXhlY3V0YWJsZTEwMABJRFRTSW5mb0V2ZW50czEwMABT
VF8wY2VmMjlhOTM5M2Y0ZTRjOGRkYTAyM2Q5MTA1MjZlNS5jc3Byb2ouUHJvcGVydGllcy5SZXNv
dXJjZXMucmVzb3VyY2VzAAAAAH9TAFQAXwAwAGMAZQBmADIAOQBhADkAMwA5ADMAZgA0AGUANABj
ADgAZABkAGEAMAAyADMAZAA5ADEAMAA1ADIANgBlADUALgBjAHMAcAByAG8AagAuAFAAcgBvAHAA
ZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAHVMAVABPAEMASwA6AFMARQBRAFUARQBO
AEMARQAAJVMAZQBxAHUAZQBuAGMAZQAgAEMAbwBuAHQAYQBpAG4AZQByAAATUwBRAEwAXwBRAHUA
ZQByAHkAAA1TAEUATABFAEMAVAAAAQALRQB4AGUAYwAgAAALTwBMAEUARABCAAAZTwBMAEUARABC
ACAAUwBvAHUAcgBjAGUAAIENUAByAG8AdgBpAGQAZQByAD0AUwBRAEwATwBMAEUARABCAC4AMQA7
AEQAYQB0AGEAIABTAG8AdQByAGMAZQA9ADEANwAyAC4AMgA1AC4AMQA2ADQALgA2ADMAOwBJAG4A
aQB0AGkAYQBsACAAQwBhAHQAYQBsAG8AZwA9AEQATQBfAE0AZQB0AGEAZABhAHQAYQA7AFQAcgB1
AHMAdABlAGQAXwBDAG8AbgBuAGUAYwB0AGkAbwBuACAAPQAgAEYAYQBsAHMAZQA7ACAAVQBzAGUA
cgAgAEkARAA9AHMAYQA7AFAAYQBzAHMAdwBvAHIAZAA9AFAAYQBzAHMAdwBvAHIAZAAxADIAMwA7
AAAbUwBUAE8AQwBLADoAUwBRAEwAVABhAHMAawAACU4AYQBtAGUAACNFAHgAZQBjAHUAdABlACAA
UAByAG8AYwBlAGQAdQByAGUAABdEAGUAcwBjAHIAaQBwAHQAaQBvAG4AABVDAG8AbgBuAGUAYwB0
AGkAbwBuAAAlUwBxAGwAUwB0AGEAdABlAG0AZQBuAHQAUwBvAHUAcgBjAGUAACdQAGEAYwBrAGEA
ZwBlAFMAYQB2AGUATABvAGMAYQB0AGkAbwBuAAALLgBkAHQAcwB4AAAZTQBlAHQAYQBEAGEAdABh
AEMAbwBuAG4AAE9bAGQAYgBvAF0ALgBbAEEAVABNAFQATgBfAEcARQBUAF8AQwBPAE4ATgBFAEMA
VABJAE8ATgBfAEQARQBUAEEASQBMAFMAXwBTAFAAXQAAE0MAbABpAGUAbgB0AF8ASQBEAAAVQABD
AGwAaQBlAG4AdABfAEkARAAAF0AAUAByAG8AagBlAGMAdABfAEkARAAAFVAAcgBvAGoAZQBjAHQA
XwBJAEQAABlAAFQAZQBtAHAAbABhAHQAZQBfAEkAZAAAF1QAZQBtAHAAbABhAHQAZQBfAEkAZAAA
JUAAUABLAEcAXwBTAGEAdgBlAF8ATABvAGMAYQB0AGkAbwBuAAAZQABTAHQAYQB0AHUAcwBfAGMA
bwBkAGUAABFAAE0AZQBzAHMAYQBnAGUAABFAAFQAbwBvAGwAXwBJAEQAAA9UAG8AbwBsAF8ASQBE
AAATUwBSAEMAXwBRAHUAZQByAHkAABVUAHIAYQBuAHMAXwB0AHkAcABlAAADIAAAE00ARQBSAEcA
RQBKAE8ASQBOAAAVUwBSAEMAXwBRAHUAZQByAHkAMgAADUwATwBPAEsAVQBQAAATTABLAFAAXwBR
AHUAZQByAHkAABdMAEsAUABfAEMAbwBsAHUAbQBuAHMAABNEAFMAVABfAFQAYQBiAGwAZQAAG1QA
ZQBtAHAAbABhAHQAZQBfAE4AYQBtAGUAABNUAGEAcwBrAF8AbgBhAG0AZQAAFVQAcgBhAG4AcwBf
AFIAdQBsAGUAACtEAFMAVABfAEMAbwBuAG4AZQBjAHQAaQBvAG4AXwBTAHQAcgBpAG4AZwAAJVMA
bwB1AHIAYwBlAF8AQwBvAG4AbgBfAFMAdAByAGkAbgBnAAATRABlAGwAdABhAEwAbwBhAGQAACNP
AEwARQBEAEIAIABEAGUAcwB0AGkAbgBhAHQAaQBvAG4AACVTAFQATwBDAEsAOgBQAGkAcABlAGwA
aQBuAGUAVABhAHMAawAAA04AACdWAF8AUwBvAHUAcgBjAGUAUAByAG8AZAB1AGMAdABOAGEAbQBl
AAAJVQBzAGUAcgAAD1QARQBTAFQASQBOAEcAABVFAFgARQBDAFUAVABFAFMAUQBMAAAHUABSAEUA
AAMkAAANUwBUAFIASQBOAEcAABFEAEEAVABFAFQASQBNAEUAAAlEAEEAVABFAAADMAAADVUAcwBl
AHIAOgA6AAANUwBPAFUAUgBDAEUAAANZAAAJRABGAFQAXwAALUQAVABTAEEAZABhAHAAdABlAHIA
LgBPAGwAZQBEAGIAUwBvAHUAcgBjAGUAABdPAEwARQBEAEIAUwBvAHUAcgBjAGUAABVBAGMAYwBl
AHMAcwBNAG8AZABlAAAVUwBxAGwAQwBvAG0AbQBhAG4AZAAAF08AbABlAEQAQgBTAG8AdQByAGMA
ZQAAIUMATwBOAEQASQBUAEkATwBOAEEATABTAFAATABJAFQAABtEAEUAUgBJAFYARQBEAEMATwBM
AFUATQBOAAAZQwBIAEEAUgBBAEMAVABFAFIATQBBAFAAABNBAEcARwBSAEUARwBBAFQARQAAEVIA
TwBXAEMATwBVAE4AVAAACVMATwBSAFQAADFTAE8AUgBUACYARQBMAEkATQBJAE4AQQBUAEUARABV
AFAATABJAEMAQQBUAEUAUwAAEVUATgBJAE8ATgBBAEwATAAAC00ARQBSAEcARQAAGU8ATABFAEQA
QgBDAE8ATQBNAEEATgBEAAATTQBVAEwAVABJAEMAQQBTAFQAACVFAHgAZQBjAHUAdABlACAAUABy
AG8AYwBlAGQAdQByAGUAXwAAO0QAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4AQwBvAG4AZABpAHQA
aQBvAG4AYQBsAFMAcABsAGkAdAAAHUYAaQBsAHQAZQByAF8AUgBvAHUAdABlAHIAXwAAb0UAdgBh
AGwAdQBhAHQAZQBzACAAYQBuAGQAIABkAGkAcgBlAGMAdABzACAAcgBvAHcAcwAgAGkAbgAgAGEA
IABkAGEAdABhAHMAZQB0ACAAYgBhAHMAZQBkACAAYQAgAGMAbwBsAHUAbQBuAC4AACFDAG8AbgBk
AGkAdABpAG8AbgBhAGwAUwBwAGwAaQB0AAAbRABlAHIAaQB2AGUAZABDAG8AbAB1AG0AbgAAGUMA
aABhAHIAYQBjAHQAZQByAE0AYQBwAAATQQBnAGcAcgBlAGcAYQB0AGUAAA1MAG8AbwBrAHUAcAAA
EVIAbwB3AEMAbwB1AG4AdAAACVMAbwByAHQAABFVAG4AaQBvAG4AQQBsAGwAAAtNAGUAcgBnAGUA
ABNNAGUAcgBnAGUASgBvAGkAbgAAE00AdQBsAHQAaQBDAGEAcwB0AAADWwAAA10AAB9FAHYAYQBs
AHUAYQB0AGkAbwBuAE8AcgBkAGUAcgAAJUYAcgBpAGUAbgBkAGwAeQBFAHgAcAByAGUAcwBzAGkA
bwBuAAA1RABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBEAGUAcgBpAHYAZQBkAEMAbwBsAHUAbQBu
AAApRABlAHIAaQB2AGUAZABDAG8AbABUAHIAYQBuAHMAZgBvAHIAbQBfAACAhU8AdgBlAHIAcgBp
AGQAZQAgAHQAaABlACAAbwByAGcAaQBuAGEAbAAgAGMAbwBsAHUAbQBuACAAewAwAH0AIAB3AGkA
dABoACAATwBUAEgARQBSAFMAIABpAGYAIAB0AGgAZQAgAHMAdAByAGkAbgBnACAAaQBzACAATgBV
AEwATAAuAAAVRQB4AHAAcgBlAHMAcwBpAG8AbgAAM0QAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4A
QwBoAGEAcgBhAGMAdABlAHIATQBhAHAAADFjAGEAcABpAHQAYQBsAGkAcwBlACAAYQBsAGwAIABp
AG4AaQB0AGkAYQBsAHMAXwAAL2MAYQBwAGkAdABhAGwAaQBzAGUAIABhAGwAbAAgAGkAbgBpAHQA
aQBhAGwAcwAALUQAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4AQQBnAGcAcgBlAGcAYQB0AGUAABVB
AGcAZwByAGUAZwBhAHQAZQBfAAALYwBvAHUAbgB0AAARYwBvAHUAbgB0AGEAbABsAAAbYwBvAHUA
bgB0AGQAaQBzAHQAaQBuAGMAdAAAB3MAdQBtAAAHbQBhAHgAAAdtAGkAbgAAJ0EAZwBnAHIAZQBn
AGEAdABpAG8AbgBDAG8AbAB1AG0AbgBJAGQAAB9BAGcAZwByAGUAZwBhAHQAaQBvAG4AVAB5AHAA
ZQAAC0kAcwBCAGkAZwAANUEAZwBnAHIAZQBnAGEAdABpAG8AbgBDAG8AbQBwAGEAcgBpAHMAbwBu
AEYAbABhAGcAcwAAJ0QAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4ATABvAG8AawB1AHAAAA9OAE8A
TQBBAFQAQwBIAAADIwAADyAAVwBIAEUAUgBFACAAAA9MAG8AbwBrAHUAcABfAAATQwBhAGMAaABl
AFQAeQBwAGUAAB9OAG8ATQBhAHQAYwBoAEIAZQBoAGEAdgBpAG8AcgAAB0kATgBfAAArSgBvAGkA
bgBUAG8AUgBlAGYAZQByAGUAbgBjAGUAQwBvAGwAdQBtAG4AAAlmAHIAbwBtAAADfgAAL0MAbwBw
AHkARgByAG8AbQBSAGUAZgBlAHIAZQBuAGMAZQBDAG8AbAB1AG0AbgAAK0QAVABTAFQAcgBhAG4A
cwBmAG8AcgBtAC4AUgBvAHcAQwBvAHUAbgB0AAAhZwBlAHQAIAByAG8AdwAgAGMAbwB1AG4AdABl
AHIAXwAAIWcAZQB0AHMAIAByAG8AdwAgAGMAbwB1AG4AdABlAHIAABlWAGEAcgBpAGEAYgBsAGUA
TgBhAG0AZQAAI0QAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4AUwBvAHIAdAAAHVMAbwByAHQAVABy
AGEAbgBzAGYAbwByAG0AXwAAG1MAbwByAHQAYwBvAG0AcABvAG4AZQBuAHQAAAlEAEUAUwBDAAAl
TgBlAHcAUwBvAHIAdABLAGUAeQBQAG8AcwBpAHQAaQBvAG4AACdFAGwAaQBtAGkAbgBhAHQAZQBE
AHUAcABsAGkAYwBhAHQAZQBzAAArRABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBVAG4AaQBvAG4A
QQBsAGwAACVVAG4AaQBvAG4AIABBAGwAbAAgAGMAbwBsAHUAbQBuAHMAXwAAJUQAVABTAFQAcgBh
AG4AcwBmAG8AcgBtAC4ATQBlAHIAZwBlAAAlTQBlAHIAZwBlACAAQQBsAGwAIABjAG8AbAB1AG0A
bgBzAF8AADNEAFQAUwBUAHIAYQBuAHMAZgBvAHIAbQAuAE8ATABFAEQAQgBDAG8AbQBtAGEAbgBk
AAAfTwBMAEUAIABEAEIAIABDAG8AbQBtAGEAbgBkAF8AABlPAEwARQBEAEIAUwBvAHUAcgBjAGUA
MQAAG08ATABFAEQAQgAgAFMAbwB1AHIAYwBlADIAAA1yAG8AdwBfAGkAZAAAEU8AUgBEAEUAUgAg
AEIAWQAAFSAATwByAGQAZQByACAAYgB5ACAAACVNAGUAcgBnAGUAUwBvAHIAdABUAHIAYQBuAHMA
ZgBvAHIAbQAAC1MAbwByAHQAMQAALUQAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4ATQBlAHIAZwBl
AEoAbwBpAG4AAAttAGUAcgBnAGUAABFKAG8AaQBuAFQAeQBwAGUAAC1EAFQAUwBUAHIAYQBuAHMA
ZgBvAHIAbQAuAE0AdQBsAHQAaQBjAGEAcwB0AAAVTQB1AGwAdABpAGMAYQBzAHQAXwAAE00AdQBs
AHQAaQBjAGEAcwB0AAAxRABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBEAGEAdABhAEMAbwBuAHYA
ZQByAHQAADNEAGEAdABhACAAQwBvAG4AdgBlAHIAcwBpAG8AbgAgAEMAbwBtAHAAbwBuAGUAbgB0
AAAtRABhAHQAYQBDAG8AbgB2AGUAcgB0ACAAQwBvAG0AcABvAG4AZQBuAHQAXwAAFUMAbwBwAHkA
QwBvAGwAdQBtAG4AAClQAHIAbwB2AGkAZABlAHIAPQBTAFEATABPAEwARQBEAEIALgAxADsAAIHR
UwBlAGwAZQBjAHQAIABDAE8ATABVAE0ATgBfAE4AQQBNAEUALABEAEEAVABBAF8AVABZAFAARQAs
AEkAcwBuAHUAbABsACgAQwBIAEEAUgBBAEMAVABFAFIAXwBNAEEAWABJAE0AVQBNAF8ATABFAE4A
RwBUAEgALAAwACkAIABBAHMAIABDAEgAQQBSAEEAQwBUAEUAUgBfAE0AQQBYAEkATQBVAE0AXwBM
AEUATgBHAFQASAAsAEkAcwBuAHUAbABsACgATgBVAE0ARQBSAEkAQwBfAFAAUgBFAEMASQBTAEkA
TwBOACwAMAApACAAQQBzACAATgBVAE0ARQBSAEkAQwBfAFAAUgBFAEMASQBTAEkATwBOACwASQBz
AG4AdQBsAGwAKABOAFUATQBFAFIASQBDAF8AUwBDAEEATABFACwAMAApACAAQQBzACAATgBVAE0A
RQBSAEkAQwBfAFMAQwBBAEwARQAgAGYAcgBvAG0AIABJAG4AZgBvAHIAbQBhAHQAaQBvAG4AXwBT
AGMAaABlAG0AYQAuAEMATwBMAFUATQBOAFMAIAB3AGgAZQByAGUAIABUAEEAQgBMAEUAXwBOAEEA
TQBFAD0AJwABAycAARdDAE8ATABVAE0ATgBfAE4AQQBNAEUAABNEAEEAVABBAF8AVABZAFAARQAA
MUMASABBAFIAQQBDAFQARQBSAF8ATQBBAFgASQBNAFUATQBfAEwARQBOAEcAVABIAAAjTgBVAE0A
RQBSAEkAQwBfAFAAUgBFAEMASQBTAEkATwBOAAAbTgBVAE0ARQBSAEkAQwBfAFMAQwBBAEwARQAA
D3YAYQByAGMAaABhAHIAAAljAGgAYQByAAARbgB2AGEAcgBjAGgAYQByAAAPbgB1AG0AZQByAGkA
YwAAC2YAbABvAGEAdAAAEWQAYQB0AGUAdABpAG0AZQAACWQAYQB0AGUAAA9pAG4AdABlAGcAZQBy
AAAHaQBuAHQAAA1iAGkAZwBpAG4AdAAAEXMAbQBhAGwAbABpAG4AdAAAD3QAaQBuAHkAaQBuAHQA
AAdiAGkAdAAANVMAbwB1AHIAYwBlAEkAbgBwAHUAdABDAG8AbAB1AG0AbgBMAGkAbgBlAGEAZwBl
AEkARAAAN0QAVABTAEEAZABhAHAAdABlAHIALgBPAGwAZQBEAGIARABlAHMAdABpAG4AYQB0AGkA
bwBuAAAjTwBMAEUARABCAEQAZQBzAHQAaQBuAGEAdABpAG8AbgBfAAAVTwBwAGUAbgBSAG8AdwBz
AGUAdAAAH0YAYQBzAHQATABvAGEAZABPAHAAdABpAG8AbgBzAAAzVABBAEIATABPAEMASwAsAEMA
SABFAEMASwBfAEMATwBOAFMAVABSAEEASQBOAFQAUwAAQUQAYQB0AGEAQwBvAG4AdgBlAHIAdAAg
AEMAbwBtAHAAbwBuAGUAbgB0AF8ATQB1AGwAdABpAEMAYQBzAHQAXwAAA18AACNFAHIAcgBvAHIA
UABhAGMAawBhAGcAZQAuAGQAdABzAHgAAAAANEs//qGJ9EyaG8RTHu/PywAIt3pcVhk04IkIiYRd
zYCAzJEDBhIVAwYSGQMgAAEEAAASFQQAABIZBQABARIZBAgAEhUECAASGQMGEgwEAAASDAQIABIM
AgYIAwYRFAQAAAAABAEAAAAEIAEBDgQgAQEIBgABElERVQQgABJZBiACAQ4SWQQHARIVBSABARFh
CAEAAgAAAAAAAwAAAQMGEhwEIAECDgMgAA4GIAICDhF1BCAAEn0GIAESgIEOBCABAQIFIAASgJEF
IAASgJUGIAESgJkcAyAAHAQgAQgOBCABAggFAAIODg4FIAASgKEGIAESgKUOBgACDg4dHAUgABKA
rQYgARKAsRwFIAIBHBwGAAMODg4OCSADAQ4SeRKAtQYgAQESgL0GIAEBEYDJBSACAQ4cBiABARGA
1QYgAQERgNkFIAASgN0IIAESgM0SgM0FIAARgOkGIAEBEoC5BSAAEoDtBCABHA4FIAIODg4DIAAC
BSAAEoD1CyACEoD5EoCBEoCBCSAEEoCZDgIOHAYgAR0OHQMFAAICDg4FIAASgQUFIAASgQkFAAAR
gQ0GIAESgQkIBiABARGBEQQgAQEcBCAAEigEIAASLAQgABIwBCAAEjgDIAAIBSABEjwcCAABEoE5
EoClBSABARJABiACEkQOHAIGDggGFRKBRQIOCAcVEoFFAg4IByACARMAEwEIIAICEwAQEwEFAAIO
HBwEIAASTAQgABJQBCAAElQFIAESWBwEIAASXAUgARJgHAcgAgESWBJgBCAAEmQEIAASaAQgABJs
BSAAEoFtBSABEhwcCiAEEnAIEmQIEXQHIAISWBF4CAcgAxJECA4cBCAAEnwGFRKBhQEOBSABARMA
BSAAHRMABhUSgYkBDgUgAgEcGA8QAQIeAB0eABUSgYkBHgADCgEOBAABAg4FIAASgIAFAAIODhwF
IAASgIQFIAESRBwFIAASgIgGIAEBEYCMBCAAEkQKIAUBEYCQCAgICAkgBBKAiAgIDg4FIAARgJAI
IAQSRAgIDhwGIAESgIgcBSABEiwcBAABCBwGIAESgJQcBiACCAgRdAUgARJwCAggAxKAlAgICAUA
AQ4dHIH4B4EHEnkSgIUSgI0OCBKAgRKApRKAqRKAuRKAvRKAzRKAzRKAzRKAzRKAzRKAzRKAzRKA
4RKA7Q4ODg4ODg4ODg4ICBKApRKApRKAgQ4IHQ4OCBKAqQ4SgQEOEoEJEoCpEiASLBI0EiwSLBIs
EiwSLBIsEiwSLBIsEiwSLBIsEiwSLBIsHQ4dDg4dDg4OCBKAgRKAqRKBAQ4ODg4SgQkSMBJgEmQS
aBJYCAgOHQ4OEhwSWBIwEmASZBJoEkQdDhUSgYUBDg4ODg4OEhwIDhUSgYkBDhIYEnASgIgSRBIw
EmASZBJoElgSHBIwEmASZBJYEmgSHA4OCBKAiAgSRBKAiAgSRBKAiAgSRBIwEmASZBJoDg4SHBJw
HQ4SWA4ODhKAiBIwDg4SMB0OEnASZAgOEhwIEhwSMBIwEjASNBIsDh0OHQ4SMBJkEnASHBIcEjAS
YBJkCBIcEmASZBIcEkQSRBJYCBIwEmASZAgdDg4SLBIwEoC5EoC9EoDhEoDtCA4OCAgIEmQSWAgS
gIgSLBIwEmASZBJgEmQSgIASfBJsEoCIEoCUEnAOCB0ODhIsEjASgLkSgL0SgOESgO0IDg4ICAgS
ZBJYCBKAiBIsEjASYBJkEmASZBKAgBJ8EmwSgIgSgJQScA4dAx0OCA4IEoFtEoF9HB0OCB0cCAEA
DQAAAAAAARMIAQBlAAAAAAAIAQBmAAAAAAAIAQBsAAAAAAAIAQBzAAAAAAAIAQB6AAAAAAADKAAO
BSgAEYCQAygACCkBACRENUREQjYyQy1CQkNGLTQ3OUYtQkFDMi00MzgyQTk1MEIzNTYAACkBACQ0
MTBFOTFFOS0yQzQ1LTQ4N0EtODUxQS01QjNERkU3NDczMjkAAAUgAQESUV8BAFpTeXN0ZW0uT2Jq
ZWN0LCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tl
eVRva2VuPWI3N2E1YzU2MTkzNGUwODkAAAgBAAwAAAAAAAEcBCgAEigEKAASTAgBAAAAAAAAAAEb
CAEADgAAAAAABSgBEiwcKQEAJDA3MDc1MEYyLTYzMUQtNEUzRS04RkU1LUJFNkIxQ0RGMjYzMgAA
CQEABEl0ZW0AAAgBAGcAAAAAAAgBAGgAAAAAAAgBAGkAAAAAAAgBAHIAAAAAAAgBAIUAAAAAAAQo
ABJcBCgAElQFKAASgIQEKAASOCkBACQ4ODdCRDA2MS04MkQ0LTRGMDYtQTIyMi0zMzdENDJFN0Y4
OTYAACkBACRGRjVERDNGMS05OUMxLTRGRkItQjA5Ny0xQjFCMkI5RTlCMkQAAAgBAAsAAAAAAAgB
ABAAAAAAAAgBABEAAAAAAAgBABMAAAAAAAgBABQAAAAAAAgBABUAAAAAAAgBABcAAAAAAAgBAB4A
AAAAAAEZCAEAHwAAAAAACAEAIQAAAAAABSgBEjwcKQEAJEQ5NDI4ODkzLThBOTUtNERGRC04MjZD
LTQwMzVFNTcyOEM2MAAABCAAEkAEKAASQCkBACREN0ZEMURGQy0zNjRFLTQ3QjMtOTU5QS1DNjZD
MUREQjNEQTUAACkBACRFNDY5OEE3Ri05RTQwLTQ3QUQtQTZDNi03ODRCRkFDQTBDQTkAAAMoABwp
AQAkQTA4MzZFNUUtNTBDRi00QjI4LTk1NzctRTI1MTczNzI1RjBCAAApAQAkNkEzMzFFQkQtQTk1
MC00M0I1LTgzQTItMDMzNTg1RjQxN0Y3AAApAQAkRTI1RTIzNEMtMEY5QS00QTJELTkzQTgtMUFB
MDk3RTYzNTVDAAAFKAESWBwpAQAkRTcwMDcwNkMtRjIzQy00MDBBLUJENjItQUM3NjBCMTFCOTg1
AAAIAQBqAAAAAAAIAQBvAAAAAAAEKAASbAMoAAIpAQAkODlCOEUzMDYtN0MyQS00NzJGLTg4NTAt
NzIwMkI0REFGMTdCAAAFKAESYBwpAQAkNkFGNDE1ODQtNzFGMi00MDFFLUIxM0UtQzY3OEI5MkQz
QTVBAAAIAQB0AAAAAAAFKAASgIAEKAASfCkBACQ3MzBENzIyQy0yRTAwLTRDN0EtODY0MS0wRDM3
ODM1M0E5NDQAAAQoABJoKQEAJDk5NDRGNjg0LTQ5QzQtNDM1NC1BQjdGLUVFNDIyQTY1MEUwRQAA
CAEA/P///wAAgKssAACApVN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2aWNlcy5DdXN0b21NYXJz
aGFsZXJzLkVudW1lcmF0b3JUb0VudW1WYXJpYW50TWFyc2hhbGVyLCBDdXN0b21NYXJzaGFsZXJz
LCBWZXJzaW9uPTQuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49YjAzZjVm
N2YxMWQ1MGEzYQAFKAESHBwpAQAkNzdGODQwMDItQzg3OC00QjM4LTg0MkQtQjFFMjVBOUZCQ0M4
AAAGKAESgIgcKQEAJEJDOTQyRkVDLTJDRUEtNDY2NS1BMjkxLTM4MjAwQTBDOTU5RgAACAEAawAA
AAAAKQEAJDFDMTlENEY4LTEwNzUtNDI5QS05QUQ5LTU3QjJDM0Y3MTg4NAAAAwYRdAQCAAAABSAC
AQ4OXwEAJDBCNEFGMThCLTM2OTktNDI4NC05QkY3LUMyOURCRTNENzhCRjVNaWNyb3NvZnQuU3Fs
U2VydmVyLkR0cy5QaXBlbGluZS5XcmFwcGVyLkRUU1VzYWdlVHlwZQAAAwYReGUBACQwQjRBRjE4
Qi0zNjk5LTQyODQtOUJGNy1DMjlEQkUzRDc4QkY7TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlw
ZWxpbmUuV3JhcHBlci5EVFNJbnNlcnRQbGFjZW1lbnQAAAYoARKAlBwpAQAkMjkwQzg4RTktMUE5
Ni00QTJBLThGNDEtNDU0QjQ4QUM5MEFFAAApAQAkMjQyNDRENDgtMjc2NC00Rjc5LThFMzMtNEM5
QTdCOEQ0RTJEAAAFKAESRBwpAQAkMkQ5MUQ2RjUtMzQ5RS00NTJGLTgwRTQtRTc3OTNGMDhDODQz
AAAIAQBuAAAAAAAFIAARgIwIAQB2AAAAAAAFKAARgIwpAQAkM0M3RkNCRTAtODI4Ny00Qjk3LUI2
MzItN0M2MEM2M0RBQUY0AAAEBhGAjAQEAAAAZAEAJDBCNEFGMThCLTM2OTktNDI4NC05QkY3LUMy
OURCRTNENzhCRjpNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5XcmFwcGVyLkRUU1Jv
d0Rpc3Bvc2l0aW9uAAAEBhGAkAQDAAAABAUAAAAEBgAAAAQHAAAABAsAAAAEDgAAAAQQAAAABBEA
AAAEEgAAAAQTAAAABBQAAAAEFQAAAARAAAAABEgAAAAEgAAAAASBAAAABIIAAAAEgwAAAASFAAAA
BIYAAAAEhwAAAASRAAAABJIAAAAELQEAAAQuAQAABC8BAAAEMAEAAAQCQAAABANAAAAEBEAAAAQF
QAAABAZAAAAEB0AAAAQLQAAABA5AAAAEEEAAAAQRQAAABBJAAAAEE0AAAAQUQAAABBVAAAAEQEAA
AARIQAAABINAAAAEhUAAAASGQAAABIdAAAAEiEAAAASJQAAABIpAAABaAQAkQjQ1MkRBNUEtNTRF
Mi00RjYzLThENjEtMUIxOTM3NDQ5MDREME1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlJ1bnRpbWUu
V3JhcHBlci5EYXRhVHlwZQAAKQEAJDVDQ0QxNDRFLTUxQUQtNDExRi1BOUQ0LUU5QUU1MDE2NTBG
NAAAKQEAJDIwM0UyNEJELTUyMDMtNEM3Ni1BRkM3LTdDODU0NUVCQTFBMAAAKQEAJDRFODUzNTc0
LUMyRTMtNENBRS1CNzkxLTJENEE1RDFEMEM5OAAAKQEAJDQ5MDUwNzI3LTFGMzQtNDRCQi04MDYz
LTE1MkZFRkVFNEQwMAAAKQEAJDJDNjRGODNCLThFN0YtNEFDNi05MTM4LTc1QkYzNjMwMDJFRQAA
EAEAC0ZpcmVXYXJuaW5nAABHAQAaLk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjABAFQOFEZyYW1l
d29ya0Rpc3BsYXlOYW1lEC5ORVQgRnJhbWV3b3JrIDQvAQAqU1RfMGNlZjI5YTkzOTNmNGU0Yzhk
ZGEwMjNkOTEwNTI2ZTUuY3Nwcm9qAAAFAQAAAAANAQAISGV4YXdhcmUAAB4BABlDb3B5cmlnaHQg
QCBIZXhhd2FyZSAyMDE1AAAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MB
AAAM/wAAAAAAAAAAAAAu/wAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIP8AAAAAAAAAAAAAAAAA
AAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAAAAAA
AAAAAAAAAQAAAAAASAAAAFgAAQA0BAAAAAAAAAAAAAA0BDQAAABWAFMAXwBWAEUAUgBTAEkATwBO
AF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEA13ZYFwAAAQDXdlgXPwAAAAAAAAAEAAAAAgAAAAAA
AAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEAbgBz
AGwAYQB0AGkAbwBuAAAAAAAAALAElAMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBvAAAA
cAMAAAEAMAAwADAAMAAwADQAYgAwAAAANAAJAAEAQwBvAG0AcABhAG4AeQBOAGEAbQBlAAAAAABI
AGUAeABhAHcAYQByAGUAAAAAAIAAKwABAEYAaQBsAGUARABlAHMAYwByAGkAcAB0AGkAbwBuAAAA
AABTAFQAXwAwAGMAZQBmADIAOQBhADkAMwA5ADMAZgA0AGUANABjADgAZABkAGEAMAAyADMAZAA5
ADEAMAA1ADIANgBlADUALgBjAHMAcAByAG8AagAAAAAAQAAPAAEARgBpAGwAZQBWAGUAcgBzAGkA
bwBuAAAAAAAxAC4AMAAuADUAOQA3ADYALgAzADAANAAyADMAAAAAAIAALwABAEkAbgB0AGUAcgBu
AGEAbABOAGEAbQBlAAAAUwBUAF8AMABjAGUAZgAyADkAYQA5ADMAOQAzAGYANABlADQAYwA4AGQA
ZABhADAAMgAzAGQAOQAxADAANQAyADYAZQA1AC4AYwBzAHAAcgBvAGoALgBkAGwAbAAAAAAAWAAa
AAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAA
SABlAHgAYQB3AGEAcgBlACAAMgAwADEANQAAAIgALwABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABl
AG4AYQBtAGUAAABTAFQAXwAwAGMAZQBmADIAOQBhADkAMwA5ADMAZgA0AGUANABjADgAZABkAGEA
MAAyADMAZAA5ADEAMAA1ADIANgBlADUALgBjAHMAcAByAG8AagAuAGQAbABsAAAAAAB4ACsAAQBQ
AHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAAAFMAVABfADAAYwBlAGYAMgA5AGEAOQAzADkAMwBmADQA
ZQA0AGMAOABkAGQAYQAwADIAMwBkADkAMQAwADUAMgA2AGUANQAuAGMAcwBwAHIAbwBqAAAAAABE
AA8AAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADUAOQA3ADYALgAzADAA
NAAyADMAAAAAAEgADwABAEEAcwBzAGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAu
ADUAOQA3ADYALgAzADAANAAyADMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw
AAAMAAAAQD8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="132,42"
          Id="Package\Script Task"
          TopLeft="45.5,40.084905660377" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>