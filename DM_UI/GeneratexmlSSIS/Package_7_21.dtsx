<?xml version="1.0"?>
<DTS:Executable
  DTS:refId="Package" xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:CreatorName="CORP\30655"
  DTS:CreatorComputerName="EBII433F1"
  DTS:CreationDate="10/20/2015 4:24:32 PM"
  DTS:PackageType="5"
  DTS:VersionBuild="793"
  DTS:VersionGUID="{C19E85FF-D271-41E6-9B20-BC10993E02AF}"
  DTS:LastModifiedProductVersion="11.0.2100.60"
  DTS:LocaleID="1033"
  DTS:ObjectName="Automaton"
  DTS:DTSID="{93C41225-8214-4F3D-B3A3-0FE2F7EC56BB}"
  DTS:CreationName="SSIS.Package.3">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="Client_ID"
      DTS:DTSID="{572184DF-867A-4B43-982F-D13E7DCB57C4}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">0001</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="MetaDataConn"
      DTS:DTSID="{43158A1B-3448-463E-9253-A18D0DFD8AB2}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="PackageSaveLocation"
      DTS:DTSID="{EEF75C9C-19CB-492B-A694-B70A78AE4AB1}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">C:\\Users\\33278\\Documents\\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="Project_ID"
      DTS:DTSID="{6F24653C-D21C-454B-8B05-2D20FD021A06}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="8">BaloisePOC</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="2345"
      DTS:ObjectName="Template_Id"
      DTS:DTSID="{64FDE503-DF86-4143-AD9E-D03CF28D5AB7}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="3">10083</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:Namespace="User"
      DTS:IncludeInDebugDump="6789"
      DTS:ObjectName="Tool_ID"
      DTS:DTSID="{C29A775C-522B-46F9-9579-04D519DACCFD}"
      DTS:CreationName="">
      <DTS:VariableValue
        DTS:DataType="3">1</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
      DTS:ThreadHint="0"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:DTSID="{6D968888-5FBA-4110-8CA2-142299E63E26}"
      DTS:Description="Script Task"
      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">
      <DTS:Variables>
        <DTS:Variable
          DTS:Namespace="User"
          DTS:IncludeInDebugDump="2345"
          DTS:ObjectName="SQL_Query"
          DTS:DTSID="{C5DA083B-5245-47C6-8EB7-F62AFE1BA8CB}"
          DTS:CreationName="">
          <DTS:VariableValue
            DTS:DataType="8"
            xml:space="preserve"></DTS:VariableValue>
        </DTS:Variable>
      </DTS:Variables>
      <DTS:EventHandlers>
        <DTS:EventHandler
          DTS:refId="Package\Script Task.EventHandlers[OnError]"
          DTS:EventID="153018280"
          DTS:EventName="OnError"
          DTS:LocaleID="-1"
          DTS:DTSID="{B48DB7DD-38C5-4F59-86D7-B0FC2231BA0E}"
          DTS:CreationName="OnError">
          <DTS:Variables>
            <DTS:Variable
              DTS:Namespace="System"
              DTS:IncludeInDebugDump="6789"
              DTS:ObjectName="Propagate"
              DTS:DTSID="{4E2FDBD2-78B6-445A-AFE1-F6A53924D3D0}"
              DTS:Description="The propagate property of the event"
              DTS:CreationName="">
              <DTS:VariableValue
                DTS:DataType="11">-1</DTS:VariableValue>
            </DTS:Variable>
          </DTS:Variables>
          <DTS:Executables />
        </DTS:EventHandler>
      </DTS:EventHandlers>
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_0cef29a9393f4e4c8dda023d910526e5"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::SQL_Query,User::Client_ID,User::MetaDataConn,User::PackageSaveLocation,User::Project_ID,User::Template_Id,User::Tool_ID">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="st_0cef29a9393f4e4c8dda023d910526e5.csproj"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="utf-16"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <!-- This section defines project-level properties.

       Configuration - Specifies whether the default configuration is Release or Debug.
       Platform - Specifies what CPU the output of this project can run on.
       OutputType - Must be "Library" for VSTA.
       NoStandardLibraries - Set to "false" for VSTA.
       RootNamespace - In C#, this specifies the namespace given to new files.
                       In Visual Basic, all objects are wrapped in this namespace at runtime.
       AssemblyName - Name of the output assembly.
  -->
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <OutputType>Library</OutputType>
    <NoStandardLibraries>false</NoStandardLibraries>
    <RootNamespace>ST_0cef29a9393f4e4c8dda023d910526e5.csproj</RootNamespace>
    <AssemblyName>ST_0cef29a9393f4e4c8dda023d910526e5.csproj</AssemblyName>
    <ProjectGuid>{C0FCFF17-7581-4520-BCC1-8ED2A17FE389}</ProjectGuid>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Debug" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <PlatformTarget>x86</PlatformTarget>
  </PropertyGroup>
  <!-- This section defines properties that are set when the "Release" configuration is
       selected.

       DebugSymbols - If true, create symbols (.pdb). If false, do not create symbols.
       Optimize - If true, optimize the build output. If false, do not optimize.
       OutputPath - Output path of the project relative to the project file.
       EnableUnmanagedDebugging - If true, starting the debugger will attach both managed and unmanaged debuggers.
       DefineConstants - Constants defined for the preprocessor.
       Warning Level - Warning level for the compiler.
  -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <!-- This section enables pre- and post-build steps. However,
       it is recommended that MSBuild tasks be used instead of these properties.
  -->
  <PropertyGroup>
    <PreBuildEvent>
    </PreBuildEvent>
    <PostBuildEvent>
    </PostBuildEvent>
  </PropertyGroup>
  <!-- This sections specifies references for the project. -->
  <ItemGroup>
    <Reference Include="Microsoft.SqlServer.Dts.Design, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=MSIL">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SQLServer.DTSRuntimeWrap, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86">
      <EmbedInteropTypes>True</EmbedInteropTypes>
    </Reference>
    <Reference Include="Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91, processorArchitecture=x86" />
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <!-- This section defines the user source files that are part of the
       project.

       Compile - Specifies a source file to compile.
       EmbeddedResource - Specifies a .resx file for embedded resources.
       None - Specifies a file that is not to be passed to the compiler (for instance,
              a text file or XML file).
       AppDesigner - Specifies the directory where the application properties files can
                     be found.
  -->
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
    <!-- Include the default configuration information and metadata files for the add-in.
         These files are copied to the build output directory when the project is
         built, and the path to the configuration file is passed to add-in on the command
         line when debugging.
    -->
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="devenv.exe" DebugInfoCommandLine="/vstaHostDebugUri:&quot;vstadebugcc3ac67d-0b18-4221-a106-262fb5ace362/f9652827-6f67-44de-98e6-1eee4cddd063&quot;" />
        <Host Name="SSIS_ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
  <PropertyGroup>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
  </PropertyGroup>
  <PropertyGroup>
    <TargetFrameworkProfile>
    </TargetFrameworkProfile>
  </PropertyGroup>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[using System;
using System.Data;
using System.Data.SqlClient;
using Microsoft.SqlServer.Dts.Runtime;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using System.Data.Sql;
using Microsoft.SqlServer.Dts.Tasks;
using Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask;
using ExecuteSQLTask=Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask;
using Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.Connections;

using System.Data.SqlTypes;
using Microsoft.SqlServer.Server;
using System.IO;
using System.Collections.Generic;

namespace ST_e9c9cb3a5ac449d293ddeb5242adec78.csproj
{
    [Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
    public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
    {

        #region VSTA generated code
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

        /*
		The execution engine calls this method when the task executes.
		To access the object model, use the Dts property. Connections, variables, events,
		and logging features are available as members of the Dts property as shown in the following examples.

		To reference a variable, call Dts.Variables["MyCaseSensitiveVariableName"].Value;
		To post a log entry, call Dts.Log("This is my log text", 999, null);
		To fire an event, call Dts.Events.FireInformation(99, "test", "hit the help message", "", 0, true);

		To use the connections collection use something like the following:
		ConnectionManager cm = Dts.Connections.Add("OLEDB");
		cm.ConnectionString = "Data Source=localhost;Initial Catalog=AdventureWorks;Provider=SQLNCLI10;Integrated Security=SSPI;Auto Translate=False;";

		Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
		
		To open Help, press F1.
	*/
        public void Main()
        {
            Package p = new Package();
            Sequence exec_SEQ = (Sequence)p.Executables.Add("STOCK:SEQUENCE");
            exec_SEQ.FailPackageOnFailure = true;
            exec_SEQ.FailParentOnFailure = true;
            exec_SEQ.Name = @"Sequence Container";
            exec_SEQ.Description = @"Sequence Container";
            Application Automaton_app = new Application();
            try
            {
                string SQL_Query = Dts.Variables["SQL_Query"].Value.ToString().Trim();
                int test = SQL_Query.IndexOf("SELECT");
                Executable exec = null;

                if (!SQL_Query.Equals(""))
                {
                    if (test.Equals(-1))
                    {
                        SQL_Query = "Exec " + SQL_Query;
                    }
                    ConnectionManager cm = p.Connections.Add("OLEDB");
                    cm.Name = "OLEDB Source";
                    cm.ConnectionString = string.Format("Provider=SQLOLEDB.1;Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False; User ID=sa;Password=Password123;");
                    exec = exec_SEQ.Executables.Add("STOCK:SQLTask");
                    TaskHost th = exec as TaskHost;

                    th.Properties["Name"].SetValue(th, "Execute Procedure");
                    th.Properties["Description"].SetValue(th, "Execute Procedure");
                    th.Properties["Connection"].SetValue(th, "OLEDB Source");
                    //th.Properties["SqlStatementSource"].SetValue(th, "Truncate table dbo.Employee_TGT");
                    th.Properties["SqlStatementSource"].SetValue(th, SQL_Query);
                    //Automaton_app.SaveToSqlServer(p, null, "172.25.164.63", "sa", "Password123");
                    //Automaton_app.SaveToSqlServer(p, null, "172.25.121.105", null, null);

                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + SQL_Query + ".dtsx", p, null);
                }
                else
                {
                    SqlCommand Sqlcmd1 = new SqlCommand();
                    SqlConnection SqlConn1 = new SqlConnection();                    
                    
                    //SqlConn1.ConnectionString = @"Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;";
                    SqlConn1.ConnectionString = Dts.Variables["MetaDataConn"].Value.ToString().Trim();
                    Sqlcmd1.Connection = SqlConn1;
                    Sqlcmd1.CommandType = CommandType.StoredProcedure;
                    Sqlcmd1.CommandText = "[dbo].[ATMTN_GET_CONNECTION_DETAILS_SP]";
                    SqlParameter param1;
                    string Testdata = Dts.Variables["Client_ID"].Value.ToString().Trim();
                    param1 = new SqlParameter("@Client_ID", Dts.Variables["Client_ID"].Value.ToString().Trim());
                    param1.Direction = ParameterDirection.Input;
                    param1.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param1);

                    SqlParameter param2;
                    param2 = new SqlParameter("@Project_ID", Dts.Variables["Project_ID"].Value.ToString().Trim());
                    param2.Direction = ParameterDirection.Input;
                    param2.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param2);

                    SqlParameter param3;
                    param3 = new SqlParameter("@Template_Id", Dts.Variables["Template_Id"].Value.ToString().Trim());
                    param3.Direction = ParameterDirection.Input;
                    param3.DbType = DbType.Int32;
                    Sqlcmd1.Parameters.Add(param3);

                    SqlParameter param4;
                    param4 = new SqlParameter("@PKG_Save_Location", Dts.Variables["PackageSaveLocation"].Value.ToString().Trim());
                    param4.Direction = ParameterDirection.Input;
                    param4.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param4);

                    SqlParameter param5;
                    param5 = new SqlParameter("@Status_code", "");
                    param5.Direction = ParameterDirection.Output;
                    param5.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param5);

                    SqlParameter param6;
                    param6 = new SqlParameter("@Message", "");
                    param6.Direction = ParameterDirection.Output;
                    param6.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param6);

                    SqlParameter param7;
                    param7 = new SqlParameter("@Tool_ID", Dts.Variables["Tool_ID"].Value.ToString().Trim());
                    param7.Direction = ParameterDirection.Input;
                    param7.DbType = DbType.String;
                    Sqlcmd1.Parameters.Add(param7);

                    SqlDataAdapter sqlAdp1 = new SqlDataAdapter();
                    DataSet dsCols1 = new DataSet();
                    if (SqlConn1.State == ConnectionState.Closed)
                        SqlConn1.Open();
                    sqlAdp1.SelectCommand = Sqlcmd1;
                    

                    SqlDataReader rdr1 = null;
                    rdr1 = Sqlcmd1.ExecuteReader();
                    string SRC_Query = null;
                    string SRC_Query1 = null;
                    string LKP_Query = null;
                    string DST_Table = null;
                    string Template_Name = null;
                    string SRC_Table = null;
                    string TransRule = null;
                    string TransType = null;
                    string LKP_Columns = null;
                    string SRC_ConnectionString = null;
                    string DST_Connection_String = null;
                    int LookupOutput = 0;
                    
                    while (rdr1.Read())
                    {
                        SRC_Query = (string)rdr1["SRC_Query"];
                        TransType = rdr1["Trans_type"].ToString().Replace(" ", "").ToUpper();
                        if (TransType.Contains("MERGEJOIN"))
                        {
                            SRC_Query1 = (string)rdr1["SRC_Query2"];
                        }
                        if (TransType.Contains("LOOKUP"))
                        {
                            LKP_Query = (string)rdr1["LKP_Query"];
                            LKP_Columns = (string)rdr1["LKP_Columns"];
                        }                        
                        DST_Table = (string)rdr1["DST_Table"];                      
                        Template_Name = (string)rdr1["Template_Name"];
                        SRC_Table = (string)rdr1["Task_name"];
                        TransRule = (string)rdr1["Trans_Rule"];
                        DST_Connection_String = (string)rdr1["DST_Connection_String"];
                        SRC_ConnectionString = (string)rdr1["Source_Conn_String"];
                    }
                    
                    SqlConn1.Close();

                    

                    //SqlConn1.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");    

                    SqlCommand SqlcmdType = new SqlCommand();
                    SqlConnection SqlConnType = new SqlConnection();
                    SqlDataReader rdrType = null;
                    SqlDataAdapter sqlAdpType = new SqlDataAdapter();
                    DataSet dsColsType = new DataSet();



                    SqlcmdType.CommandText = "select Type FROM ETL_TEMPLATE_MS WHERE Template_ID = " + Dts.Variables["Template_Id"].Value.ToString().Trim();

                    SqlConnType.ConnectionString = Dts.Variables["MetaDataConn"].Value.ToString().Trim();
                    SqlcmdType.Connection = SqlConnType;
                    if (SqlConnType.State == ConnectionState.Closed)
                        SqlConnType.Open();
                    SqlcmdType.Connection = SqlConnType;
                    SqlcmdType.CommandType = CommandType.Text;
                    sqlAdpType.SelectCommand = SqlcmdType;

                    rdrType = SqlcmdType.ExecuteReader();
                    
                    string TemplateType = string.Empty;
                    while (rdrType.Read())
                    {

                        TemplateType = (string)rdrType["Type"];
                    }

                    SqlConnType.Close();
                    if(TemplateType.ToUpper() == "DATATYPE")
                    {

                        SqlCommand SqlcmdExists= new SqlCommand();
                        SqlConnection SqlConnExists = new SqlConnection();
                        SqlDataReader rdrExists = null;
                        SqlDataAdapter sqlAdpExists = new SqlDataAdapter();
                        DataSet dsColsExists = new DataSet();


                        SqlConnExists.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");
                        SqlcmdExists.CommandText = "select '1' from Information_Schema.Tables where TABLE_NAME='" + DST_Table + "'";


                        SqlcmdExists.Connection = SqlConnExists;
                        if (SqlConnExists.State == ConnectionState.Closed)
                            SqlConnExists.Open();
                        SqlcmdExists.Connection = SqlConnExists;
                        SqlcmdExists.CommandType = CommandType.Text;
                        sqlAdpExists.SelectCommand = SqlcmdExists;

                        rdrExists = SqlcmdExists.ExecuteReader();
                        int TableExists = 0;

                        while (rdrExists.Read())
                        {
                            TableExists = 1;
                        }

                        SqlConnExists.Close();
                        
                        SqlCommand SqlcmdCreateTable = new SqlCommand();
                        SqlConnection SqlConnCreateTable = new SqlConnection();

                        //SqlConn1.ConnectionString = @"Data Source=172.25.164.63;Initial Catalog=DM_Metadata;Trusted_Connection = False;User ID=sa;Password=Password123;";
                        SqlConnCreateTable.ConnectionString = Dts.Variables["MetaDataConn"].Value.ToString().Trim();
                        SqlcmdCreateTable.Connection = SqlConnCreateTable;
                        SqlcmdCreateTable.CommandType = CommandType.StoredProcedure;
                        SqlcmdCreateTable.CommandText = "[dbo].[ATMTN_GET_DATATYPE_DETAILS_SP]";
                            
                        SqlParameter paramCreate1;
                        paramCreate1 = new SqlParameter("@Client_ID", Dts.Variables["Client_ID"].Value.ToString().Trim());
                        paramCreate1.Direction = ParameterDirection.Input;
                        paramCreate1.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate1);

                        SqlParameter paramCreate2;
                        paramCreate2 = new SqlParameter("@Project_ID", Dts.Variables["Project_ID"].Value.ToString().Trim());
                        paramCreate2.Direction = ParameterDirection.Input;
                        paramCreate2.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate2);

                        SqlParameter paramCreate3;
                        paramCreate3 = new SqlParameter("@Template_Id", Dts.Variables["Template_Id"].Value.ToString().Trim());
                        paramCreate3.Direction = ParameterDirection.Input;
                        paramCreate3.DbType = DbType.Int32;
                        SqlcmdCreateTable.Parameters.Add(paramCreate3);

                        SqlParameter paramCreate4;
                        paramCreate4 = new SqlParameter("@Tool_ID", Dts.Variables["Tool_ID"].Value.ToString().Trim());
                        paramCreate4.Direction = ParameterDirection.Input;
                        paramCreate4.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate4);

                        SqlParameter paramCreate5;
                        paramCreate5 = new SqlParameter("@TableExists", TableExists);
                        paramCreate5.Direction = ParameterDirection.Input;
                        paramCreate5.DbType = DbType.Int32;
                        SqlcmdCreateTable.Parameters.Add(paramCreate5);

                        SqlParameter paramCreate6;
                        paramCreate6 = new SqlParameter("@Message", "");
                        paramCreate6.Direction = ParameterDirection.Output;
                        paramCreate6.DbType = DbType.String;
                        SqlcmdCreateTable.Parameters.Add(paramCreate6);

                           

                        SqlDataAdapter sqlAdpCreateTable = new SqlDataAdapter();

                        if (SqlConnCreateTable.State == ConnectionState.Closed)
                            SqlConnCreateTable.Open();
                        sqlAdpCreateTable.SelectCommand = SqlcmdCreateTable;


                        SqlDataReader rdrCreateTable = null;
                        rdrCreateTable = SqlcmdCreateTable.ExecuteReader();
                        SqlConnCreateTable.Close();
                        

                    }

                    
                    //Source Connection
                    ConnectionManager cm = p.Connections.Add("OLEDB");
                    cm.Name = "OLEDB Source";
                    cm.ConnectionString = SRC_ConnectionString;

                    //Destination Connection
                    ConnectionManager cm1 = p.Connections.Add("OLEDB");
                    cm1.Name = "OLEDB Destination";
                    cm1.ConnectionString = DST_Connection_String;
                    Executable e = exec_SEQ.Executables.Add("STOCK:PipelineTask");
                    

                    string ExecSQL_First = "N";
                    int parameterCount = 0;
                    string[] parameterList = null;
                    string SRC_Target = null;
                    int DType = 130;
                    Variable SQLParam;
                    p.Variables.Add("V_SourceProductName", false, "User", "TESTING");
                    

                    if (TransType.Split('~')[0].Trim() == "EXECUTESQL" && TransRule.Split('~')[0].Trim().Split('#')[0].Trim().ToUpper() == "PRE")
                    {
                        exec = exec_SEQ.Executables.Add("STOCK:SQLTask");
                        TaskHost th = exec as TaskHost;

                        string SQLConnection = null;


                        ExecuteSQLTask EXST = (ExecuteSQLTask)th.InnerObject;

                        SRC_Target = TransRule.Split('~')[0].Trim().Split('#')[2].Trim();

                        parameterList = null;
                        if (SRC_Target.Contains("$"))
                        {
                            parameterList = SRC_Target.Split('$')[1].Trim().Split(',');
                            SRC_Target = SRC_Target.Split('$')[0].Trim().ToUpper();
                        }


                        if (parameterList != null)
                        {

                            foreach (string parameter in parameterList)
                            {
                                EXST.ParameterBindings.Add();
                               
                                switch (parameter.Split('.')[0].ToUpper().Trim())
                                {
                                    case "STRING":
                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", "0");
                                        DType = 130;
                                        break;
                                    case "DATETIME":
                                    case "DATE":

                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", DateTime.Now);
                                        DType = 133;
                                        break;
                                    default:
                                        SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", 0);
                                        DType = 3;
                                        break;
                                }


                                IDTSParameterBinding parameterBinding = EXST.ParameterBindings.GetBinding(parameterCount);
                                parameterBinding.DtsVariableName = "User::" + parameter.Split('.')[1];

                                parameterBinding.ParameterDirection = ParameterDirections.Output;
                                //parameterBinding.DataType = Dtype;
                                parameterBinding.DataType = DType;
                                //parameterBinding.DataType = (int)OleDBDataTypes.VARCHAR;
                                parameterBinding.ParameterName = parameterCount;
                                parameterBinding.ParameterSize = -1;
                                parameterCount++;

                            }

                        }




                        if (TransRule.Split('~')[0].Trim().Split('#')[2].Trim().ToUpper().Split('$')[0].Trim() == "SOURCE")
                        {
                            SQLConnection = "OLEDB Source";
                        }
                        else
                        {
                            SQLConnection = "OLEDB Destination";
                        }
                        th.Properties["Name"].SetValue(th, "Execute Procedure");
                        th.Properties["Description"].SetValue(th, "Execute Procedure");
                        th.Properties["Connection"].SetValue(th, SQLConnection);
                        th.Properties["SqlStatementSource"].SetValue(th, TransRule.Split('~')[0].Split('#')[1]);
                        
                        if (TransType.Split('~')[1].Trim() != "EXECUTESQL")
                        {
                            PrecedenceConstraint pcFileTasks1 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec, (Executable)e);
                        }
                        ExecSQL_First = "Y";
                    }
                    TaskHost thMainPipe = e as TaskHost;
                    MainPipe dataFlowTask = thMainPipe.InnerObject as MainPipe;

                    thMainPipe.Name = "DFT_" + DST_Table; 
                    
                    IDTSComponentMetaData100 component = dataFlowTask.ComponentMetaDataCollection.New();
                    component.ComponentClassID = "DTSAdapter.OleDbSource";
                    IDTSDesigntimeComponent100 instance = component.Instantiate();
                    instance.ProvideComponentProperties();
                    component.Name = "OLEDBSource";
                    component.Description = "OLEDBSource";
                    
                    //Connect the Execute SQL task to the data flow task

                    if (component.RuntimeConnectionCollection.Count > 0)
                    {
                        component.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);
                        component.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;
                    }
                                   
                    instance.SetComponentProperty("AccessMode", 2);
                    instance.SetComponentProperty("SqlCommand", SRC_Query);

                    instance.AcquireConnections(null);
                    instance.ReinitializeMetaData();
                    instance.ReleaseConnections();
                    
                    IDTSComponentMetaData100 dataConditional_Split = null;
                    IDTSComponentMetaData100 data_DerivedColumn = null;
                    IDTSComponentMetaData100 dataConvertComponent = null;
                    IDTSComponentMetaData100 aggregate = null;
                    IDTSComponentMetaData100 lookupComponent = null;
                    IDTSComponentMetaData100 componentUnionAll = null;
                    IDTSComponentMetaData100 RowCountComponent = null;
                    IDTSComponentMetaData100 sortWrapper = null;
                    IDTSComponentMetaData100 MergeSortWrapper = null;
                    IDTSComponentMetaData100 dataOLEDbCommand = null;
                    IDTSComponentMetaData100 componentMerge = null;
                    IDTSComponentMetaData100 mergeJoin = null;
                    IDTSComponentMetaData100 copyMapComponent = null;
                    IDTSComponentMetaData100 multiCastComponent = null;
                    IDTSComponentMetaData100 component1 = null;
                    IDTSComponentMetaData100 componentSCD = null;
                    string[] TransList = TransType.Split('~');
                    string[] RuleList = TransRule.Split('~');
                    string namelist = string.Empty;
                    string multiCast = "N";
                    String[] joinColumns = null;

                    string LastTrans = "OleDBSource";
                    string testsplit;
                    int condSplitCnt = 0;
                    string MulticastTargetTable = string.Empty;
                    int RuleCounter = 0;
                    if (ExecSQL_First == "Y")
                    {
                        RuleCounter = 1;
                    }

                    for (int i = RuleCounter; i < TransList.Length; i++)
                    {
                        
                        testsplit = TransType.Split(',')[0].Trim();
                        RuleList[i] = RuleList[i].Trim();
                        switch (TransList[i])
                        {
                            case "EXECUTESQL":

                                Executable exec1 = exec_SEQ.Executables.Add("STOCK:SQLTask");
                                TaskHost th1 = exec1 as TaskHost;
                               
                                ExecuteSQLTask EST = (ExecuteSQLTask)th1.InnerObject;
                                parameterCount = 0;
                                string ExecProcName = "Execute Procedure_" + i;
                                string testSql = RuleList[i];
                                string ExecSql_query = RuleList[i].Split('#')[1];
                                string SQLConnection = null;
                                SRC_Target = RuleList[i].Split('#')[2];
                                
                                parameterList = null;
                                if (SRC_Target.Contains("$"))
                                {
                                    parameterList = SRC_Target.Split('$')[1].Trim().Split(',');
                                    SRC_Target = SRC_Target.Split('$')[0].Trim().ToUpper();
                                }

                                
                                if (parameterList != null)
                                {
                                    
                                    foreach (string parameter in parameterList)
                                    {
                                        EST.ParameterBindings.Add();

                                        switch (parameter.Split('.')[0].ToUpper().Trim())
                                        {
                                            case "STRING":
                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", "0");
                                                DType = 130;
                                                break;
                                            case "DATETIME":
                                            case "DATE":

                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", DateTime.Now);
                                                DType = 133;
                                                break;
                                            default:
                                                SQLParam = p.Variables.Add(parameter.Split('.')[1], false, "User", 0);
                                                DType = 3;
                                                break;
                                        }


                                        IDTSParameterBinding parameterBinding = EST.ParameterBindings.GetBinding(parameterCount);
                                        parameterBinding.DtsVariableName = "User::" + parameter.Split('.')[1];

                                        parameterBinding.ParameterDirection = ParameterDirections.Output;
                                        //parameterBinding.DataType = Dtype;
                                        parameterBinding.DataType = DType;
                                        //parameterBinding.DataType = (int)OleDBDataTypes.VARCHAR;
                                        parameterBinding.ParameterName = parameterCount;
                                        parameterBinding.ParameterSize = -1;
                                        parameterCount++;

                                    }

                                }

                                if (RuleList[i].Split('#')[2].Trim().ToUpper().Split('$')[0].Trim() == "SOURCE")
                                {
                                    SQLConnection = "OLEDB Source";
                                }
                                else
                                {
                                    SQLConnection = "OLEDB Destination";
                                }

                                th1.Properties["Name"].SetValue(th1, ExecProcName);
                                th1.Properties["Description"].SetValue(th1, "Execute Procedure");
                                th1.Properties["Connection"].SetValue(th1, SQLConnection);
                                th1.Properties["SqlStatementSource"].SetValue(th1, ExecSql_query);

                                if (ExecSQL_First == "Y" && RuleList[i].Split('#')[0].Trim().ToUpper() == "PRE")
                                {

                                    PrecedenceConstraint pcFileTasks2 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec, (Executable)exec1);
                                    PrecedenceConstraint pcFileTasks3 = exec_SEQ.PrecedenceConstraints.Add((Executable)exec1, (Executable)e);
                                    ExecSQL_First = "N";
                                }
                                else
                                {
                                    PrecedenceConstraint pcFileTasks4 = exec_SEQ.PrecedenceConstraints.Add((Executable)e, (Executable)exec1);
                                }

                                break;
                            case "CONDITIONALSPLIT":
                                dataConditional_Split = dataFlowTask.ComponentMetaDataCollection.New();
                                dataConditional_Split.ComponentClassID = "DTSTransform.ConditionalSplit";
                                CManagedComponentWrapper data_Split_Wrapper = dataConditional_Split.Instantiate();
                                data_Split_Wrapper.ProvideComponentProperties();
                                dataConditional_Split.Name = "Filter_Router_"+i;
                                dataConditional_Split.Description = "Evaluates and directs rows in a dataset based a column.";

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConditional_Split.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 input = dataConditional_Split.InputCollection[0];
                                IDTSVirtualInput100 dataConvertVirtualInput = input.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 destinationVirtualInputColumns = dataConvertVirtualInput.VirtualInputColumnCollection;
                                IDTSOutput100 dataConvertOutput = dataConditional_Split.OutputCollection[0];
                                IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;

                                int sourceColumnLineageId;
                                int evalOrder = 0;

                                string get_name = "";
                                string[] CondRules = RuleList[i].Split('#');

                                //get_name = ConditionalSplit.Split('>')[0].Trim();
                                foreach (string rule in CondRules)
                                {
                                    foreach (IDTSVirtualInputColumn100 virtualInputColumn in destinationVirtualInputColumns)
                                    {
                                        get_name = virtualInputColumn.Name.ToString();
                                        string getname = "[" + get_name + "]";

                                        if (rule.Trim().ToUpper().Contains(get_name.ToUpper()))
                                        {
                                            sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                            data_Split_Wrapper.SetUsageType(input.ID, dataConvertVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READONLY);
                                            IDTSOutput100 splitOutput_1 = data_Split_Wrapper.InsertOutput(DTSInsertPlacement.IP_BEFORE, dataConditional_Split.OutputCollection[evalOrder].ID);
                                            data_Split_Wrapper.SetOutputProperty(splitOutput_1.ID, "EvaluationOrder", evalOrder);
                                            data_Split_Wrapper.SetOutputProperty(splitOutput_1.ID, "FriendlyExpression", rule.Trim());
                                            evalOrder++;
                                        }
                                    }
                                    
                                    condSplitCnt = evalOrder - 1;
                                }
                                LastTrans = "ConditionalSplit";
                                break;
                            case "DERIVEDCOLUMN":
                                data_DerivedColumn = dataFlowTask.ComponentMetaDataCollection.New();
                                data_DerivedColumn.ComponentClassID = "DTSTransform.DerivedColumn";
                                CManagedComponentWrapper DesignDerivedTransformColumns = data_DerivedColumn.Instantiate();
                                DesignDerivedTransformColumns.ProvideComponentProperties();
                                data_DerivedColumn.Name = "DerivedColTransform_" + i;

                                data_DerivedColumn.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
                                data_DerivedColumn.InputCollection[0].HasSideEffects = false;
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], data_DerivedColumn.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 DerivedColumnInput = data_DerivedColumn.InputCollection[0];
                                IDTSVirtualInput100 DerivedColumnVirtualInput = DerivedColumnInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 DerivedColumnVirtualInputColumns = DerivedColumnVirtualInput.VirtualInputColumnCollection;
                                IDTSCustomProperty100 ConcatProperty = null;
                                //RuleList[i] = RuleList[i] + "#ZZ_STATUS_CODE = \"P\"";


                                string[] DerColumns = new string[10]; //create 10 empty index in array terms




                                string[] RulesList = RuleList[i].Split('#');
                                //int DerColCount = 0;

                                List<string> ColCollection = new List<string>();
                                foreach (string Rulevalues in RulesList)
                                {
                                    string _val = string.Empty;
                                    _val = Rulevalues.Split('$')[0].Trim();
                                    ColCollection.Add(_val);
                                }

                                foreach (string RuleValue in RulesList)
                                {
                                    string newDerCol = "Y";
                                    string _v = string.Empty;
                                    _v = RuleValue.Split('$')[0].Trim();


                                    // Iterate through the virtual input column collection.
                                    foreach (IDTSVirtualInputColumn100 vColumn in DerivedColumnVirtualInputColumns)
                                    {


                                        for (int j = 0; j < RulesList.Length; j++)
                                        {


                                            //DerColumns[DerColCount] = vColumn.Name;
                                            //DerColCount++;
                                            if (vColumn.Name == _v)
                                            {
                                                IDTSInputColumn100 vCol = DesignDerivedTransformColumns.SetUsageType(DerivedColumnInput.ID, DerivedColumnVirtualInput, vColumn.LineageID, DTSUsageType.UT_READWRITE);
                                                break;
                                            }

                                        }


                                    }

                                    string[] ColumnCollection = ColCollection.ToArray();

                                    foreach (IDTSVirtualInputColumn100 vColumn in DerivedColumnVirtualInputColumns)
                                    {

                                        string ColName = Array.Find(ColCollection.ToArray(), element => element.Equals(vColumn.Name, StringComparison.Ordinal));
                                        if (string.IsNullOrEmpty(ColName))
                                        {
                                            IDTSInputColumn100 vCol = DesignDerivedTransformColumns.SetUsageType(DerivedColumnInput.ID, DerivedColumnVirtualInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                        }
                                    }

                                    foreach (IDTSInputColumn100 inputColumn in DerivedColumnInput.InputColumnCollection)
                                    {
                                        if (inputColumn.Name == RuleValue.Split('$')[0].Trim())
                                        {
                                            inputColumn.Description = string.Format("Override the orginal column {0} with OTHERS if the string is NULL.", inputColumn.Name);
                                            ConcatProperty = inputColumn.CustomPropertyCollection["Expression"];

                                            ConcatProperty.Name = "Expression";
                                            ConcatProperty.Value = RuleValue.Split('$')[1].Trim();

                                            ConcatProperty = inputColumn.CustomPropertyCollection["FriendlyExpression"];
                                            ConcatProperty.Name = "FriendlyExpression";
                                            ConcatProperty.Value = ConcatProperty.Value = RuleValue.Split('$')[1].Trim();
                                            newDerCol = "N";
                                        }
                                    }

                                    if (newDerCol == "Y")
                                    {
                                        IDTSOutputColumn100 ConCatCol = data_DerivedColumn.OutputCollection[0].OutputColumnCollection.New();
                                        ConCatCol.Name = RuleValue.Split('$')[0].Trim();
                                        ConCatCol.ExternalMetadataColumnID = 0;
                                        ConCatCol.ErrorRowDisposition = DTSRowDisposition.RD_FailComponent;
                                        ConCatCol.TruncationRowDisposition = DTSRowDisposition.RD_FailComponent;
                                        IDTSCustomProperty100 ConCatProp = ConCatCol.CustomPropertyCollection.New();
                                        ConCatCol.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                                        ConCatProp.Name = "Expression";
                                        ConCatProp.Value = RuleValue.Split('$')[1].Trim();
                                        ConCatProp = ConCatCol.CustomPropertyCollection.New();
                                        ConCatProp.Name = "FriendlyExpression";
                                        ConCatProp.Value = RuleValue.Split('$')[1].Trim();
                                        ConCatCol.MappedColumnID = 0;

                                    }
                                }

                                LastTrans = "DerivedColumn";

                                break;
                            case "CHARACTERMAP":
                                dataConvertComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                dataConvertComponent.ComponentClassID = "DTSTransform.CharacterMap";
                                dataConvertComponent.Name = "capitalise all initials_"+i;
                                dataConvertComponent.Description = "capitalise all initials";
                                CManagedComponentWrapper dataConvertWrapper = dataConvertComponent.Instantiate();
                                dataConvertWrapper.ProvideComponentProperties();
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConvertComponent.InputCollection[0]);
                                        break;
                                }
                                IDTSInput100 CharMapInput = dataConvertComponent.InputCollection[0];
                                IDTSVirtualInput100 CharMapDataConvertVirtualInput = dataConvertComponent.InputCollection[0].GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 CharMapDestinationVirtualInputColumns = CharMapDataConvertVirtualInput.VirtualInputColumnCollection;
                                IDTSOutput100 CharMapDataConvertOutput = dataConvertComponent.OutputCollection[0];
                                IDTSOutputColumnCollection100 CharMapDataConvertOutputColumns = CharMapDataConvertOutput.OutputColumnCollection;
                                //IDTSOutputColumn100 newOutputColumn;

                                

                                foreach (IDTSVirtualInputColumn100 virtualInputColumn in CharMapDestinationVirtualInputColumns)
                                {
                                    get_name = virtualInputColumn.Name.ToString();
                                    IDTSInputColumn100 inputColumn = dataConvertWrapper.SetUsageType(CharMapInput.ID, CharMapDataConvertVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READONLY);


                                    if (RuleList[i].IndexOf(get_name) > 0)
                                    {
                                        sourceColumnLineageId = CharMapDataConvertVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                        dataConvertWrapper.SetUsageType(dataConvertComponent.InputCollection[0].ID, CharMapDataConvertVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READWRITE);
                                        //dataConvertWrapper.SetOutputColumnProperty(CharMapDataConvertOutput.ID, virtualInputColumn.ID, "MapFlags", 0);
                                        
                                        /*-------------Enable this code to add a new column into the data flow --------------------*/
                                        //newOutputColumn=dataConvertWrapper.InsertOutputColumnAt(CharMapDataConvertOutput.ID, 1, get_name, string.Empty);
                                        //newOutputColumn.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, 100, 0, 0, 1252);
                                        //newOutputColumn.MappedColumnID = 0;
                                        //dataConvertWrapper.SetOutputColumnProperty(CharMapDataConvertOutput.ID, newOutputColumn.ID, "InputColumnLineageID", sourceColumnLineageId);

                                        /*  MapColumns details
                                         -----------------------------
                                            Byte reversal (2)
                                            Full width (6)
                                            Half width (5)
                                            Hiragana (3)
                                            Katakana (4)
                                            Linguistic casing (7)
                                            Lowercase (0)
                                            Simplified Chinese (8)
                                            Traditional Chinese(9)
                                            Uppercase (1)*/

                                    }
                                }

                                
                                LastTrans = "CharacterMap";
                                break;
                            case "AGGREGATE":
                                aggregate = dataFlowTask.ComponentMetaDataCollection.New();
                                aggregate.ComponentClassID = "DTSTransform.Aggregate";
                                CManagedComponentWrapper AggregateWrapper = aggregate.Instantiate();
                                AggregateWrapper.ProvideComponentProperties();
                                aggregate.Name = "Aggregate_" + i;
                                //AggregateWrapper.AcquireConnections(null);
                                AggregateWrapper.AcquireConnections(null);
                                AggregateWrapper.ReinitializeMetaData();
                                AggregateWrapper.ReleaseConnections();

                                //aggregate.InputCollection[0].InputColumnCollection.RemoveAll();
                                //aggregate.OutputCollection[0].OutputColumnCollection.RemoveAll();

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], aggregate.InputCollection[0]);
                                        break;
                                }

                                IDTSInput100 AggregateInput = aggregate.InputCollection[0];
                                IDTSVirtualInput100 AggregateVirtualInput = AggregateInput.GetVirtualInput();
                                IDTSOutput100 AggregateOutputCollection = aggregate.OutputCollection[0];
                                IDTSInput100 AggregateInputCollection = aggregate.InputCollection[0];
                                IDTSVirtualInputColumnCollection100 AggregateVirtualInputColumns = AggregateVirtualInput.VirtualInputColumnCollection;

                                foreach (IDTSVirtualInputColumn100 virtualInputColumn in AggregateVirtualInputColumns)
                                {
                                    get_name = virtualInputColumn.Name.ToString();
                                    //AggregateWrapper.SetUsageType(AggregateInput.ID, AggregateVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READWRITE);
                                    IDTSInputColumn100 inputColumn = AggregateWrapper.SetUsageType(AggregateInput.ID, AggregateVirtualInput, virtualInputColumn.LineageID, DTSUsageType.UT_READONLY);

                                    //AggregateWrapper.SetInputColumnProperty(AggregateInput.ID, inputColumn.ID, "CopyFromReferenceColumn", virtualInputColumn);
                                    
                                    string ColumnName = null;
                                    if (RuleList[i].IndexOf(get_name) != -1)
                                    {
                                        ColumnName = RuleList[i].Split('=')[0].Trim();
                                       
                                        string RuleName = RuleList[i].Split('=')[1].Trim().Split('(')[0].Trim().ToLower();
                                        int AggregateProperty = 0;
                                        switch (RuleName)
                                        {
                                            /*
                                            case "count":
                                                AggregateProperty = 1;
                                                break;
                                            case "countall":
                                                AggregateProperty = 2;
                                                break;
                                            case "countdistinct":
                                                AggregateProperty = 3;
                                                break;
                                            case "sum":
                                                AggregateProperty = 4;
                                                break;
                                            case "max":
                                                AggregateProperty = 5;
                                                break;
                                            case "min":
                                                AggregateProperty = 6;
                                                break; */

                                            case "count":
                                                AggregateProperty = 1;
                                                break;
                                            case "countall":
                                                AggregateProperty = 2;
                                                break;
                                            case "countdistinct":
                                                AggregateProperty = 3;
                                                break;
                                            case "sum":
                                                AggregateProperty = 4;
                                                break;
                                            case "avg":
                                                AggregateProperty = 5;
                                                break;
                                            case "min":
                                                AggregateProperty = 6;
                                                break;
                                            case "max":
                                                AggregateProperty = 7;
                                                break;
                                        }

                                        //AggregateWrapper.SetUsageType(AggregateInputCollection.ID, AggregateVirtualInput, sourceColumnLineageId, DTSUsageType.UT_READWRITE);
                                        IDTSOutputColumn100 newOutputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, ColumnName, string.Empty);
                                        newOutputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                        newOutputColumn.MappedColumnID = 0;
                                        for (int x = 0; x < newOutputColumn.CustomPropertyCollection.Count; x++)
                                        {
                                            IDTSCustomProperty100 property = newOutputColumn.CustomPropertyCollection[x];
                                            switch (property.Name)
                                            {
                                                case "AggregationColumnId":
                                                    property.Value = virtualInputColumn.LineageID;
                                                    break;
                                                case "AggregationType":
                                                    property.Value = AggregateProperty;
                                                    break;
                                                case "IsBig":
                                                    property.Value = 0;
                                                    break;
                                                case "AggregationComparisonFlags":
                                                    property.Value = 0;
                                                    break;
                                            }
                                        }
                                        /*IDTSOutputColumn100 InputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, get_name, string.Empty);
                                       InputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                       InputColumn.MappedColumnID = 1;
                                       sourceColumnLineageId = AggregateVirtualInput.VirtualInputColumnCollection[get_name].LineageID;
                                       for (int x = 0; x < InputColumn.CustomPropertyCollection.Count; x++)
                                       {
                                           IDTSCustomProperty100 property = InputColumn.CustomPropertyCollection[x];
                                           switch (property.Name)
                                           {
                                               case "AggregationColumnId":
                                                   property.Value = virtualInputColumn.LineageID;
                                                   break;
                                               case "AggregationType":
                                                   property.Value = 0;
                                                   break;
                                               case "IsBig":
                                                   property.Value = 0;
                                                   break;
                                               case "AggregationComparisonFlags":
                                                   property.Value = 0;
                                                   break;
                                           }
                                       } */
                                    }
                                    else
                                    {
                                        IDTSOutputColumn100 InputColumn = AggregateWrapper.InsertOutputColumnAt(AggregateOutputCollection.ID, 0, get_name, string.Empty);
                                        InputColumn.SetDataTypeProperties(AggregateVirtualInput.VirtualInputColumnCollection[get_name].DataType, AggregateVirtualInput.VirtualInputColumnCollection[get_name].Length, 0, 0, AggregateVirtualInput.VirtualInputColumnCollection[get_name].CodePage);
                                        for (int x = 0; x < InputColumn.CustomPropertyCollection.Count; x++)
                                        {
                                            IDTSCustomProperty100 property = InputColumn.CustomPropertyCollection[x];
                                            switch (property.Name)
                                            {
                                                case "AggregationColumnId":
                                                    property.Value = virtualInputColumn.LineageID;
                                                    break;
                                                case "AggregationType":
                                                    property.Value = 0;
                                                    break;
                                                case "IsBig":
                                                    property.Value = 0;
                                                    break;
                                                case "AggregationComparisonFlags":
                                                    property.Value = 0;
                                                    break;
                                            }
                                        }
                                    }
                                }

                                LastTrans = "Aggregate";
                                break;
                            case "LOOKUP":
                                lookupComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                lookupComponent.ComponentClassID = "DTSTransform.Lookup";

                                if(RuleList[i].Contains("$"))
                                {
                                    if (RuleList[i].Split('$')[1].Trim().Replace(" ","").ToUpper() == "NOMATCH")
                                    {
                                        LookupOutput = 1;
                                    }

                                    RuleList[i] = RuleList[i].Split('$')[0].Trim();
                                }

                                if (RuleList[i].Contains("#"))
                                {
                                    if (LKP_Query.Contains(" WHERE "))
                                    {
                                        LKP_Query = LKP_Query + " and " + RuleList[i].Split('#')[1].Trim();
                                    }
                                    else
                                    {
                                        LKP_Query = LKP_Query + " WHERE " + RuleList[i].Split('#')[1].Trim();
                                    }

                                    RuleList[i] = RuleList[i].Split('#')[0].Trim();
                                }
                                

                                
                                CManagedComponentWrapper lookupWrapper = lookupComponent.Instantiate();
                                lookupWrapper.ProvideComponentProperties();
                                lookupComponent.Name = "Lookup_" + i;
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], lookupComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], lookupComponent.InputCollection[0]);
                                        break;
                                }
                                lookupComponent.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);

                                lookupComponent.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;

                                // Cache Type - Full = 0, Partial = 1, None = 2

                                lookupWrapper.SetComponentProperty("CacheType", 0);
                                lookupWrapper.SetComponentProperty("NoMatchBehavior", 1);// 1= Redirect rows to No Match output
                                lookupWrapper.SetComponentProperty("SqlCommand", LKP_Query);

                                // initialize metadata

                                lookupWrapper.AcquireConnections(null);
                                lookupWrapper.ReinitializeMetaData();
                                lookupWrapper.ReleaseConnections();

                                // Mark the columns we are joining on

                                IDTSInput100 lookupInput = lookupComponent.InputCollection[0];
                                IDTSInputColumnCollection100 lookupInputColumns = lookupInput.InputColumnCollection;
                                IDTSVirtualInput100 lookupVirtualInput = lookupInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 lookupVirtualInputColumns = lookupVirtualInput.VirtualInputColumnCollection;

                                // Note: join columns should be marked as READONLY

                                joinColumns = RuleList[i].Split('|');
                                foreach (string conditions in joinColumns)
                                {
                                    string columnName = conditions.Replace("IN_", "").Split('=')[1].Trim();
                                    IDTSVirtualInputColumn100 virtualColumn = lookupVirtualInputColumns[columnName];
                                    IDTSInputColumn100 inputColumn = lookupWrapper.SetUsageType(lookupInput.ID, lookupVirtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                    lookupWrapper.SetInputColumnProperty(lookupInput.ID, inputColumn.ID, "JoinToReferenceColumn", conditions.Replace("IN_", "").Split('=')[0].Trim());
                                }

                                string[] ReadWriteColumns = LKP_Query.Replace("from", "~").Split('~')[0].Replace("SELECT", "").Replace(" ", "").Split(',');
                                //var ReadWriteColumns = new string[] { "SNo" };
                                /* 
                                string columnName1;
                                foreach (string columnName in ReadWriteColumns)
                                {
                                    if(columnName.Contains("AS"))
                                    {
                                        columnName1 = columnName.Replace("AS", "~").Split('~')[1];
                                    }
                                    else
                                    {
                                        columnName1 = columnName;
                                    }
                                    IDTSVirtualInputColumn100 virtualColumn = lookupVirtualInputColumns[columnName1];
                                    IDTSInputColumn100 inputColumn = lookupWrapper.SetUsageType(lookupInput.ID, lookupVirtualInput, virtualColumn.LineageID, DTSUsageType.UT_READWRITE);

                                    lookupWrapper.SetInputColumnProperty(lookupInput.ID, inputColumn.ID, "CopyFromReferenceColumn", columnName1);
                                }                                 
                                */
                    
                                //LKP_New_Columns = "address,city,company_name,county,cust_code,email,first_name,phone1,phone2,state,zip,ZZ_STATUS_CODE";
                                string[] newColumns = LKP_Columns.Split(',');
                                IDTSOutput100 lookupMatchOutput = lookupComponent.OutputCollection[LookupOutput];
                                string SourceJoinColumn = joinColumns[0].Replace("IN_", "").Split('=')[1].Trim();
                                foreach (string sourceColumn in newColumns)
                                {
                                    if(SourceJoinColumn != sourceColumn)
                                    {
                                        //sourceColumn =  sourceColumn;
                                        string newColumnName = sourceColumn.Trim();
                                        string description = sourceColumn;

                                        // insert the new column
                                        IDTSOutputColumn100 outputColumn = lookupWrapper.InsertOutputColumnAt(lookupMatchOutput.ID, 0, newColumnName, description);
                                        outputColumn.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, 255, 0, 0, 0);
                                        lookupWrapper.SetOutputColumnProperty(lookupMatchOutput.ID, outputColumn.ID, "CopyFromReferenceColumn", sourceColumn);
                                    }
                                }

                                LastTrans = "Lookup";
                                break;

                            case "ROWCOUNT":
                                Variable Counter = p.Variables.Add(RuleList[i].Trim(), false, "User", 0);
                                RowCountComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                RowCountComponent.ComponentClassID = "DTSTransform.RowCount";
                                RowCountComponent.Name = "get row counter_"+i;
                                RowCountComponent.Description = "gets row counter";

                                CManagedComponentWrapper RowCountWrapper = RowCountComponent.Instantiate();
                                RowCountWrapper.ProvideComponentProperties();
                                RowCountWrapper.SetComponentProperty("VariableName", RuleList[i].Trim());

                                // Connect the source and the transform

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], RowCountComponent.InputCollection[0]);
                                        break;
                                }

                                LastTrans = "RowCount";
                                break;
                            case "SORT":
                            case "SORT&ELIMINATEDUPLICATES":
                                string SortColumn = RuleList[i].Split(' ')[0].Trim();
                                string SortType = RuleList[i].Split(' ')[1].Trim();
                                sortWrapper = dataFlowTask.ComponentMetaDataCollection.New();
                                
                                sortWrapper.ComponentClassID = "DTSTransform.Sort";
                                
                                CManagedComponentWrapper sortinstance = sortWrapper.Instantiate();
                                sortinstance.ProvideComponentProperties();
                                sortWrapper.Name = "SortTransform_"+i;
                                sortWrapper.Description = "Sortcomponent";

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], sortWrapper.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], sortWrapper.InputCollection[0]);
                                        break;
                                }
                                string[] sortcolumns = SortColumn.Split(',');
                                IDTSInputColumn100 col = null;
                                IDTSVirtualInput100 vSortInput = sortWrapper.InputCollection[0].GetVirtualInput();
                                //IDTSVirtualInputColumn100 vColumn = null;
                                int sortPos = 1;
                                foreach (string SortColumn1 in sortcolumns)
                                {
                                    foreach (IDTSVirtualInputColumn100 vColumn in vSortInput.VirtualInputColumnCollection)
                                    {
                                        //if (SortColumn.Contains(col.Name))
                                        if (vColumn.Name == SortColumn1.Trim())
                                        {
                                            col = sortinstance.SetUsageType(sortWrapper.InputCollection[0].ID, vSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                            int sortPref;

                                            if (SortType.ToUpper() == "DESC")
                                            {
                                                sortPref = -1 * sortPos;
                                            }
                                            else
                                            {
                                                sortPref = sortPos;
                                            }
                                            if (col.CustomPropertyCollection.Count > 0)
                                            {
                                                sortinstance.SetInputColumnProperty(sortWrapper.InputCollection[0].ID, col.ID, "NewSortKeyPosition", sortPref);
                                                sortPos++;
                                            }
                                        }
                                    }
                                }
                                foreach (IDTSVirtualInputColumn100 vColumn in vSortInput.VirtualInputColumnCollection)
                                {
                                    if (!SortColumn.Contains(vColumn.Name))
                                    {
                                        col = sortinstance.SetUsageType(sortWrapper.InputCollection[0].ID, vSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                    }
                                }
                                if (TransList[i] == "SORT&ELIMINATEDUPLICATES")
                                {
                                    sortinstance.SetComponentProperty("EliminateDuplicates", 1);
                                }
                                else
                                {
                                    sortinstance.SetComponentProperty("EliminateDuplicates", 0);
                                }

                                LastTrans = "Sort";
                                break;
                            case "UNIONALL":
                                componentUnionAll = dataFlowTask.ComponentMetaDataCollection.New();
                                componentUnionAll.ComponentClassID = "DTSTransform.UnionAll";
                                CManagedComponentWrapper instanceUnionAll = componentUnionAll.Instantiate();
                                instanceUnionAll.ProvideComponentProperties();
                                componentUnionAll.Name = "Union All columns_"+i;                                

                                // connect path form source to destination
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentUnionAll.InputCollection[0]);
                                        break;
                                }

                                LastTrans = "UnionAll";
                                break;
                            case "MERGE":                               

                                componentMerge = dataFlowTask.ComponentMetaDataCollection.New();                   
                                componentMerge.ComponentClassID = "DTSTransform.Merge";
                                CManagedComponentWrapper instanceMerge = componentMerge.Instantiate();
                                instanceMerge.ProvideComponentProperties();
                                componentMerge.Name = "Merge All columns_"+i;
                                component1.OutputCollection[0].IsSorted = true;
                                component1.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;

                                // connect path form source to destination
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentMerge.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break; 
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentMerge.InputCollection[0]);
                                        break;
                                }
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component1.OutputCollection[0], componentMerge.InputCollection[1]);

                                LastTrans = "Merge";
                                break;

                            case "OLEDBCOMMAND":
                                dataOLEDbCommand = dataFlowTask.ComponentMetaDataCollection.New();

                                dataOLEDbCommand.ComponentClassID = "DTSTransform.OLEDBCommand";
                                CManagedComponentWrapper OLEDB_Wrapper = dataOLEDbCommand.Instantiate();
                                OLEDB_Wrapper.ProvideComponentProperties();
                                dataOLEDbCommand.Name = "OLE DB Command_"+i;                                

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    /*case "CopyColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(copyMapComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;*/
                    
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break; 
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataOLEDbCommand.InputCollection[0]);
                                        break;
                                }
                                if (dataOLEDbCommand.RuntimeConnectionCollection.Count > 0)
                                {
                                    dataOLEDbCommand.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);
                                    dataOLEDbCommand.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                                }
                                OLEDB_Wrapper.SetComponentProperty("SqlCommand", RuleList[i].Trim());
                                LastTrans = "OLEDB";
                                break;
                            case "MERGEJOIN":
                                component1 = dataFlowTask.ComponentMetaDataCollection.New();

                                component1.ComponentClassID = "DTSAdapter.OleDbSource";
                                IDTSDesigntimeComponent100 instance1 = component1.Instantiate();
                                instance1.ProvideComponentProperties();
                                component1.Name = "OLEDBSource1";
                                component1.Description = "OLEDBSource1";
                                IDTSComponentMetaData100 MyComponentMetadata = dataFlowTask.ComponentMetaDataCollection["OLEDBSource1"];

                                MyComponentMetadata.Name = "OLEDB Source2";
                    
                                //Connect the Execute SQL task to the data flow task

                                if (component1.RuntimeConnectionCollection.Count > 0)
                                {
                                    component1.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm);
                                    component1.RuntimeConnectionCollection[0].ConnectionManagerID = cm.ID;
                                }

                                string MergeSortColumn = "row_id";
                                string[] MergeSortColumns = RuleList[i].Split('=');
                                string[] FirstColumn = MergeSortColumns[1].Split('.');
                                MergeSortColumn = FirstColumn[1];
                                if (!SRC_Query1.ToUpper().Contains("ORDER BY"))
                                {
                                    SRC_Query1 = SRC_Query1 + " Order by " + MergeSortColumn;
                                }
                                instance1.SetComponentProperty("AccessMode", 2);
                                instance1.SetComponentProperty("SqlCommand", SRC_Query1);
                                //instance1.SetComponentProperty("SqlCommand", "Select row_id, cust_code from Customer Order by Row_ID");

                                instance1.AcquireConnections(null);
                                instance1.ReinitializeMetaData();
                                instance1.ReleaseConnections();

                                MergeSortWrapper = dataFlowTask.ComponentMetaDataCollection.New();
                                MergeSortWrapper.ComponentClassID = "DTSTransform.Sort";
                                CManagedComponentWrapper MergeSortinstance = MergeSortWrapper.Instantiate();
                                MergeSortinstance.ProvideComponentProperties();
                                MergeSortWrapper.Name = "MergeSortTransform";
                                MergeSortWrapper.Description = "MergeSortTransform";
                                MergeSortWrapper.ContactInfo = "Sort1";
                                //MergeSortWrapper.SetComponentProperty("EliminateDuplicates", 1);                    
                                
                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], MergeSortWrapper.InputCollection[0]);
                                        break;

                                }
                                
                                IDTSVirtualInput100 vMergeSortInput = MergeSortWrapper.InputCollection[0].GetVirtualInput();
                                //IDTSVirtualInputColumn100 vColumn = null;
                                IDTSInputColumn100 MergeCol = null;

                                FirstColumn = MergeSortColumns[0].Split('.');
                                MergeSortColumn = FirstColumn[1];

                                foreach (IDTSVirtualInputColumn100 vColumn in vMergeSortInput.VirtualInputColumnCollection)
                                {
                                    //if (SortColumn.Contains(col.Name))
                                    if (vColumn.Name == MergeSortColumn.Trim())
                                    {
                                        MergeCol = MergeSortinstance.SetUsageType(MergeSortWrapper.InputCollection[0].ID, vMergeSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);

                                        if (MergeCol.CustomPropertyCollection.Count > 0)
                                        {
                                            MergeSortinstance.SetInputColumnProperty(MergeSortWrapper.InputCollection[0].ID, MergeCol.ID, "NewSortKeyPosition", 1);

                                        }
                                    }
                                }

                                foreach (IDTSVirtualInputColumn100 vColumn in vMergeSortInput.VirtualInputColumnCollection)
                                {
                                    if (!MergeSortColumn.Contains(vColumn.Name))
                                    {
                                        MergeCol = MergeSortinstance.SetUsageType(MergeSortWrapper.InputCollection[0].ID, vMergeSortInput, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                    }
                                }
                                //MergeSortinstance.SetComponentProperty("EliminateDuplicates", 1);
                    
                                mergeJoin = dataFlowTask.ComponentMetaDataCollection.New();
                                mergeJoin.ComponentClassID = "DTSTransform.MergeJoin";
                                mergeJoin.Name = "merge";
                                CManagedComponentWrapper mergeInstance = mergeJoin.Instantiate();
                                mergeInstance.ProvideComponentProperties();
                   
                                //create path from source1 to merge

                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(MergeSortWrapper.OutputCollection[0], mergeJoin.InputCollection[0]);
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component1.OutputCollection[0], mergeJoin.InputCollection[1]);

                                MergeSortWrapper.OutputCollection[0].IsSorted = true;
                                MergeSortWrapper.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;
                                mergeJoin.InputCollection[0].ExternalMetadataColumnCollection.IsUsed = false;
                                mergeJoin.InputCollection[0].HasSideEffects = false;
                                component1.OutputCollection[0].IsSorted = true;
                                component1.OutputCollection[0].OutputColumnCollection[0].SortKeyPosition = 1;
                                mergeJoin.InputCollection[1].ExternalMetadataColumnCollection.IsUsed = false;
                                mergeJoin.InputCollection[1].HasSideEffects = false;

                               IDTSInput100 mergeInput1 = mergeJoin.InputCollection[0];
                                
                               IDTSVirtualInput100 vMergeInput1 = mergeInput1.GetVirtualInput();
                               int NumKeyColumns = 0;
                               foreach (IDTSVirtualInputColumn100 vColumn in vMergeInput1.VirtualInputColumnCollection)
                               {
                                   mergeInstance.SetUsageType(mergeInput1.ID, vMergeInput1, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                   if (vColumn.SortKeyPosition > NumKeyColumns)
                                       NumKeyColumns = vColumn.SortKeyPosition;
                               }
                                IDTSInput100 mergeInput2 = mergeJoin.InputCollection[1];
                                IDTSVirtualInput100 vMergeInput2 = mergeInput2.GetVirtualInput();            
                               foreach (IDTSVirtualInputColumn100 vColumn in vMergeInput2.VirtualInputColumnCollection)
                               {
                                   if (!MergeSortColumn.Contains(vColumn.Name))
                                   {
                                       mergeInstance.SetUsageType(mergeInput2.ID, vMergeInput2, vColumn.LineageID, DTSUsageType.UT_READONLY);
                                       if (vColumn.SortKeyPosition > NumKeyColumns)
                                           NumKeyColumns = vColumn.SortKeyPosition;
                                   }
                               } 
                               IDTSCustomProperty100 property1 = mergeJoin.CustomPropertyCollection[0];
                               property1.Value = 2;
                               IDTSCustomProperty100 property2 = mergeJoin.CustomPropertyCollection[1];
                               property2.Value = 1;

                               IDTSOutput100 outt = mergeJoin.OutputCollection[0];

                               for (int merge_cnt = (outt.OutputColumnCollection.Count / 2); merge_cnt < outt.OutputColumnCollection.Count; merge_cnt++)
                               {
                                   if (!MergeSortColumn.Contains(outt.OutputColumnCollection[merge_cnt].Name))
                                   {                                       
                                       outt.OutputColumnCollection[merge_cnt].Name = outt.OutputColumnCollection[merge_cnt].Name;
                                   }
                               }

                               mergeInstance.SetComponentProperty("JoinType", 1); //full join (0),left outer (1),inner (2)
                               mergeInstance.AcquireConnections(null);
                               mergeInstance.ReinitializeMetaData();
                               mergeInstance.ReleaseConnections();
                    
                                LastTrans = "MergeJoin";
                                break;

                            case "MULTICAST":
                                multiCastComponent = dataFlowTask.ComponentMetaDataCollection.New();
                                multiCastComponent.ComponentClassID = "DTSTransform.Multicast";
                                CManagedComponentWrapper multiCastWrapper = multiCastComponent.Instantiate();
                                multiCastWrapper.ProvideComponentProperties();

                                multiCastComponent.Name = "Multicast_"+i;
                                multiCastComponent.Description = "Multicast";
                                MulticastTargetTable = RuleList[i];
                                multiCast = "Y";
                    

                                switch (LastTrans)
                                {
                                    case "OleDBSource":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "ConditionalSplit":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "DerivedColumn":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "CharacterMap":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Aggregate":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Lookup":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "RowCount":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Sort":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "UnionAll":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "OLEDB":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "Merge":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "MergeJoin":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                    case "MultiCast":
                                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], multiCastComponent.InputCollection[0]);
                                        break;
                                }

                                IDTSInput100 multiCastInput = multiCastComponent.InputCollection[0];
                                IDTSVirtualInput100 multiCastVirtualInput = multiCastInput.GetVirtualInput();
                                IDTSVirtualInputColumnCollection100 multiCastVirtualInputColumns = multiCastVirtualInput.VirtualInputColumnCollection;

                                LastTrans = "MultiCast";
                            break;

                        }
                    }

                    /*
                    componentSCD = dataFlowTask.ComponentMetaDataCollection.New();
                    componentSCD.ComponentClassID = "DTSTransform.SCD";
                    CManagedComponentWrapper SCDDesignTime = componentSCD.Instantiate();
                    SCDDesignTime.ProvideComponentProperties();
                    componentSCD.Name = "SCD Task";
                    // string compName = new Application().PipelineComponentInfos["Slowly Changing Dimension"].CreationName;

                    componentSCD.Description = "SCD Transform Example";

                    switch (LastTrans)
                    {
                        case "OleDBSource":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "ConditionalSplit":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "DerivedColumn":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "CharacterMap":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Aggregate":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Lookup":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], componentSCD.InputCollection[0]);
                            break;
                        case "RowCount":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Sort":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "UnionAll":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "OLEDB":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "Merge":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "MergeJoin":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                        case "MultiCast":
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], componentSCD.InputCollection[0]);
                            break;
                    }

                    
                    try
                    {
                        // Set the custom properties of the SCD.              
                        SCDDesignTime.SetComponentProperty("CurrentRowWhere", "[CurrentStatus] = 'A'");
                        SCDDesignTime.SetComponentProperty("EnableInferredMember", false);
                        SCDDesignTime.SetComponentProperty("UpdateChangingAttributeHistory", false);
                        SCDDesignTime.SetComponentProperty("SqlCommand", "SELECT [city], [cust_code], [first_name], [phone1],[CurrentStatus] FROM [dbo].[CUSTOMER_TGT]");
                        componentSCD.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                        componentSCD.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);

                    }
                    catch (Exception exception)
                    {

                    }

                    //MapColumn(componentSCD, SCDDesignTime);
                    IDTSInput100 SCDInput = componentSCD.InputCollection[0];
                    IDTSVirtualInput100 virtualInput = SCDInput.GetVirtualInput();
                    IDTSVirtualInputColumnCollection100 SCDVirtualInputColumns = virtualInput.VirtualInputColumnCollection;
                    
                    //Setting all properties
                    foreach (IDTSVirtualInputColumn100 virtualColumn in SCDVirtualInputColumns)
                    {
                        try
                        {
                            String cname1 = virtualColumn.Name;

                            if (cname1 == "cust_code")
                            {
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 1);
                            }
                            // designTime.SetInputColumnProperty(SCDInput.ID,virtualColumn.ID, "ColumnType", 1);
                            if (cname1 == "city")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 3);
                            }
                            if (cname1 == "phone1")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 2);
                            }
                            if (cname1 == "first_name")
                            {
                                //// Set one of the column type properties as historical attributes
                                IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                                SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "ColumnType", 4);
                            }
                            //if (cname1 == "CurrentStatus")
                            //{
                            //    IDTSInputColumn100 inputColumn = SCDDesignTime.SetUsageType(SCDInput.ID, virtualInput, virtualColumn.LineageID, DTSUsageType.UT_READONLY);
                            //    SCDDesignTime.SetInputColumnProperty(SCDInput.ID, inputColumn.ID, "CurrentRowWhere", "");
                            //}
                        }
                        catch (Exception fg)
                        {

                        }
                    }

                    SCDDesignTime.AcquireConnections(null);
                    SCDDesignTime.ReinitializeMetaData();
                    SCDDesignTime.ReleaseConnections();
                    IDTSInputColumn100 SCDCol = null;
                    IDTSVirtualInput100 vSCDInput = componentSCD.InputCollection[0].GetVirtualInput();
                    //IDTSVirtualInputColumn100 vColumn = null;

                    foreach (IDTSVirtualInputColumn100 vSCDColumn in vSCDInput.VirtualInputColumnCollection)
                    {

                        SCDCol = SCDDesignTime.SetUsageType(componentSCD.InputCollection[0].ID, vSCDInput, vSCDColumn.LineageID, DTSUsageType.UT_READONLY);
                        
                    }
                     

                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + "ErrorPackage.dtsx", p, null);
                    */

                    //Data Convert Transform start//
                    
                    int condCount = 0;

                    string[] DEST_Tables = DST_Table.Split(',');

                    foreach (string DEST_TABLE in DEST_Tables)
                    {
                        
                        IDTSComponentMetaData100 dataConvertComponent1 = dataFlowTask.ComponentMetaDataCollection.New();
                        dataConvertComponent1.ComponentClassID = "DTSTransform.DataConvert";
                        CManagedComponentWrapper dataConvertWrapper1 = dataConvertComponent1.Instantiate();
                        dataConvertWrapper1.ProvideComponentProperties();
                        
                        dataConvertComponent1.Description = "Data Conversion Component";
                        dataConvertComponent1.Name = "DataConvert Component_" + condCount;

                        if (condCount > 0)
                        {
                            LastTrans = "ConditionalSplit";
                        }
                        SqlCommand Sqlcmd = new SqlCommand();
                        SqlConnection SqlConn = new SqlConnection();
                        //SqlConn.ConnectionString = "Data Source=RAJESH-PC;Initial Catalog=Test;Integrated Security=SSPI";
                        switch (LastTrans)
                        {
                            case "OleDBSource":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(component.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "ConditionalSplit":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConditional_Split.OutputCollection[condCount], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "DerivedColumn":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(data_DerivedColumn.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "CharacterMap":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Aggregate":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(aggregate.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Lookup":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(lookupComponent.OutputCollection[LookupOutput], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "RowCount":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(RowCountComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Sort":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(sortWrapper.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "UnionAll":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentUnionAll.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "OLEDB":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataOLEDbCommand.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "CopyColumn":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(copyMapComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "MergeJoin":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(mergeJoin.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "Merge":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(componentMerge.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                            case "MultiCast":
                                dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[0], dataConvertComponent1.InputCollection[0]);
                                break;
                        }
                        SqlConn.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");
                        
                        Sqlcmd.Connection = SqlConn;
                        Sqlcmd.CommandType = CommandType.Text;
                        
                        Sqlcmd.CommandText = "Select COLUMN_NAME,DATA_TYPE,Isnull(CHARACTER_MAXIMUM_LENGTH,0) As CHARACTER_MAXIMUM_LENGTH,Isnull(NUMERIC_PRECISION,0) As NUMERIC_PRECISION,Isnull(NUMERIC_SCALE,0) As NUMERIC_SCALE from Information_Schema.COLUMNS where TABLE_NAME='" + DEST_TABLE + "'";
                        SqlDataAdapter sqlAdp = new SqlDataAdapter();
                        DataSet dsCols = new DataSet();
                        if (SqlConn.State == ConnectionState.Closed)
                            SqlConn.Open();
                        sqlAdp.SelectCommand = Sqlcmd;
                        SqlDataReader rdr = null;
                        rdr = Sqlcmd.ExecuteReader();
                        int a = 0;
                        while (rdr.Read())
                        {
                            try
                            {
                                string COLUMN_NAME = (string)rdr["COLUMN_NAME"];
                                string DATA_TYPE = (string)rdr["DATA_TYPE"];
                                int CHARACTER_MAXIMUM_LENGTH = (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
                                int NUMERIC_PRECISION = Convert.ToInt32(rdr["NUMERIC_PRECISION"]);
                                int NUMERIC_SCALE = Convert.ToInt32(rdr["NUMERIC_SCALE"]);

                                IDTSVirtualInput100 dataConvertVirtualInput = dataConvertComponent1.InputCollection[0].GetVirtualInput();
                                IDTSOutput100 dataConvertOutput = dataConvertComponent1.OutputCollection[0];
                                IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;
                                
                                int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[COLUMN_NAME].LineageID;

                                dataConvertWrapper1.SetUsageType(
                                    dataConvertComponent1.InputCollection[0].ID,
                                    dataConvertVirtualInput, sourceColumnLineageId,
                                    DTSUsageType.UT_READONLY);

                                IDTSOutputColumn100 ConvCol1 = dataConvertWrapper1.InsertOutputColumnAt(dataConvertOutput.ID, 0, COLUMN_NAME, string.Empty);

                                if (DATA_TYPE.ToLower() == "varchar" || DATA_TYPE.ToLower() == "char")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 1252);
                                }
                                if (DATA_TYPE.ToLower() == "nvarchar")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "numeric")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_NUMERIC, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "float")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R8, 0, 0, NUMERIC_SCALE, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "datetime" || DATA_TYPE.ToLower() == "date")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBDATE, 0, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "integer" || DATA_TYPE.ToLower() == "int" || DATA_TYPE.ToLower() == "bigint")

                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I8, 0, 0, 0, 0);
                                }
                                else if (DATA_TYPE.ToLower() == "smallint" || DATA_TYPE.ToLower() == "tinyint")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I2, 0, 0, 0, 0);
                                }
                               
                                else if (DATA_TYPE.ToLower() == "bit")
                                {
                                    ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_BOOL, 0, 0, 0, 0);
                                }

                                                          
                                ConvCol1.MappedColumnID = a;

                                dataConvertWrapper1.SetOutputColumnProperty(
                                        dataConvertOutput.ID,
                                        ConvCol1.ID,
                                        "SourceInputColumnLineageID",
                                        sourceColumnLineageId);
                                a = a + 1;
                            }
                            catch (Exception ex)
                            {

                            }
                        }

                        if (SqlConn.State == ConnectionState.Open)
                            SqlConn.Close();
                        
                        //Get input and virtual input for destination to select and map columns:

                        IDTSComponentMetaData100 destination = dataFlowTask.ComponentMetaDataCollection.New();
                        destination.ComponentClassID = "DTSAdapter.OleDbDestination";
                        CManagedComponentWrapper destDesignTime = destination.Instantiate();
                        destDesignTime.ProvideComponentProperties();
                        destination.Name = "OLEDBDestination_" + DEST_TABLE;


                        destination.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                        destination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);

                        destDesignTime.SetComponentProperty("OpenRowset", DEST_TABLE); //Prajakta - To add the value from "DST Table"
                        destDesignTime.SetComponentProperty("AccessMode", 3);
                        destDesignTime.SetComponentProperty("FastLoadOptions", "TABLOCK,CHECK_CONSTRAINTS");
                        //Connect the source to destination component:
                        dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent1.OutputCollection[0], destination.InputCollection[0]);
                        IDTSInput100 destinationInputerr = destination.InputCollection[0];
                        IDTSVirtualInput100 destinationVirtualInputerr = destinationInputerr.GetVirtualInput();
                        IDTSVirtualInputColumnCollection100 destinationVirtualInputColumnserr = destinationVirtualInputerr.VirtualInputColumnCollection;

                        //Reinitialize the destination metadata:

                        destDesignTime.AcquireConnections(null);
                        destDesignTime.ReinitializeMetaData();
                        destDesignTime.ReleaseConnections();

                        //Get the destination s default input and virtual input:

                        IDTSInput100 destInput = destination.InputCollection[0];
                        IDTSVirtualInput100 vInput = destInput.GetVirtualInput();
                        IDTSInputColumnCollection100 destInputCols = destInput.InputColumnCollection;
                        IDTSExternalMetadataColumnCollection100 destExtCols = destInput.ExternalMetadataColumnCollection;
                        IDTSOutputColumnCollection100 sourceColumns = dataConvertComponent1.OutputCollection[0].OutputColumnCollection;

                        IDTSOutputColumnCollection100 exSourceColumns = component.OutputCollection[0].OutputColumnCollection;
                        
                        // The OLEDB destination requires you to hook up the external data conversion columns
                        foreach (IDTSOutputColumn100 outputCol in sourceColumns)
                        {
                            try
                            {
                                // Get the external column id
                                IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
                                if (extCol != null)
                                {
                                    // Create an input column from an output col of previous component.
                                    vInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                                    IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
                                    if (inputCol != null)
                                    {
                                        // map the input column with an external metadata column
                                        destDesignTime.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
                                    }
                                }
                            }
                            catch (Exception exc)
                            {
                                foreach(string joinCol in joinColumns)
                                {
                                    if (outputCol.Name != joinCol)
                                    {
                                        Dts.TaskResult = (int)ScriptResults.Failure;
                                    }
                                }
                            }
                        }
                        condCount = condCount + 1;
                    }

                    if (multiCast == "Y")
                    {
                        int multiCastCount = 1;

                        string[] multiCast_Tables = MulticastTargetTable.Split('#');

                        foreach (string TGT_TABLE in multiCast_Tables)
                        {

                            IDTSComponentMetaData100 dataConvertComponent1 = dataFlowTask.ComponentMetaDataCollection.New();
                            dataConvertComponent1.ComponentClassID = "DTSTransform.DataConvert";
                            CManagedComponentWrapper dataConvertWrapper1 = dataConvertComponent1.Instantiate();
                            dataConvertWrapper1.ProvideComponentProperties();

                            dataConvertComponent1.Description = "Data Conversion Component";
                            dataConvertComponent1.Name = "DataConvert Component_MultiCast_" + multiCastCount;


                            SqlCommand Sqlcmd = new SqlCommand();
                            SqlConnection SqlConn = new SqlConnection();
                            //SqlConn.ConnectionString = "Data Source=RAJESH-PC;Initial Catalog=Test;Integrated Security=SSPI";

                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(multiCastComponent.OutputCollection[multiCastCount], dataConvertComponent1.InputCollection[0]);

                            SqlConn.ConnectionString = DST_Connection_String.Replace("Provider=SQLOLEDB.1;", "");

                            Sqlcmd.Connection = SqlConn;
                            Sqlcmd.CommandType = CommandType.Text;

                            Sqlcmd.CommandText = "Select COLUMN_NAME,DATA_TYPE,Isnull(CHARACTER_MAXIMUM_LENGTH,0) As CHARACTER_MAXIMUM_LENGTH,Isnull(NUMERIC_PRECISION,0) As NUMERIC_PRECISION,Isnull(NUMERIC_SCALE,0) As NUMERIC_SCALE from Information_Schema.COLUMNS where TABLE_NAME='" + TGT_TABLE + "'";
                            SqlDataAdapter sqlAdp = new SqlDataAdapter();
                            DataSet dsCols = new DataSet();
                            if (SqlConn.State == ConnectionState.Closed)
                                SqlConn.Open();
                            sqlAdp.SelectCommand = Sqlcmd;
                            SqlDataReader rdr = null;
                            rdr = Sqlcmd.ExecuteReader();
                            int a = 0;
                            while (rdr.Read())
                            {
                                try
                                {
                                    string COLUMN_NAME = (string)rdr["COLUMN_NAME"];
                                    string DATA_TYPE = (string)rdr["DATA_TYPE"];
                                    int CHARACTER_MAXIMUM_LENGTH = (int)rdr["CHARACTER_MAXIMUM_LENGTH"];
                                    int NUMERIC_PRECISION = Convert.ToInt32(rdr["NUMERIC_PRECISION"]);
                                    int NUMERIC_SCALE = Convert.ToInt32(rdr["NUMERIC_SCALE"]);

                                    IDTSVirtualInput100 dataConvertVirtualInput = dataConvertComponent1.InputCollection[0].GetVirtualInput();
                                    IDTSOutput100 dataConvertOutput = dataConvertComponent1.OutputCollection[0];
                                    IDTSOutputColumnCollection100 dataConvertOutputColumns = dataConvertOutput.OutputColumnCollection;

                                    int sourceColumnLineageId = dataConvertVirtualInput.VirtualInputColumnCollection[COLUMN_NAME].LineageID;

                                    dataConvertWrapper1.SetUsageType(
                                        dataConvertComponent1.InputCollection[0].ID,
                                        dataConvertVirtualInput, sourceColumnLineageId,
                                        DTSUsageType.UT_READONLY);

                                    IDTSOutputColumn100 ConvCol1 = dataConvertWrapper1.InsertOutputColumnAt(dataConvertOutput.ID, 0, COLUMN_NAME, string.Empty);

                                    if (DATA_TYPE.ToLower() == "varchar" || DATA_TYPE.ToLower() == "char")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_STR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 1252);
                                    }
                                    if (DATA_TYPE.ToLower() == "nvarchar")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_WSTR, CHARACTER_MAXIMUM_LENGTH, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "numeric")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_NUMERIC, CHARACTER_MAXIMUM_LENGTH, NUMERIC_PRECISION, NUMERIC_SCALE, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "float")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_R8, 0, 0, NUMERIC_SCALE, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "datetime" || DATA_TYPE.ToLower() == "date")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_DBDATE, 0, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "integer" || DATA_TYPE.ToLower() == "int")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I8, 0, 0, 0, 0);
                                    }
                                    else if (DATA_TYPE.ToLower() == "smallint" || DATA_TYPE.ToLower() == "tinyint")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_I2, 0, 0, 0, 0);
                                    }

                                    else if (DATA_TYPE.ToLower() == "bit")
                                    {
                                        ConvCol1.SetDataTypeProperties(Microsoft.SqlServer.Dts.Runtime.Wrapper.DataType.DT_BOOL, 0, 0, 0, 0);
                                    }


                                    ConvCol1.MappedColumnID = a;

                                    dataConvertWrapper1.SetOutputColumnProperty(
                                            dataConvertOutput.ID,
                                            ConvCol1.ID,
                                            "SourceInputColumnLineageID",
                                            sourceColumnLineageId);
                                    a = a + 1;
                                }
                                catch (Exception ex)
                                {

                                }
                            }

                            if (SqlConn.State == ConnectionState.Open)
                                SqlConn.Close();

                            //Get input and virtual input for destination to select and map columns:

                            IDTSComponentMetaData100 destination = dataFlowTask.ComponentMetaDataCollection.New();
                            destination.ComponentClassID = "DTSAdapter.OleDbDestination";
                            CManagedComponentWrapper destDesignTime = destination.Instantiate();
                            destDesignTime.ProvideComponentProperties();
                            destination.Name = "OLEDBDestination_" + TGT_TABLE + "_" + multiCastCount;


                            destination.RuntimeConnectionCollection[0].ConnectionManagerID = cm1.ID;
                            destination.RuntimeConnectionCollection[0].ConnectionManager = DtsConvert.GetExtendedInterface(cm1);

                            destDesignTime.SetComponentProperty("OpenRowset", TGT_TABLE); //Prajakta - To add the value from "DST Table"
                            destDesignTime.SetComponentProperty("AccessMode", 3);
                            destDesignTime.SetComponentProperty("FastLoadOptions", "TABLOCK,CHECK_CONSTRAINTS");
                            //Connect the source to destination component:
                            dataFlowTask.PathCollection.New().AttachPathAndPropagateNotifications(dataConvertComponent1.OutputCollection[0], destination.InputCollection[0]);
                            IDTSInput100 destinationInputerr = destination.InputCollection[0];
                            IDTSVirtualInput100 destinationVirtualInputerr = destinationInputerr.GetVirtualInput();
                            IDTSVirtualInputColumnCollection100 destinationVirtualInputColumnserr = destinationVirtualInputerr.VirtualInputColumnCollection;

                            //Reinitialize the destination metadata:

                            destDesignTime.AcquireConnections(null);
                            destDesignTime.ReinitializeMetaData();
                            destDesignTime.ReleaseConnections();

                            //Get the destination s default input and virtual input:

                            IDTSInput100 destInput = destination.InputCollection[0];
                            IDTSVirtualInput100 vInput = destInput.GetVirtualInput();
                            IDTSInputColumnCollection100 destInputCols = destInput.InputColumnCollection;
                            IDTSExternalMetadataColumnCollection100 destExtCols = destInput.ExternalMetadataColumnCollection;
                            IDTSOutputColumnCollection100 sourceColumns = dataConvertComponent1.OutputCollection[0].OutputColumnCollection;

                            IDTSOutputColumnCollection100 exSourceColumns = component.OutputCollection[0].OutputColumnCollection;

                            // The OLEDB destination requires you to hook up the external data conversion columns
                            foreach (IDTSOutputColumn100 outputCol in sourceColumns)
                            {
                                try
                                {
                                    // Get the external column id
                                    IDTSExternalMetadataColumn100 extCol = (IDTSExternalMetadataColumn100)destExtCols[outputCol.Name];
                                    if (extCol != null)
                                    {
                                        // Create an input column from an output col of previous component.
                                        vInput.SetUsageType(outputCol.ID, DTSUsageType.UT_READONLY);
                                        IDTSInputColumn100 inputCol = destInputCols.GetInputColumnByLineageID(outputCol.ID);
                                        if (inputCol != null)
                                        {
                                            // map the input column with an external metadata column
                                            destDesignTime.MapInputColumn(destInput.ID, inputCol.ID, extCol.ID);
                                        }
                                    }
                                }
                                catch (Exception exc)
                                {
                                    foreach (string joinCol in joinColumns)
                                    {
                                        if (outputCol.Name != joinCol)
                                        {
                                            Dts.TaskResult = (int)ScriptResults.Failure;
                                        }
                                    }
                                }
                            }
                            multiCastCount = multiCastCount + 1;
                        }
                    }


                    //We then save the package into a file system.
                    //Dts.TaskResult = (int)ScriptResults.Success;
                    Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + Template_Name + ".dtsx", p, null);
                    //p.Execute();
                }

            }
            catch (Exception ex)
            {
                Automaton_app.SaveToXml(Dts.Variables["PackageSaveLocation"].Value.ToString().Trim() + "ErrorPackage.dtsx", p, null);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }

        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:NoContent>Reference;Import;Folder</msb:NoContent>
		<msb:ProjectId>{BCC422BA-10FD-488F-8FE6-8AF6FD310273}</msb:ProjectId>
		<msb:DisplayName>st_0cef29a9393f4e4c8dda023d910526e5</msb:DisplayName>
		<msb:CodeName>st_0cef29a9393f4e4c8dda023d910526e5</msb:CodeName>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="ScriptMain.cs"/>
		<msb:Project Include="st_0cef29a9393f4e4c8dda023d910526e5.csproj"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Settings.get_Default():ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Sett" +
    "ings")]

namespace ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties
{


    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase
    {

        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();

        public static Settings Default
        {
            get
            {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_0cef29a9393f4e4c8dda023d910526e5.csproj")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Hexaware")]
[assembly: AssemblyProduct("ST_0cef29a9393f4e4c8dda023d910526e5.csproj")]
[assembly: AssemblyCopyright("Copyright @ Hexaware 2015")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope = "member", Target = "ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties
{


    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources
    {

        private static global::System.Resources.ResourceManager resourceMan;

        private static global::System.Globalization.CultureInfo resourceCulture;

        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources()
        {
        }

        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager
        {
            get
            {
                if ((resourceMan == null))
                {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_0cef29a9393f4e4c8dda023d910526e5.csproj.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }

        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture
        {
            get
            {
                return resourceCulture;
            }
            set
            {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_0cef29a9393f4e4c8dda023d910526e5.csproj.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDADuiiFcAAAAAAAAAAOAAAiELAQsAAOgAAAAIAAAAAAAAHgcB
AAAgAAAAIAEAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAABgAQAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAMgGAQBTAAAAACABAJAEAAAAAAAAAAAAAAAAAAAA
AAAAAEABAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAJOcAAAAgAAAA6AAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAJAEAAAAIAEAAAYAAADqAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAEABAAACAAAA8AAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAA
BwEAAAAAAEgAAAACAAUAIJsAAKhrAAABAAAAAAAAAGiaAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4CKA4AAAoqEzACAC0AAAABAAARfgEAAAQtIHIBAABw0AIA
AAIoDwAACm8QAAAKcxEAAAoKBoABAAAEfgEAAAQqGn4CAAAEKh4CgAIAAAQqGn4DAAAEKi5zBgAA
BoADAAAEKh4CKBQAAAoqHgIoDgAACipOAwJ7BwAABG8NAAAGGm8XAAAKKgAbMAgAq3cAAAIAABFz
GAAACgoGbxkAAApygQAAcG8aAAAKdCEAAAELBxdvGwAACgcXbxwAAAoHcp8AAHBvHQAACgdynwAA
cG8eAAAKcx8AAAoMAiggAAAKbyEAAApyxQAAcG8iAAAKbyMAAApvJAAACm8lAAAKDQly2QAAcG8m
AAAKEwQUEwUJcucAAHBvJwAACjoSAQAAEgQVKCgAAAosDHLpAABwCSgpAAAKDQZvKgAACnL1AABw
bysAAAoTBhEGcgEBAHBvLAAAChEGchsBAHAWjQEAAAEoLQAACm8uAAAKB28vAAAKcioCAHBvGgAA
ChMFEQV1KgAAARMHEQdvMAAACnJGAgBwbzEAAAoRB3JQAgBwbzIAAAoRB28wAAAKcnQCAHBvMQAA
ChEHclACAHBvMgAAChEHbzAAAApyjAIAcG8xAAAKEQdyAQEAcG8yAAAKEQdvMAAACnKiAgBwbzEA
AAoRBwlvMgAACggCKCAAAApvIQAACnLIAgBwbyIAAApvIwAACm8kAAAKbyUAAAoJcvACAHAoMwAA
CgYUbzQAAAo4xnUAAHM1AAAKEwhzNgAAChMJEQkCKCAAAApvIQAACnL8AgBwbyIAAApvIwAACm8k
AAAKbyUAAApvNwAAChEIEQlvOAAAChEIGm85AAAKEQhyFgMAcG86AAAKAiggAAAKbyEAAApyZgMA
cG8iAAAKbyMAAApvJAAACm8lAAAKJnJ6AwBwAiggAAAKbyEAAApyZgMAcG8iAAAKbyMAAApvJAAA
Cm8lAAAKczsAAAoTChEKF288AAAKEQofEG89AAAKEQhvPgAAChEKbz8AAAomcpADAHACKCAAAApv
IQAACnKoAwBwbyIAAApvIwAACm8kAAAKbyUAAApzOwAAChMLEQsXbzwAAAoRCx8Qbz0AAAoRCG8+
AAAKEQtvPwAACiZyvgMAcAIoIAAACm8hAAAKctgDAHBvIgAACm8jAAAKbyQAAApvJQAACnM7AAAK
EwwRDBdvPAAAChEMHwtvPQAAChEIbz4AAAoRDG8/AAAKJnLwAwBwAiggAAAKbyEAAApyyAIAcG8i
AAAKbyMAAApvJAAACm8lAAAKczsAAAoTDRENF288AAAKEQ0fEG89AAAKEQhvPgAAChENbz8AAAom
chYEAHBy5wAAcHM7AAAKEw4RDhhvPAAAChEOHxBvPQAAChEIbz4AAAoRDm8/AAAKJnIwBABwcucA
AHBzOwAAChMPEQ8YbzwAAAoRDx8Qbz0AAAoRCG8+AAAKEQ9vPwAACiZyQgQAcAIoIAAACm8hAAAK
clQEAHBvIgAACm8jAAAKbyQAAApvJQAACnM7AAAKExAREBdvPAAAChEQHxBvPQAAChEIbz4AAAoR
EG8/AAAKJnNAAAAKExFzQQAACiYRCW9CAAAKLQcRCW9DAAAKERERCG9EAAAKFBMSEQhvRQAAChMS
FBMTFBMUFBMVFBMWFBMXFBMYFBMZFBMaFBMbFBMcFhMdOAABAAAREnJkBABwb0YAAAp0HAAAARMT
ERJyeAQAcG9GAAAKbyQAAApyjgQAcHLnAABwb0cAAApvSAAAChMZERlykgQAcG9JAAAKLBMREnKm
BABwb0YAAAp0HAAAARMUERlyvAQAcG9JAAAKLCYREnLKBABwb0YAAAp0HAAAARMVERJy3gQAcG9G
AAAKdBwAAAETGhEScvYEAHBvRgAACnQcAAABExYREnIKBQBwb0YAAAp0HAAAARMXERJyJgUAcG9G
AAAKdBwAAAEmERJyOgUAcG9GAAAKdBwAAAETGBESclAFAHBvRgAACnQcAAABExwREnJ8BQBwb0YA
AAp0HAAAARMbERJvSgAACjr0/v//EQlvSwAACnM1AAAKEx5zNgAAChMfFBMgc0AAAAoTIXNBAAAK
JhEecqIFAHACKCAAAApvIQAACnLYAwBwbyIAAApvIwAACm8kAAAKbyUAAAooKQAACm86AAAKER8C
KCAAAApvIQAACnL8AgBwbyIAAApvIwAACm8kAAAKbyUAAApvNwAAChEeER9vOAAAChEfb0IAAAot
BxEfb0MAAAoRHhEfbzgAAAoRHhdvOQAAChEhER5vRAAAChEeb0UAAAoTIH5MAAAKEyIrExEgcg4G
AHBvRgAACnQcAAABEyIRIG9KAAAKLeQRH29LAAAKESJvSAAACnIYBgBwKE0AAAo5ywIAAHM1AAAK
EyNzNgAAChMkFBMlc0AAAAoTJnNBAAAKJhEkERxyKgYAcHLnAABwb0cAAApvNwAAChEjclQGAHAR
FnLOBgBwKDMAAApvOgAAChEjESRvOAAAChEkb0IAAAotBxEkb0MAAAoRIxEkbzgAAAoRIxdvOQAA
ChEmESNvRAAAChEjb0UAAAoTJRYTJysDFxMnESVvSgAACi30ESRvSwAACnM1AAAKEyhzNgAAChMp
ESkCKCAAAApvIQAACnL8AgBwbyIAAApvIwAACm8kAAAKbyUAAApvNwAAChEoESlvOAAAChEoGm85
AAAKEShy0gYAcG86AAAKcnoDAHACKCAAAApvIQAACnJmAwBwbyIAAApvIwAACm8kAAAKbyUAAApz
OwAAChMqESoXbzwAAAoRKh8Qbz0AAAoRKG8+AAAKESpvPwAACiZykAMAcAIoIAAACm8hAAAKcqgD
AHBvIgAACm8jAAAKbyQAAApvJQAACnM7AAAKEysRKxdvPAAAChErHxBvPQAAChEobz4AAAoRK28/
AAAKJnK+AwBwAiggAAAKbyEAAApy2AMAcG8iAAAKbyMAAApvJAAACm8lAAAKczsAAAoTLBEsF288
AAAKESwfC289AAAKEShvPgAAChEsbz8AAAomckIEAHACKCAAAApvIQAACnJUBABwbyIAAApvIwAA
Cm8kAAAKbyUAAApzOwAAChMtES0XbzwAAAoRLR8Qbz0AAAoRKG8+AAAKES1vPwAACiZyHgcAcBEn
jCcAAAFzOwAAChMuES4XbzwAAAoRLh8Lbz0AAAoRKG8+AAAKES5vPwAACiZyMAQAcHLnAABwczsA
AAoTLxEvGG88AAAKES8fEG89AAAKEShvPgAAChEvbz8AAAomc0AAAAoTMBEpb0IAAAotBxEpb0MA
AAoRMBEob0QAAAoRKG9FAAAKJhEpb0sAAAoGbyoAAApy9QAAcG8rAAAKEzERMXIBAQBwbywAAAoR
MREbby4AAAoGbyoAAApy9QAAcG8rAAAKEzIRMnI4BwBwbywAAAoRMhEcby4AAAoHby8AAApyXAcA
cG8aAAAKEzNyggcAcBM0FhM1FBM2FBM3IIIAAAATOAZvTgAACnKGBwBwFnKuBwBwcrgHAHBvTwAA
CiYRGReNPQAAAf4ODQH+DA0BFh9+nf4MDQFvUAAAChaabyUAAApyyAcAcChNAAAKOZ0EAAARGBeN
PQAAAf4ODQH+DA0BFh9+nf4MDQFvUAAAChaabyUAAAoXjT0AAAH+Dg0B/gwNARYfI53+DA0Bb1AA
AAoWmm8lAAAKb0gAAApy3gcAcChNAAAKOUMEAAAHby8AAApyKgIAcG8aAAAKEwURBXUqAAABEzkU
EzoROW9RAAAKdD4AAAETOxEYF409AAAB/g4NAf4MDQEWH36d/gwNAW9QAAAKFppvJQAACheNPQAA
Af4ODQH+DA0BFh8jnf4MDQFvUAAAChiabyUAAAoTNxQTNhE3cuYHAHBvSQAACixsETcXjT0AAAH+
Dg0B/gwNARYfJJ3+DA0Bb1AAAAoXmm8lAAAKF409AAAB/g4NAf4MDQEWHyyd/gwNAW9QAAAKEzYR
NxeNPQAAAf4ODQH+DA0BFh8knf4MDQFvUAAAChaabyUAAApvSAAAChM3ETY50wEAABE2/g4OARb+
Dg8BOLQBAAD+DA4B/gwPAZoTPBE7b1IAAApvUwAACiYRPBeNPQAAAf4ODQH+DA0BFh8unf4MDQFv
UAAAChaab0gAAApvJQAACiX+DhABObgAAAD+DBABcuoHAHAoTQAACi0l/gwQAXL4BwBwKE0AAAot
VP4MEAFyCggAcChNAAAKLUQ4gwAAAAZvTgAAChE8F409AAAB/g4NAf4MDQEWHy6d/gwNAW9QAAAK
F5oWcq4HAHByFAgAcG9PAAAKJiCCAAAAEzgrfgZvTgAAChE8F409AAAB/g4NAf4MDQEWHy6d/gwN
AW9QAAAKF5oWcq4HAHAoVAAACoxBAAABb08AAAomIIUAAAATOCs6Bm9OAAAKETwXjT0AAAH+Dg0B
/gwNARYfLp3+DA0Bb1AAAAoXmhZyrgcAcBaMJwAAAW9PAAAKJhkTOBE7b1IAAAoRNW9VAAAKEz0R
PXIYCABwETwXjT0AAAH+Dg0B/gwNARYfLp3+DA0Bb1AAAAoXmigpAAAKb1YAAAoRPRhvVwAAChE9
EThvWAAAChE9ETWMJwAAAW9ZAAAKET0Vb1oAAAoRNRdYEzX+DA8BF1j+Dg8B/gwPAf4MDgGOaT89
/v//ERgXjT0AAAH+Dg0B/gwNARYffp3+DA0Bb1AAAAoWmm8lAAAKF409AAAB/g4NAf4MDQEWHyOd
/gwNAW9QAAAKGJpvJQAACm9IAAAKF409AAAB/g4NAf4MDQEWHySd/gwNAW9QAAAKFppvJQAACnIm
CABwKE0AAAosCXIBAQBwEzorB3I4BwBwEzoROW8wAAAKckYCAHBvMQAAChE5clACAHBvMgAAChE5
bzAAAApydAIAcG8xAAAKETlyUAIAcG8yAAAKETlvMAAACnKMAgBwbzEAAAoRORE6bzIAAAoROW8w
AAAKcqICAHBvMQAAChE5ERgXjT0AAAH+Dg0B/gwNARYffp3+DA0Bb1AAAAoWmheNPQAAAf4ODQH+
DA0BFh8jnf4MDQFvUAAACheabzIAAAoRGReNPQAAAf4ODQH+DA0BFh9+nf4MDQFvUAAACheabyUA
AApyyAcAcChbAAAKLBAHb1wAAAoRBREzb10AAAomcjQIAHATNBEzdSoAAAETPhE+b1EAAAp1CAAA
AhM/ET5yOAgAcBEWKCkAAApvHQAAChE/bxgAAAZvHAAABhNAEUByQggAcG8kAAAGEUBvJwAABhNB
EUFvLgAABhFAcnAIAHBvIQAABhFAcnAIAHBvHwAABhFAbyoAAAZvQQAABhYxPBFAbyoAAAYWjCcA
AAFvPwAABhExKGgAAApvRgAABhFAbyoAAAYWjCcAAAFvPwAABhExb2oAAApvRAAABhFBcogIAHAY
jCcAAAFvMwAABiYRQXKeCABwERNvMwAABiYRQRRvOwAABhFBby8AAAYRQW88AAAGFBNCFBNDFBNE
FBNFFBNGFBNHFBNIFBNJFBNKFBNLFBNMFBNNFBNOFBNPFBNQERkXjT0AAAH+Dg0B/gwNARYffp3+
DA0Bb1AAAAoTUREYF409AAAB/g4NAf4MDQEWH36d/gwNAW9QAAAKE1J+TAAACiZyggcAcBNTFBNU
crQIAHATVX5MAAAKE1YWE1cRNHI0CABwKE0AAAosAxcTVxFXE1g4/VQAABEZF409AAAB/g4NAf4M
DQEWHyyd/gwNAW9QAAAKFppvJQAACiYRUhFYEVIRWJpvJQAACqIRURFYmiX+DhABObRUAAD+E34I
AAAEOrsAAAAfDnNwAAAKJXLIBwBwFihxAAAKJXLMCABwFyhxAAAKJXLuCABwGChxAAAKJXIKCQBw
GShxAAAKJXIkCQBwGihxAAAKJXK8BABwGyhxAAAKJXI4CQBwHChxAAAKJXJKCQBwHShxAAAKJXJU
CQBwHihxAAAKJXKGCQBwHwkocQAACiVymAkAcB8KKHEAAAolcqQJAHAfCyhxAAAKJXKSBABwHwwo
cQAACiVyvgkAcB8NKHEAAAr+E4AIAAAE/hN+CAAABP4MEAH+DREBKHIAAAo51FMAAP4MEQFFDgAA
AAUAAABIBAAAXgoAAJcTAAAFGQAA6yEAAJUqAAAxLwAAMS8AABE2AABoOgAAND8AAO1DAAACTwAA
OI5TAAAHby8AAApyKgIAcG8aAAAKE1kRWXUqAAABE1oRWm9RAAAKdD4AAAETWxYTNXLSCQBwEViM
JwAAAShzAAAKE1wRUhFYmiYRUhFYmheNPQAAAf4ODQH+DA0BFh8jnf4MDQFvUAAACheaE10UE14R
UhFYmheNPQAAAf4ODQH+DA0BFh8jnf4MDQFvUAAAChiaEzcUEzYRN3LmBwBwb0kAAAosbBE3F409
AAAB/g4NAf4MDQEWHySd/gwNAW9QAAAKF5pvJQAACheNPQAAAf4ODQH+DA0BFh8snf4MDQFvUAAA
ChM2ETcXjT0AAAH+Dg0B/gwNARYfJJ3+DA0Bb1AAAAoWmm8lAAAKb0gAAAoTNxE2OdMBAAARNv4O
DgEW/g4PATi0AQAA/gwOAf4MDwGaE18RW29SAAAKb1MAAAomEV8XjT0AAAH+Dg0B/gwNARYfLp3+
DA0Bb1AAAAoWmm9IAAAKbyUAAAol/g4QATm4AAAA/gwQAXLqBwBwKE0AAAotJf4MEAFy+AcAcChN
AAAKLVT+DBABcgoIAHAoTQAACi1EOIMAAAAGb04AAAoRXxeNPQAAAf4ODQH+DA0BFh8unf4MDQFv
UAAACheaFnKuBwBwchQIAHBvTwAACiYgggAAABM4K34Gb04AAAoRXxeNPQAAAf4ODQH+DA0BFh8u
nf4MDQFvUAAACheaFnKuBwBwKFQAAAqMQQAAAW9PAAAKJiCFAAAAEzgrOgZvTgAAChFfF409AAAB
/g4NAf4MDQEWHy6d/gwNAW9QAAAKF5oWcq4HAHAWjCcAAAFvTwAACiYZEzgRW29SAAAKETVvVQAA
ChNgEWByGAgAcBFfF409AAAB/g4NAf4MDQEWHy6d/gwNAW9QAAAKF5ooKQAACm9WAAAKEWAYb1cA
AAoRYBE4b1gAAAoRYBE1jCcAAAFvWQAAChFgFW9aAAAKETUXWBM1/gwPARdY/g4PAf4MDwH+DA4B
jmk/Pf7//xFSEViaF409AAAB/g4NAf4MDQEWHyOd/gwNAW9QAAAKGJpvJQAACm9IAAAKF409AAAB
/g4NAf4MDQEWHySd/gwNAW9QAAAKFppvJQAACnImCABwKE0AAAosCXIBAQBwE14rB3I4BwBwE14R
Wm8wAAAKckYCAHBvMQAAChFaEVxvMgAAChFabzAAAApydAIAcG8xAAAKEVpyUAIAcG8yAAAKEVpv
MAAACnKMAgBwbzEAAAoRWhFebzIAAAoRWm8wAAAKcqICAHBvMQAAChFaEV1vMgAAChE0cjQIAHAo
TQAACixkEVIRWJoXjT0AAAH+Dg0B/gwNARYfI53+DA0Bb1AAAAoWmm8lAAAKb0gAAApy3gcAcChN
AAAKLCwHb1wAAAoRBRFZb10AAAomB29cAAAKEVkRM29dAAAKJnKCBwBwEzQ4YE8AAAdvXAAAChEz
EVlvXQAACiY4S08AABE/bxgAAAZvHAAABhNCEUJy+AkAcG8kAAAGEUJvJwAABhNhEWFvLgAABhFC
cjQKAHARWIwnAAABKHMAAApvIQAABhFCclIKAHBvHwAABhFVJf4OEAE5/QMAAP4TfgkAAAQ6rgAA
AB8Nc3AAAAolcrQIAHAWKHEAAAolcsIKAHAXKHEAAAolcuQKAHAYKHEAAAolcgALAHAZKHEAAAol
choLAHAaKHEAAAolci4LAHAbKHEAAAolcjwLAHAcKHEAAAolck4LAHAdKHEAAAolclgLAHAeKHEA
AAolcvUAAHAfCShxAAAKJXJqCwBwHwoocQAACiVydgsAcB8LKHEAAAolcooLAHAfDChxAAAK/hOA
CQAABP4TfgkAAAT+DBAB/g0RAShyAAAKOSoDAAD+DBEBRQ0AAAAFAAAAPwAAAHkAAACzAAAA7QAA
ACcBAABiAQAAnAEAANYBAAAQAgAASgIAAIECAAC4AgAAOOgCAAARP28ZAAAGb04AAAYRQG8mAAAG
FownAAABb1EAAAYRQm8lAAAGFownAAABb1kAAAZvUAAABjiuAgAAET9vGQAABm9OAAAGEUJvJgAA
BhaMJwAAAW9RAAAGEUJvJQAABhaMJwAAAW9ZAAAGb1AAAAY4dAIAABE/bxkAAAZvTgAABhFDbyYA
AAYWjCcAAAFvUQAABhFCbyUAAAYWjCcAAAFvWQAABm9QAAAGODoCAAARP28ZAAAGb04AAAYRRG8m
AAAGFownAAABb1EAAAYRQm8lAAAGFownAAABb1kAAAZvUAAABjgAAgAAET9vGQAABm9OAAAGEUVv
JgAABhaMJwAAAW9RAAAGEUJvJQAABhaMJwAAAW9ZAAAGb1AAAAY4xgEAABE/bxkAAAZvTgAABhFG
byYAAAYRHYwnAAABb1EAAAYRQm8lAAAGFownAAABb1kAAAZvUAAABjiLAQAAET9vGQAABm9OAAAG
EUhvJgAABhaMJwAAAW9RAAAGEUJvJQAABhaMJwAAAW9ZAAAGb1AAAAY4UQEAABE/bxkAAAZvTgAA
BhFJbyYAAAYWjCcAAAFvUQAABhFCbyUAAAYWjCcAAAFvWQAABm9QAAAGOBcBAAARP28ZAAAGb04A
AAYRR28mAAAGFownAAABb1EAAAYRQm8lAAAGFownAAABb1kAAAZvUAAABjjdAAAAET9vGQAABm9O
AAAGEUtvJgAABhaMJwAAAW9RAAAGEUJvJQAABhaMJwAAAW9ZAAAGb1AAAAY4owAAABE/bxkAAAZv
TgAABhFMbyYAAAYWjCcAAAFvUQAABhFCbyUAAAYWjCcAAAFvWQAABm9QAAAGK2wRP28ZAAAGb04A
AAYRTW8mAAAGFownAAABb1EAAAYRQm8lAAAGFownAAABb1kAAAZvUAAABis1ET9vGQAABm9OAAAG
EU9vJgAABhaMJwAAAW9RAAAGEUJvJQAABhaMJwAAAW9ZAAAGb1AAAAYRQm8lAAAGFownAAABb1kA
AAYTYhFib2AAAAYTYxFjb2UAAAYTZBFCbyYAAAYWjCcAAAFvUQAABhNlEWVvVQAABiYWE2dy5wAA
cBNoEVIRWJoXjT0AAAH+Dg0B/gwNARYfI53+DA0Bb1AAAAoTaRFp/g4OARb+Dg8BOCYBAAD+DA4B
/gwPAZoTahFkb2gAAAb+DhIBONQAAAD+DBIBb38AAAp0BwAAAhNrEWtvDQAABm8kAAAKE2hyngsA
cBFocqILAHAoMwAACiYRam8lAAAKb0gAAAoRaG9IAAAKb0kAAAo5hwAAABFjb2UAAAYRaG9nAAAG
bxMAAAYTZhFhEWJvWgAABhFjEWYWbzIAAAYmEWEWEUJvJgAABhFnjCcAAAFvUQAABm9SAAAGbzkA
AAYTbBFhEWxvUgAABnKmCwBwEWeMJwAAAW81AAAGJhFhEWxvUgAABnLGCwBwEWpvJQAACm81AAAG
JhFnF1gTZ/4MEgFvhwAACjoe////3h3+DBIBdV8AAAH+DhMB/gwTASwJ/gwTAW+IAAAK3P4MDwEX
WP4ODwH+DA8B/gwOAY5pP8v+//9ywgoAcBNVODVJAAARP28YAAAGbxwAAAYTQxFDcuwLAHBvJAAA
BhFDbycAAAYTbRFtby4AAAYRQ3IiDABwEViMJwAAAShzAAAKbyEAAAYRQ28lAAAGFownAAABb1kA
AAZvYwAABhZveAAABhFDbyUAAAYWjCcAAAFvWQAABhZvXgAABhFVJf4OEAE5/QMAAP4TfgoAAAQ6
rgAAAB8Nc3AAAAolcrQIAHAWKHEAAAolcsIKAHAXKHEAAAolcuQKAHAYKHEAAAolcgALAHAZKHEA
AAolchoLAHAaKHEAAAolci4LAHAbKHEAAAolcjwLAHAcKHEAAAolck4LAHAdKHEAAAolclgLAHAe
KHEAAAolcvUAAHAfCShxAAAKJXJqCwBwHwoocQAACiVydgsAcB8LKHEAAAolcooLAHAfDChxAAAK
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
AHAdKHEAAAolclgLAHAeKHEAAAolcvUAAHAfCShxAAAKJXJqCwBwHwoocQAACiVydgsAcB8LKHEA
AAolcooLAHAfDChxAAAK/hOADAAABP4TfgwAAAT+DBAB/g0RAShyAAAKOSkDAAD+DBEBRQ0AAAAF
AAAAPwAAAHkAAACzAAAA7QAAACcBAABhAQAAmwEAANUBAAAPAgAASQIAAIACAAC3AgAAOOcCAAAR
P28ZAAAGb04AAAYRQG8mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZvUAAABjitAgAA
ET9vGQAABm9OAAAGEUJvJgAABhaMJwAAAW9RAAAGEUVvJQAABhaMJwAAAW9ZAAAGb1AAAAY4cwIA
ABE/bxkAAAZvTgAABhFDbyYAAAYWjCcAAAFvUQAABhFFbyUAAAYWjCcAAAFvWQAABm9QAAAGODkC
AAARP28ZAAAGb04AAAYRRG8mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZvUAAABjj/
AQAAET9vGQAABm9OAAAGEUVvJgAABhaMJwAAAW9RAAAGEUVvJQAABhaMJwAAAW9ZAAAGb1AAAAY4
xQEAABE/bxkAAAZvTgAABhFFbyYAAAYWjCcAAAFvUQAABhFFbyUAAAYWjCcAAAFvWQAABm9QAAAG
OIsBAAARP28ZAAAGb04AAAYRSG8mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZvUAAA
BjhRAQAAET9vGQAABm9OAAAGEUlvJgAABhaMJwAAAW9RAAAGEUVvJQAABhaMJwAAAW9ZAAAGb1AA
AAY4FwEAABE/bxkAAAZvTgAABhFHbyYAAAYWjCcAAAFvUQAABhFFbyUAAAYWjCcAAAFvWQAABm9Q
AAAGON0AAAARP28ZAAAGb04AAAYRS28mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZv
UAAABjijAAAAET9vGQAABm9OAAAGEUxvJgAABhaMJwAAAW9RAAAGEUVvJQAABhaMJwAAAW9ZAAAG
b1AAAAYrbBE/bxkAAAZvTgAABhFNbyYAAAYWjCcAAAFvUQAABhFFbyUAAAYWjCcAAAFvWQAABm9Q
AAAGKzURP28ZAAAGb04AAAYRT28mAAAGFownAAABb1EAAAYRRW8lAAAGFownAAABb1kAAAZvUAAA
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
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lz
dGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAEJT
SkIBAAEAAAAAAAwAAAB2NC4wLjMwMzE5AAAAAAUAbAAAAFgkAAAjfgAAxCQAACweAAAjU3RyaW5n
cwAAAADwQgAAYBgAACNVUwBQWwAAEAAAACNHVUlEAAAAYFsAAEgQAAAjQmxvYgAAAAAAAAACAAAB
Vz+iCQkLAAAA+iUzABYAAAEAAAB0AAAAKQAAAFkAAACYAAAAegAAABkAAADIAAAAQQAAAOcAAABU
AAAAAgAAABUAAAA4AAAAUgAAAAMAAAABAAAABwAAAAEAAAACAAAAAQAAAAAACgABAAAAAAAGANYA
zwAKAPIA3QAOAFIBKQEGAG4BzwAGAIQBcwEGALUBoAEGAGwCUgIGAJcChQIGAK4ChQIGAMsChQIG
AOoChQIGAAMDhQIGABwDhQIGADcDhQIGAFIDhQIGAGsDhQIGAKQDhAMGAMQDhAMGACAEDQQGAD0E
zwAGAEIEzwAGAGYEhQIKAJIEfAQKAKsEfAQGAMAEhAMOAOIEKQEEABcFMQUGAH4FzwAGAIUFzwAS
ANwFvAUSAOQFvAUSAAAGvAUSAA8GvAUSABgGvAUSAG8GvAUOAHsGKQESAJUGvAUSAK0GvAUGAN8G
zwASAOwGvAUSAAgHvAUSADYHvAUSAD8HvAUSAFwHvAUSAHEHvAUWAKgHkgcWALMHkgcWANQHwQcW
APAHwQcWAPoHhgcWACYIkgcWADMIwQcWAD8IhgcWAGAIhgcWAHIIkgcWAJgIkgcWAKcIhgcWAK8I
hgcWAOAIkgcWAPwIwQcGAD8JzwAaAKMJdgkaALIJdgkaAN4JdgkGAPMJzwAaACMKdgkSAI0KvAUS
AL0KvAUEANIKMQUEANsKMQUEAOsKMQUEAC4LMQUEAGALMQUEAIULMQUEALsLMQUEAAgMMQUSACEM
vAUeAHcMTwwEAHcMTwwEANoMMQUGAKANhQ0EAOENMQUEAAoOMQUEABYOMQUEAEMOMQUEAFEOMQUE
AHwOMQUEAK0OMQUEANEOMQUEABYPMQUGAGIPTw8EAJYPMQUEAKkPMQUEAMMPMQUGAP4PzwAEABIQ
MQUGAJEQhQ0GAKAQzwAGAKwQzwAEAMUQMQUEAPwQMQUEAEMRMQUEAHQRMQUEALsRTwwGAJkTzwAE
AKkTMQUGAP8TzwAEAAkUMQUGAEIUIxQGAK8UIxQGAL0UIxQGANUUIxQEAOgUMQUGAPsUIxQGAEMV
Tw8GAGYVhQIAAAAAAQAAAAAAAQABAAAAEAA5AEMABQABAAEAAAEQAHkAQwAJAAMABQABABAAggCN
AA0ABAAIAAMBAAC4AAAAEQAEAAoAAwEQAAQFAAAFAAcACgChEAAAFwUxBQAACAAMAKEQAADSCjEF
AAAIABcAoRAAANsKMQUAAAgAFwChEAAA6woxBQAACAAaAKEQAAAuCzEFAAAIAB0AoRAAAGALMQUA
AAgALgChEAAAhQsxBQAACAAuAKEQAAC7CzEFAAAIAD8AoRAAAAgMMQUAAAgAQgChEAAAdwxPDAAA
CABHAKEQAADaDDEFAAAIAEcAAAAAAEANAAAFAAgATQChEAAA4Q0xBQAAFwBNAKEQAAAKDjEFAAAX
AE8AoRAAABYOMQUAABcAUQChEAAAQw4xBQAAFwBSAKEQAABRDjEFAAAXAFkAoRAAAHwOMQUAABcA
WgChEAAArQ4xBQAAFwBkAKEQAADRDjEFAAAXAGcAoRAAABYPMQUAABcAaQChEAAAlg8xBQAAFwBt
AAEBAACpDzEFEQAXAHUAAQEAAMMPMQURABsAdQChEAAAEhAxBQAAHgB1AKEQAADFEDEFAAAeAHkA
oRAAAPwQMQUAAB4AfQChEAAAQxExBQAAHgCBAAEBAAB0ETEFEQAeAJcAAQEAALsRTwwRACMAlwCh
EAAAqRMxBQAAWgCXAKEQAAAJFDEFAABaAJkAoRAAAOgUMQUAAFoAmQChEAAAvR1PDAAAWgCZAKEQ
AADPHU8MAABaAJkAEQCUARMAEQDBARcAEQALAjkABgY0AkcAVoA8AkoAVoBEAkoABgBaBY0AEwCt
DekBEwDNDekBEwB9EOkBEwDtEekBEwABEukBEwAdEukBEwBrEukBEwCuEukBEwDCEukBEwDWEukB
EwAME+kBEwAhE+kBEwBGE+kBEwBvE+kBEwCEE+kBBgY0AkcAVoA/GRsLVoBLGRsLVoBYGRsLBgY0
AkcAVoBjGYoLVoBtGYoLBgY0AkcAVoAOG8cMVoAZG8cMVoAqG8cMVoA5G8cMBgY0AkcAVoBKGzYN
VoBTGzYNVoBbGzYNVoBhGzYNVoBnGzYNVoBtGzYNVoBzGzYNVoB5GzYNVoCBGzYNVoCJGzYNVoCU
GzYNVoCaGzYNVoChGzYNVoCoGzYNVoCvGzYNVoC1GzYNVoC8GzYNVoDIGzYNVoDQGzYNVoDZGzYN
VoDgGzYNVoDoGzYNVoDzGzYNVoD9GzYNVoAHHDYNVoAWHDYNVoAhHDYNVoA2HDYNVoA/HDYNVoBH
HDYNVoBQHDYNVoBgHDYNVoBsHDYNVoB4HDYNVoCEHDYNVoCQHDYNVoCcHDYNVoCqHDYNVoC4HDYN
VoDJHDYNVoDVHDYNVoDiHDYNVoDvHDYNVoD8HDYNVoAIHTYNVoAVHTYNVoAnHTYNVoA1HTYNVoBG
HTYNVoBWHTYNVoBmHTYNVoB7HTYNVoCMHTYNVoCnHTYNUCAAAAAAgxjRARsAAQBYIAAAAACTCNcB
HwABAJEgAAAAAJMI6wEkAAEAmCAAAAAAkwj3ASkAAQCgIAAAAACWCBsCPQACALMgAAAAAIYY0QEb
AAIApyAAAAAAkRjbBIkAAgDYIAAAAACGAC8CGwACAFyaAAAAAIYY0QEbAAIAuyAAAAAAhhjRARsA
AgDDIAAAAACGAGIFkQACAAAAAAAAAAYYFxQbAAMAAAAAAAAAxg11BZYAAwAAAAAAAADGDVYGWAAE
AAAAAAAAAAYYXBQbAAUAAAAAAAAAxg1GEuwCBQAAAAAAAADGDVMSyQEFAAAAAAAAAAYYaBQbAAUA
AAAAAAAAxg2ID8kBBQAAAAAAAAAGGHQUGwAFAAAAAAAAAMYNXhLJAQUAAAAAAAAAxg1bE8kBBQAA
AAAAAAAGGAwVGwAFAAAAAAAAAMYNDgu1AQUAAAAAAAAAxg33DRECBgAAAAAAAADGDbYGAgMHAAAA
AAAAAAYYVRUbAAkAAAAAAAAAxgVHC7oBCQAAAAAAAAAGGFUVGwAKAAAAAAAAAMYNfRWWAAoAAAAA
AAAAxg1fBlgACwAAAAAAAADGDXUFlgAMAAAAAAAAAMYNVgZYAA0AAAAAAAAABhhcFBsADgAAAAAA
AADGDZ4VlgAOAAAAAAAAAMYNSwtYAA8AAAAAAAAAxg1oDiYCEAAAAAAAAADGDS4OGwIRAAAAAAAA
AMYFeQu/ARIAAAAAAAAAxg0cEbkCEwAAAAAAAAAGGMgVGwAUAAAAAAAAAMYN3gvEARQAAAAAAAAA
BhjUFRsAFQAAAAAAAADGDeEVlgAVAAAAAAAAAMYNNhNYABYAAAAAAAAAxgWgCxsAFwAAAAAAAADG
BRgNGwAXAAAAAAAAAMYFMRLiAhcAAAAAAAAABhhVFRsAHAAAAAAAAADGBbYPVAIcAAAAAAAAAMYF
8AziASEAAAAAAAAABhgCFxsAJAAAAAAAAADGBeMPZwIkAAAAAAAAAMYFfxLyAigAAAAAAAAAxgWW
EvICLQAAAAAAAAAGGMgVGwAyAAAAAAAAAMYF1g9fAjIAAAAAAAAABhg+FxsANQAAAAAAAADGBQUN
ngE1AAAAAAAAAMYFLQ0bADYAAAAAAAAABhhXFxsANgAAAAAAAADGBeETIQM2AAAAAAAAAMYNtgbN
AToAAAAAAAAABhgMFRsAPAAAAAAAAADGDf4LyQE8AAAAAAAAAAYYgxcbADwAAAAAAAAAxg2PF5YA
PAAAAAAAAADGDcIMWAA9AAAAAAAAAMYNwBffBz4AAAAAAAAAxg2lDNwBPwAAAAAAAAAGGBcUGwBA
AAAAAAAAAMYNdQWWAEAAAAAAAAAAxg1WBlgAQQAAAAAAAAAGGFwUGwBCAAAAAAAAAMYNvwbFAEIA
AAAAAAAAxg05EZ4BQwAAAAAAAAAGGBAYGwBEAAAAAAAAAMYFRwsWAkQAAAAAAAAABhgcGBsARQAA
AAAAAADGBYkOMQJFAAAAAAAAAMYNtgYgAkcAAAAAAAAAxg27DMkBSQAAAAAAAADGDUAYXQBJAAAA
AAAAAAYYSxgbAEoAAAAAAAAAxg00D0MCSgAAAAAAAAAGGFgYGwBLAAAAAAAAAMYNZBhgAUsAAAAA
AAAAxg3rEq0ASwAAAAAAAADGDbYGKwJMAAAAAAAAAMYNuwzJAU4AAAAAAAAAxg1AGF0ATgAAAAAA
AAAGGJ8YGwBPAAAAAAAAAMYNqxhgAU8AAAAAAAAAxg1qEK0ATwAAAAAAAAAGGFwUGwBQAAAAAAAA
AMYFwQ45AlAAAAAAAAAAxg3iEK0CUQAAAAAAAAAGGM8YGwBSAAAAAAAAAMYNOhBvAlIAAAAAAAAA
BhiDFxsAUwAAAAAAAADGDfUOPgJTAAAAAAAAAMYFtg8UA1QAAAAAAAAAxg22Bk4CVgAAAAAAAADG
BW4PSAJYAAAAAAAAAMYNtgb7AlkAAAAAAAAAxgVuD0gCWwAAAAAAAADGDf4LyQFcAAAAAAAAAMYF
RwvFAlwAAAAAAAAAxg27DMkBXQAAAAAAAADGDUAYXQBdAAAAAAAAAMYNfRWWAF4AAAAAAAAAxg1f
BlgAXwAAAAAAAADGDXUFlgBgAAAAAAAAAMYNVgZYAGEAAAAAAAAABhiDFxsAYgAAAAAAAADGDRwR
uQJiAAAAAAAAAMYNtgYNA2MAAAAAAAAABhgcGBsAZQAAAAAAAADGDXYZYAFlAAAAAAAAAMYNXxCt
AGUAAAAAAAAABhgMFRsAZgAAAAAAAADGBW4PSAJmAAAAAAAAAAYYkRkbAGcAAAAAAAAAxgXHExsD
ZwAAAAAAAADGDbYGvwJpAAAAAAAAAAYYDBUbAGsAAAAAAAAAxg3+C8kBawAAAAAAAADGBUcL0gJr
AAAAAAAAAMYNuwzJAWwAAAAAAAAAxg1AGF0AbAAAAAAAAAAGGFUVGwBtAAAAAAAAAMYNdQWWAG0A
AAAAAAAAxg1WBlgAbgAAAAAAAAAGGJ4ZGwBvAAAAAAAAAMYNHBG5Am8AAAAAAAAABhiqGRsAcAAA
AAAAAADGDbYZyQFwAAAAAAAAAMYN2hFdAHAAAAAAAAAABhjaGRsAcQAAAAAAAADGDVsTyQFxAAAA
AAAAAMYN+BJdAHEAAAAAAAAABhj4GRsAcgAAAAAAAADGBcQR1wJyAAAAAAAAAMYNMhqIDHcAAAAA
AAAAxg2GEcsCdwAAAAAAAADGDVgaiAx4AAAAAAAAAMYNnhHLAngAAAAAAAAABhh1GhsAeQAAAAAA
AADGDYEayQF5AAAAAAAAAMYNVxFdAHkAAAAAAAAAxg27DMkBegAAAAAAAADGDUAYXQB6AAAAAQBM
AgAAAQBtBQAgAAAAAAEgAQBSFAAgAAAAAAAgAAAAAAAgAAAAAAEgAQBPFQAgAAAAAAAgAAAAAAEg
AQCNFQAgAAAAAAEgAQBSFAAgAAAAAAEgAQCzFQAgAAAAAAAgAAAAAAAgAAAAAAAgAAAAAAAgAAAA
AAAgAAAAAAEgAQDxFQAgAAAAAAEAAQCBFgEAAgCLFgEgAwCeFgEgBACnFgAgAAAAAAEAAQC3FgEg
AgDAFgEAAwDYFgEABADjFgAgAAAAAAEgAQDuFgEgAgD7FgAgAAAAAAEAAQCBFgEgAgDuFgEgAwD7
FgAgAAAAAAEAAQC3FgEAAgAOFwEgAwDuFgEgBAD7FgAgAAAAAAEAAQCBFgEAAgAdFwEgAwDuFgEg
BAD7FgAgAAAAAAEAAQAtFwEAAgCBFgEgAQBKFwAgAAAAAAEAAQC3FgEAAgAOFwEAAwBjFwAgAAAA
AAEgAQBPFQAgAAAAAAEgAQCnFwAgAAAAAAEgAQDWFwAgAAAAAAEgAQBSFAAgAAAAAAEgAQACGAAg
AAAAAAEgAQApGAEgAgA1GAAgAAAAAAEgAQBPFQEAAQBHGAAgAAAAAAEAAQBxGAAgAAAAAAEgAQBP
FQEAAQBHGAEAAQC+GAAgAAAAAAAgAAAAAAAgAAAAAAAgAAAAAAEAAQDYFgEAAgDjFgAgAAAAAAEg
AQBPFQAgAAAAAAAgAAAAAAEgAQBPFQAgAAAAAAAgAAAAAAEAAQBHGAAgAAAAAAEgAQCNFQAgAAAA
AAEgAQBSFAAgAAAAAAAgAAAAAAEgAQBPFQEAAQCBGQAgAAAAAAAgAAAAAAEAAQDYFgAgAAAAAAEg
AQBPFQAgAAAAAAEAAQBHGAAgAAAAAAEgAQBSFAAgAAAAAAEAAQDJGQAAAQDmGQEAAQAEGgEAAgAO
GgEAAwAWGgEABAAhGgEABQAoGgEAAQBKGgEAAQBKGgEAAQCeGgEAAQBHGAcAmAAIACQACACcAAkA
nAAKAM0BCwCYAAwANAAOAM0BDwCYABEAmAATAM0BFACYABUAzQEWAJgAFwDNARgAmAAZAJgAGgDN
ARsAzQEcAJgAHwDNASAAzQEhAM0BIgCYACUAmAA5ANEBWABBANEBWABJANEBWABRANEBWABZANEB
WABhANEBWABpANEBWABxANEBWAB5ANEBWACBANEBWACJANEBXQCRANEBGwCZANEBGwAJANEBGwCh
AFQEYgChAG8EaQApANEBbgC5ANEBegDJANEBGwARANEBGwDRANEBGwBrAHUFlgDhAJYFmgDxANEB
GwDxAPAFoQD5AAsGpgARASUGrQARAT4GrQARAVYGWAARAV8GWAAZAdEBGwAZAI0GsgAhAZ8GuAAp
AbYGvgAxAb8GxQAJAMkGlgDhANIGlgDhANcGyQDhAJYFkQA5AZYFzgDhAOUG0wDxAPgG2QBBAQsG
3wBJAVYGWADhABoH5gBJASEHWAAJAfAFoQBRAU0H7QBZAbYG8wBhAWgH+gDhAOUGAAEZAXwHBwFx
AdEBGwB5AdEBGwCBASEHWABxAeEHEQGJAQYIGAGJARYIWACZAdEBHwGhAVIIJQGhAWcILAFxAYkI
MwG5AQsGOQHBAdEBGwDJAdEBGwCBAb8IQgGBAckIGwDBAc4ISAFxAe4ITwHhAbYGVQHhAAkJWgHh
ABEJlgDhABkJkQDhASIJYAGBAScJGwDhAC0JZAHhADMJZwERAZ8GuAApAQsGbQHhAEQJdwFRAUoJ
xQDxAcgJfgH5AQsGhAEJAvwJigH5AQQKkAEBAg8KWAABAjcKlwEBAk4KXQABAlsKngEBAm0KXQDh
AH8KZwEJAaMKowEZAgsGqQHDAA4LtQHjAEcLugEjAUsLWAA7AXkLvwFzAaALGwALAVYGWAD7AF8G
WABTAd4LxAELAv4LyQH7AbYGzQFpApAM0wEzAqUM3AFJAbsMlgAjAsIMWACbAfAM4gHbAQUNngF7
ARgNGwDjAS0NGwAMANEBXQAMAAsG+gEMAMENAgLhAOUGCwLLAPcNEQJzAkcLFgIzAS4OGwKLArYG
IAIrAWgOJgLLArYGKwKDAokOMQIDA8EOOQIrA/UOPgKrAjQPQwJDA24PSALZAnwPxQA7A7YGTgKb
AIgPyQHTArsMyQGTAbYPVAKTArsMyQHLAdYPXwKrAeMPZwLZAvUPYAH5AgoQGwAbAzoQbwLDA18Q
rQDzAmoQrQAUANEBGwAUAAsGewIUAJgQgQIcANEBjgIZA7IQlALhALcQqAILA+IQrQLTA24PSAKL
A3UFlgDhABoHswKDA18GWACjAxwRuQLrA7YGvwJLAlYGWABjAjkRngFjA0cLxQIrBFYGWACzBFcR
XQCLBIYRywKbBJ4RywI7BBwRuQIDBEcL0gJ7BMQR1wJTBNoRXQDhABUSlgCDATES4gKDAEYS7AKL
AFMSyQGrAF4SyQFDAnUFlgD7A/4LyQFrA7sMyQGzAX8S8gILBLsMyQG7AZYS8gLDAusSrQBLA7YG
+wJrBPgSXQDTALYGAgNrATYTWACzAFsTyQFDARwRuQJbA/4LyQEjBHUFlgBJA6ETCANTA24PSAKr
A7YGDQMzA7YPFAPjA8cTGwO7BLsMyQHzAeETIQMhAfATXQDhAOUGKgMZANEBGwBpA9EBXQBxA9EB
WAB5A9EBGwCBA9EBGwCRA9EB9AWhA9EBWAB5A9EBJAsIABQATgAIABgAUwAIAGAATgAIAGQAUwAI
AGgAHwsIAHAATgAIAHQAUwAIAHwATgAIAIAAUwAIAIQAHwsIAIgAzAwIAJAATgAIAJQAUwAIAJgA
HwsIAJwAOw0IAKAAzAwIAKQAQA0IAKgARQ0IAKwASg0IALAATw0IALQAVA0IALgAWQ0IALwAXg0I
AMAAYw0IAMQAaA0IAMgAbQ0IAMwAcg0IANAAdw0IANQAfA0IANgAgQ0IANwAhg0IAOAAiw0IAOQA
kA0IAOgAlQ0IAOwAmg0IAPAAnw0IAPQApA0IAPgAqQ0IAPwArg0IAAABsw0IAAQBuA0IAAgBvQ0I
AAwBwg0IABABxw0IABQBzA0IABgB0Q0IABwB1g0IACAB2w0IACQB4A0IACgB5Q0IACwB6g0IADAB
7w0IADQB9A0IADgB+Q0IADwB/g0IAEABAw4IAEQBCA4IAEgBDQ4IAEwBEg4IAFABFw4IAFQBHA4I
AFgBIQ4IAFwBJg4IAGABKw4IAGQBMA4pAJMAgAAuADsA/w8uAFsAHhAuADMAuw8uAEMA6w8uAGMA
JxAuABMAuw8uAAsAcw8uABsA6w8uACMA6w8uACsA8Q9DAGsAUwBJAJMAgABhAJsAUwCDAKsAUwDD
AJsAUwDjAJsAUwDjACMGUwDjABsGoAUDATMG+gUDAZsAUwADASMGUwADARsGygUjAZsAUwAjASMG
UwAjARsGygVDAZsAUwBDASMGUwBDARsGiQZDATsGswZjARsG/wZjASMGUwBjAZsAUwCDASMGUwCD
ATMG+gWDARsGKQeDAZsAUwCgARMGWgWjASMGUwCjARsGKQejAZsAUwDAARMGWgXDATsGswbDASMG
UwDDARsGtQfDAZsAUwDjASMGUwDjAZsAUwDjARsG6QcAAhMGZQUDApsAUwADAhsGEwgDAiMGUwAg
AhMGbgUjAiMGUwAjAhsGQQgjApsAUwBDApsAUwBgAhMGdwVjApsAUwBjAjsGswZjAiMGUwBjAhsG
awiDApsAUwCDAiMGUwCDAhsGlQigAhMGgAWjAiMGUwCjApsAUwCjAhsGxQijAjsGswbAAhMGiQXD
AiMGUwDDAhsGCgnDApsAUwDjAjsGswbjApsAUwDjAiMGUwDjAhsGOgkAAxMGWgYDAyMGUwADAxsG
eAkDA5sAUwAgAxMGWgUjA5sAUwAjAyMGUwAjAxsGpwlAAxMGbwZDAxsGjQpDAzsGswZDAyMGUwBD
A5sAUwBjAyMGUwBjAzsGswZjAxsGvgpjA5sAUwCAAxMGegaDAxsG8QqDA5sAUwCDAyMGUwCjA0MG
KgujA5sAUwDAAxMGWgbDA5sAUwDDA0MGjgvgAxMGWgbjA5sAUwDjAzsGswbjAyMGUwDjAxsG+wsA
BBMGWgUDBCMGUwADBJsAUwADBDsGswYDBBsGJQwgBBMGWgUjBDsGswYjBCMGUwAjBBsGVQwjBJsA
UwBDBBsGnQxDBCMGUwBDBJsAUwBgBBMGZQVjBJsAUwBjBEMG0QyABBMGZQWDBJsAUwCDBEMGNQ6g
BBMGbgWjBJsAUwCjBCMGUwCjBBsGkA7ABBMGvQbDBBsGug7DBJsAUwDDBCMGUwDgBBMGxgbjBBsG
5A7jBJsAUwDjBCMGUwAABRMGzwYDBSMGUwADBZsAUwADBRsGDg8jBZsAUwAjBTsGYg8jBSMGUwAj
BRsGOA9ABRMG2AaABRMG4QagBRMG4QbABRMGUwfgBRMGWgYABhMGWgVABhMGXAdgBhMGZQegBhMG
bgfABhMGdwfgBhMGgAcgBxMGiQdgBxMGkgeABxMGnQfABxMGpgfgBxMGbwYgCBMGWgVgCBMGZQWA
CBMGZQWgCBMGbgXACBMGbgUACRMGWgUgCRMGWgVgCRMGZQWACRMGZQXACRMGegYAChMGxgYgChMG
bwZAChMGUwdgChMGUwegChMG7wjgChMG+AgACxMG+AggCxMGbwZACxMGUwdgCxMGUwegCxMGZQXA
CxMGZQUADBMGzwYgDBMG7whgDBMGZAmgDBMGZQXADBMGxgbgDBMGbwYADRMG0QkgDRMGbwZADRMG
0QlgDRMGWgWADRMGegagDRMGUwfADRMGUwfgDRMGWgYADhMGWgYgDhMGWgVADhMGWgWADhMG6Aqg
DhMGbwbgDhMGZQUADxMGZQVADxMG0QmADxMGZQWgDxMGbwbgDxMGWgUAEBMGegYgEBMGUwdAEBMG
UweAEBMGWgWgEBMGWgXgEBMG7wggERMGdwVAERMGdwWAERMGfwygERMGfwzgERMG2AYAEhMGgAUg
EhMGgAVAEhMGZAlgEhMGZAmgEhMGjgzAEhMGjgzgEhMGUwcAExMGUwcHAGMFCQBjBQsAYwYNAGMG
DwBjBhEAeAYTAGMGFQBjBRcAYwUZAGMFGwBjBR0AYwUfAGMFIQBjBiMAYwYlAGMGJwBjBikAYwYr
AGMFLQBjBS8AYwY1AGMFNwBjBTkAYwY9AGMGQwBjBkUAYwVHAHgGSQBjBk0AYwVPAHgGUQBjBlcA
YwVZAHgGWwBjBmEAYwVjAHgGZQBjBmsAmwdtAGMGdQBjBncAeAZ5AGMFewBjBX0AYwZ/AGMGgQBj
BYMAYwWFAHgGhwB4BokAYwaLAGMGjQBjBo8AYwaRAHgGlQBjBpkAYwabAHgGoQBjBqMAYwalAGMG
pwBjBq0AYwavAHgGsQDaCbMAYwa1AHgGtwDaCbkAYwa9AGMFvwBjBcEAYwXDAGMFxQBjBscAYwbJ
AHgGzQDaCc8AYwbTAGMG1QB4BtcAYwbbAGMF3QBjBd8AYwZ1ADADAgABAAMAAwAHAAQACQAKAAoA
DAALAA0ADgAVAA8AFwARABkAFQAbABYAHAAXAB8AGAAgABkAJAAaACUAGwAmABwAKAAfACwAIQAu
ACIAMAAlADgAAACEAS8AAAADAjQAAAAnAkIAAACAFJIFAAC7EZYFAACFFJwFAACMFJwFAACWFJwF
AACfFJwFAAAYFWUGAAA0FWoGAABhFYMGAAACFpIFAACAFJIFAAAOFpIFAAAfFuoGAAAvFu8GAABA
FvQGAABZFvoGAAB1FpIFAABhFa8HAAB9F5wFAADuF5IFAAAIB+QHAACAFJIFAAAKGD0IAABhFb8I
AAB8GJwFAAB/GAEJAACWGAYJAABhFTQJAAB8GJwFAADcGAYJAADrGG0JAAABGXMJAAAiGaIJAABh
FYcKAABhFbcKAAB9F5wFAAB8GJwFAAACFpIFAACAFJIFAABAFvQGAABhFfQLAACKGQYJAABhFU8M
AAB9F5wFAAB8GJwFAACAFJIFAABAFvQGAAC5GpwFAACfFJwFAADIGpcMAADcGpcMAAD1GpwFAAB8
GJwFAgACAAMAAgADAAUAAQAEAAUAAgAFAAcAAgANAAkAAQAOAAkAAgAQAAsAAgARAA0AAgATAA8A
AgAVABEAAgAWABMAAgAYABUAAgAZABcAAgAaABkAAgAeABsAAQAfABsAAgAgAB0AAQAhAB0AAQAk
AB8AAgAjAB8AAgAlACEAAgAmACMAAgAoACUAAgAqACcAAgAsACkAAQAtACkAAgA/ACsAAgBBAC0A
AQBEAC8AAgBDAC8AAQBGADEAAgBFADEAAgBIADMAAQBJADMAAgBLADUAAQBMADUAAgBRADcAAgBS
ADkAAQBTADkAAgBVADsAAgBXAD0AAQBYAD0AAgBZAD8AAgBaAEEAAQBbAEEAAgBdAEMAAQBeAEMA
AgBhAEUAAgBjAEcAAgBlAEkAAgBnAEsAAgBpAE0AAgBrAE8AAgBtAFEAAQBuAFEAAgBvAFMAAQBw
AFMAAQByAFUAAgBxAFUAAgB0AFcAAgB1AFkAAgB3AFsAAQB4AFsAAgB9AF0AAgB/AF8AAgCBAGEA
AQCCAGEAAgCEAGMAAQCFAGMAAgCHAGUAAQCKAGcAAgCJAGcAAQCNAGkAAgCMAGkAAgCQAGsAAQCR
AGsAAgCSAG0AAQCTAG0AAQCWAG8AAgCVAG8AAgCXAHEAAQCYAHEA8gF0AocCBIAAAAEAAACYFwlk
AAAAAAAA4gMAAAQAAAAAAAAAAAAAAAEAxgAAAAAABAAAAAAAAAAAAAAAAQDPAAAAAAALAAAAAAAA
AAAAAAAKAAoBAAAAAAsAAAAAAAAAAAAAAAoAnQUAAAAABAAAAAAAAAAAAAAAAQCGBwAAAAALAAAA
AAAAAAAAAAAKAFoJAAAAAAsAAAAAAAAAAAAAAAoALAwAAAAAAAAAAAEAAADhHQAABQAEAAYABAAh
AaQCAAAAPE1vZHVsZT4AU1RfMGNlZjI5YTkzOTNmNGU0YzhkZGEwMjNkOTEwNTI2ZTUuY3Nwcm9q
LmRsbABSZXNvdXJjZXMAU1RfMGNlZjI5YTkzOTNmNGU0YzhkZGEwMjNkOTEwNTI2ZTUuY3Nwcm9q
LlByb3BlcnRpZXMAU2V0dGluZ3MAU2NyaXB0TWFpbgBTVF9lOWM5Y2IzYTVhYzQ0OWQyOTNkZGVi
NTI0MmFkZWM3OC5jc3Byb2oAU2NyaXB0UmVzdWx0cwBtc2NvcmxpYgBTeXN0ZW0AT2JqZWN0AFN5
c3RlbS5Db25maWd1cmF0aW9uAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNr
AFZTVEFSVFNjcmlwdE9iamVjdE1vZGVsQmFzZQBFbnVtAFN5c3RlbS5SZXNvdXJjZXMAUmVzb3Vy
Y2VNYW5hZ2VyAHJlc291cmNlTWFuAFN5c3RlbS5HbG9iYWxpemF0aW9uAEN1bHR1cmVJbmZvAHJl
c291cmNlQ3VsdHVyZQAuY3RvcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAGdldF9DdWx0dXJlAHNldF9D
dWx0dXJlAEN1bHR1cmUAZGVmYXVsdEluc3RhbmNlAGdldF9EZWZhdWx0AERlZmF1bHQATWFpbgB2
YWx1ZV9fAFN1Y2Nlc3MARmFpbHVyZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRh
cmdldEZyYW1ld29ya0F0dHJpYnV0ZQBTeXN0ZW0uUmVmbGVjdGlvbgBBc3NlbWJseVRpdGxlQXR0
cmlidXRlAEFzc2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9u
QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1
dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUA
QXNzZW1ibHlDdWx0dXJlQXR0cmlidXRlAEFzc2VtYmx5VmVyc2lvbkF0dHJpYnV0ZQBTeXN0ZW0u
UnVudGltZS5Db21waWxlclNlcnZpY2VzAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUA
UnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAU1RfMGNlZjI5YTkzOTNmNGU0YzhkZGEwMjNk
OTEwNTI2ZTUuY3Nwcm9qAFN5c3RlbS5EaWFnbm9zdGljcwBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0
cmlidXRlAFR5cGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZyb21IYW5kbGUAQXNzZW1ibHkA
Z2V0X0Fzc2VtYmx5AFN5c3RlbS5Db21wb25lbnRNb2RlbABFZGl0b3JCcm93c2FibGVBdHRyaWJ1
dGUARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUALmNjdG9y
AFNTSVNTY3JpcHRUYXNrRW50cnlQb2ludEF0dHJpYnV0ZQA8PmNfX0Rpc3BsYXlDbGFzczIASURU
U1ZpcnR1YWxJbnB1dENvbHVtbjEwMABNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5QaXBlbGluZS5X
cmFwcGVyAHZDb2x1bW4APE1haW4+Yl9fMABlbGVtZW50AGdldF9OYW1lAFN0cmluZwBTdHJpbmdD
b21wYXJpc29uAEVxdWFscwBNaWNyb3NvZnQuU3FsU2VydmVyLk1hbmFnZWREVFMATWljcm9zb2Z0
LlNxbFNlcnZlci5EdHMuUnVudGltZQBQYWNrYWdlAEV4ZWN1dGFibGVzAGdldF9FeGVjdXRhYmxl
cwBFeGVjdXRhYmxlAEFkZABTZXF1ZW5jZQBEdHNDb250YWluZXIAc2V0X0ZhaWxQYWNrYWdlT25G
YWlsdXJlAHNldF9GYWlsUGFyZW50T25GYWlsdXJlAHNldF9OYW1lAHNldF9EZXNjcmlwdGlvbgBB
cHBsaWNhdGlvbgBTY3JpcHRPYmplY3RNb2RlbABnZXRfRHRzAFZhcmlhYmxlcwBnZXRfVmFyaWFi
bGVzAFZhcmlhYmxlAGdldF9JdGVtAGdldF9WYWx1ZQBUb1N0cmluZwBUcmltAEluZGV4T2YASW50
MzIAQ29uY2F0AENvbm5lY3Rpb25zAGdldF9Db25uZWN0aW9ucwBDb25uZWN0aW9uTWFuYWdlcgBG
b3JtYXQAc2V0X0Nvbm5lY3Rpb25TdHJpbmcAVGFza0hvc3QARHRzUHJvcGVydGllcwBnZXRfUHJv
cGVydGllcwBEdHNQcm9wZXJ0eQBTZXRWYWx1ZQBJRFRTRXZlbnRzAFNhdmVUb1htbABTeXN0ZW0u
RGF0YQBTeXN0ZW0uRGF0YS5TcWxDbGllbnQAU3FsQ29tbWFuZABTcWxDb25uZWN0aW9uAFN5c3Rl
bS5EYXRhLkNvbW1vbgBEYkNvbm5lY3Rpb24Ac2V0X0Nvbm5lY3Rpb24ARGJDb21tYW5kAENvbW1h
bmRUeXBlAHNldF9Db21tYW5kVHlwZQBzZXRfQ29tbWFuZFRleHQAU3FsUGFyYW1ldGVyAERiUGFy
YW1ldGVyAFBhcmFtZXRlckRpcmVjdGlvbgBzZXRfRGlyZWN0aW9uAERiVHlwZQBzZXRfRGJUeXBl
AFNxbFBhcmFtZXRlckNvbGxlY3Rpb24AZ2V0X1BhcmFtZXRlcnMAU3FsRGF0YUFkYXB0ZXIARGF0
YVNldABDb25uZWN0aW9uU3RhdGUAZ2V0X1N0YXRlAE9wZW4Ac2V0X1NlbGVjdENvbW1hbmQAU3Fs
RGF0YVJlYWRlcgBFeGVjdXRlUmVhZGVyAERiRGF0YVJlYWRlcgBSZXBsYWNlAFRvVXBwZXIAQ29u
dGFpbnMAUmVhZABDbG9zZQBFbXB0eQBvcF9FcXVhbGl0eQBDaGFyAFNwbGl0AGdldF9Jbm5lck9i
amVjdABNaWNyb3NvZnQuU3FsU2VydmVyLlNRTFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMu
VGFza3MuRXhlY3V0ZVNRTFRhc2sARXhlY3V0ZVNRTFRhc2sASURUU1BhcmFtZXRlckJpbmRpbmdz
AGdldF9QYXJhbWV0ZXJCaW5kaW5ncwBJRFRTUGFyYW1ldGVyQmluZGluZwBEYXRlVGltZQBnZXRf
Tm93AEdldEJpbmRpbmcAc2V0X0R0c1ZhcmlhYmxlTmFtZQBQYXJhbWV0ZXJEaXJlY3Rpb25zAHNl
dF9QYXJhbWV0ZXJEaXJlY3Rpb24Ac2V0X0RhdGFUeXBlAHNldF9QYXJhbWV0ZXJOYW1lAHNldF9Q
YXJhbWV0ZXJTaXplAG9wX0luZXF1YWxpdHkAUHJlY2VkZW5jZUNvbnN0cmFpbnRzAGdldF9QcmVj
ZWRlbmNlQ29uc3RyYWludHMAUHJlY2VkZW5jZUNvbnN0cmFpbnQATWFpblBpcGUASURUU1BpcGVs
aW5lMTAwAElEVFNDb21wb25lbnRNZXRhRGF0YUNvbGxlY3Rpb24xMDAAZ2V0X0NvbXBvbmVudE1l
dGFEYXRhQ29sbGVjdGlvbgBJRFRTQ29tcG9uZW50TWV0YURhdGExMDAATmV3AHNldF9Db21wb25l
bnRDbGFzc0lEAENNYW5hZ2VkQ29tcG9uZW50V3JhcHBlcgBJbnN0YW50aWF0ZQBJRFRTRGVzaWdu
dGltZUNvbXBvbmVudDEwMABQcm92aWRlQ29tcG9uZW50UHJvcGVydGllcwBJRFRTUnVudGltZUNv
bm5lY3Rpb25Db2xsZWN0aW9uMTAwAGdldF9SdW50aW1lQ29ubmVjdGlvbkNvbGxlY3Rpb24AZ2V0
X0NvdW50AElEVFNSdW50aW1lQ29ubmVjdGlvbjEwMABEdHNDb252ZXJ0AE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuRFRTUnVudGltZVdyYXAATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZS5XcmFw
cGVyAElEVFNDb25uZWN0aW9uTWFuYWdlcjEwMABHZXRFeHRlbmRlZEludGVyZmFjZQBzZXRfQ29u
bmVjdGlvbk1hbmFnZXIAZ2V0X0lEAHNldF9Db25uZWN0aW9uTWFuYWdlcklEAElEVFNDdXN0b21Q
cm9wZXJ0eTEwMABTZXRDb21wb25lbnRQcm9wZXJ0eQBBY3F1aXJlQ29ubmVjdGlvbnMAUmVpbml0
aWFsaXplTWV0YURhdGEAUmVsZWFzZUNvbm5lY3Rpb25zADxQcml2YXRlSW1wbGVtZW50YXRpb25E
ZXRhaWxzPntFRkY1ODc1Ny1GNUM4LTRCRjYtQTQ0Ri0xNTU3OTFDRjY5OTd9AFN5c3RlbS5Db2xs
ZWN0aW9ucy5HZW5lcmljAERpY3Rpb25hcnlgMgAkJG1ldGhvZDB4NjAwMDAwNy0xAFRyeUdldFZh
bHVlACQkbWV0aG9kMHg2MDAwMDA3LTIASURUU1BhdGhDb2xsZWN0aW9uMTAwAGdldF9QYXRoQ29s
bGVjdGlvbgBJRFRTUGF0aDEwMABJRFRTT3V0cHV0Q29sbGVjdGlvbjEwMABnZXRfT3V0cHV0Q29s
bGVjdGlvbgBJRFRTT3V0cHV0MTAwAElEVFNJbnB1dENvbGxlY3Rpb24xMDAAZ2V0X0lucHV0Q29s
bGVjdGlvbgBJRFRTSW5wdXQxMDAAQXR0YWNoUGF0aEFuZFByb3BhZ2F0ZU5vdGlmaWNhdGlvbnMA
SURUU1ZpcnR1YWxJbnB1dDEwMABHZXRWaXJ0dWFsSW5wdXQASURUU1ZpcnR1YWxJbnB1dENvbHVt
bkNvbGxlY3Rpb24xMDAAZ2V0X1ZpcnR1YWxJbnB1dENvbHVtbkNvbGxlY3Rpb24ASURUU091dHB1
dENvbHVtbkNvbGxlY3Rpb24xMDAAZ2V0X091dHB1dENvbHVtbkNvbGxlY3Rpb24AU3lzdGVtLkNv
bGxlY3Rpb25zAElFbnVtZXJhdG9yAEdldEVudW1lcmF0b3IAZ2V0X0N1cnJlbnQAZ2V0X0xpbmVh
Z2VJRABJRFRTSW5wdXRDb2x1bW4xMDAARFRTVXNhZ2VUeXBlAFNldFVzYWdlVHlwZQBEVFNJbnNl
cnRQbGFjZW1lbnQASW5zZXJ0T3V0cHV0AFNldE91dHB1dFByb3BlcnR5AE1vdmVOZXh0AElEaXNw
b3NhYmxlAERpc3Bvc2UASURUU0V4dGVybmFsTWV0YWRhdGFDb2x1bW5Db2xsZWN0aW9uMTAwAGdl
dF9FeHRlcm5hbE1ldGFkYXRhQ29sdW1uQ29sbGVjdGlvbgBzZXRfSXNVc2VkAHNldF9IYXNTaWRl
RWZmZWN0cwAkJG1ldGhvZDB4NjAwMDAwNy0zAExpc3RgMQBUb0FycmF5AFByZWRpY2F0ZWAxAEFy
cmF5AEZpbmQASXNOdWxsT3JFbXB0eQBJRFRTSW5wdXRDb2x1bW5Db2xsZWN0aW9uMTAwAGdldF9J
bnB1dENvbHVtbkNvbGxlY3Rpb24ASURUU0N1c3RvbVByb3BlcnR5Q29sbGVjdGlvbjEwMABnZXRf
Q3VzdG9tUHJvcGVydHlDb2xsZWN0aW9uAHNldF9WYWx1ZQBJRFRTT3V0cHV0Q29sdW1uMTAwAHNl
dF9FeHRlcm5hbE1ldGFkYXRhQ29sdW1uSUQARFRTUm93RGlzcG9zaXRpb24Ac2V0X0Vycm9yUm93
RGlzcG9zaXRpb24Ac2V0X1RydW5jYXRpb25Sb3dEaXNwb3NpdGlvbgBEYXRhVHlwZQBTZXREYXRh
VHlwZVByb3BlcnRpZXMAc2V0X01hcHBlZENvbHVtbklEACQkbWV0aG9kMHg2MDAwMDA3LTQAJCRt
ZXRob2QweDYwMDAwMDctNQBUb0xvd2VyACQkbWV0aG9kMHg2MDAwMDA3LTYASW5zZXJ0T3V0cHV0
Q29sdW1uQXQAZ2V0X0RhdGFUeXBlAGdldF9MZW5ndGgAZ2V0X0NvZGVQYWdlACQkbWV0aG9kMHg2
MDAwMDA3LTcAU2V0SW5wdXRDb2x1bW5Qcm9wZXJ0eQBTZXRPdXRwdXRDb2x1bW5Qcm9wZXJ0eQAk
JG1ldGhvZDB4NjAwMDAwNy04ACQkbWV0aG9kMHg2MDAwMDA3LTkAJCRtZXRob2QweDYwMDAwMDct
MTAAc2V0X0lzU29ydGVkAHNldF9Tb3J0S2V5UG9zaXRpb24AJCRtZXRob2QweDYwMDAwMDctMTEA
JCRtZXRob2QweDYwMDAwMDctMTIAc2V0X0NvbnRhY3RJbmZvACQkbWV0aG9kMHg2MDAwMDA3LTEz
AGdldF9Tb3J0S2V5UG9zaXRpb24AJCRtZXRob2QweDYwMDAwMDctMTQAJCRtZXRob2QweDYwMDAw
MDctMTUAQ29udmVydABUb0ludDMyAElEVFNFeHRlcm5hbE1ldGFkYXRhQ29sdW1uMTAwAEdldElu
cHV0Q29sdW1uQnlMaW5lYWdlSUQATWFwSW5wdXRDb2x1bW4Ac2V0X1Rhc2tSZXN1bHQARXhjZXB0
aW9uAElEVFNPYmplY3QxMDAAX1Z0YmxHYXAxXzQAU3lzdGVtLlJ1bnRpbWUuSW50ZXJvcFNlcnZp
Y2VzAERpc3BJZEF0dHJpYnV0ZQBwYnN0ck5hbWUAX1Z0YmxHYXAyXzIAX1Z0YmxHYXAzXzMAX1Z0
YmxHYXA0XzUATmFtZQBMZW5ndGgATGluZWFnZUlEAENvZGVQYWdlAFNvcnRLZXlQb3NpdGlvbgBH
dWlkQXR0cmlidXRlAFR5cGVJZGVudGlmaWVyQXR0cmlidXRlAENvbUltcG9ydEF0dHJpYnV0ZQBJ
RFRTT2JqZWN0TW9kZWwxMDAAQ29DbGFzc0F0dHJpYnV0ZQBfVnRibEdhcDFfMQBDb21wb25lbnRN
ZXRhRGF0YUNvbGxlY3Rpb24AUGF0aENvbGxlY3Rpb24ASUVudW1lcmFibGUASW5kZXgAX1Z0YmxH
YXAxXzIASXRlbQBEZWZhdWx0TWVtYmVyQXR0cmlidXRlAGdldF9EZXNjcmlwdGlvbgBwYnN0ckRl
c2NyaXB0aW9uAGdldF9Db21wb25lbnRDbGFzc0lEAGJzdHJDb21wb25lbnRDbGFzc0lEAF9WdGJs
R2FwM18xAF9WdGJsR2FwNF8yMQBnZXRfQ29udGFjdEluZm8AcGJzdHJDb250YWN0SW5mbwBEZXNj
cmlwdGlvbgBDb21wb25lbnRDbGFzc0lEAElucHV0Q29sbGVjdGlvbgBPdXRwdXRDb2xsZWN0aW9u
AEN1c3RvbVByb3BlcnR5Q29sbGVjdGlvbgBSdW50aW1lQ29ubmVjdGlvbkNvbGxlY3Rpb24AQ29u
dGFjdEluZm8AbE91dHB1dElEAGxPdXRwdXRDb2x1bW5JbmRleABic3RyTmFtZQBic3RyRGVzY3Jp
cHRpb24AbElucHV0SUQAcElEVFNWaXJ0dWFsSW5wdXRPYmplY3QAbExpbmVhZ2VJRABlVXNhZ2VU
eXBlAFByb3BlcnR5TmFtZQB2VmFsdWUAX1Z0YmxHYXAyXzEAbElucHV0Q29sdW1uSUQAbE91dHB1
dENvbHVtbklEAGVJbnNlcnRQbGFjZW1lbnQAX1Z0YmxHYXA0XzYAcFRyYW5zYWN0aW9uAF9WdGJs
R2FwNV8xAGxFeHRlcm5hbE1ldGFkYXRhQ29sdW1uSUQAQ291bnQAX1Z0YmxHYXAxXzgAZ2V0X0Nv
bm5lY3Rpb25NYW5hZ2VySUQAcGJzdHJDb25uZWN0aW9uTWFuYWdlcklEAGdldF9Db25uZWN0aW9u
TWFuYWdlcgBwcElEVFNDb25uZWN0aW9uTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdlcklEAHB2VmFs
dWUAVmFsdWUAX1Z0YmxHYXAxXzMAX1Z0YmxHYXAxXzEyAHBJRFRTT3V0cHV0AHBJRFRTSW5wdXQA
c2V0X0lEAHBJRABfVnRibEdhcDFfMTQAX1Z0YmxHYXAyXzUAZ2V0X0lzU29ydGVkAHBiSXNTb3J0
ZWQASUQAT3V0cHV0Q29sdW1uQ29sbGVjdGlvbgBJc1NvcnRlZABfVnRibEdhcDFfNgBnZXRfSGFz
U2lkZUVmZmVjdHMAcGJIYXNTaWRlRWZmZWN0cwBfVnRibEdhcDNfMTEASGFzU2lkZUVmZmVjdHMA
SW5wdXRDb2x1bW5Db2xsZWN0aW9uAEV4dGVybmFsTWV0YWRhdGFDb2x1bW5Db2xsZWN0aW9uAFZp
cnR1YWxJbnB1dENvbHVtbkNvbGxlY3Rpb24AVVRfUkVBRE9OTFkAVVRfUkVBRFdSSVRFAFVUX0lH
Tk9SRUQASVBfQkVGT1JFAElQX0FGVEVSAGdldF9Jc1VzZWQAcGJJc1VzZWQASXNVc2VkAF9WdGJs
R2FwMl8xMQBfVnRibEdhcDJfNgBfVnRibEdhcDNfMgBnZXRfTWFwcGVkQ29sdW1uSUQAcGxNYXBw
ZWRDb2x1bW5JRABfVnRibEdhcDRfMQBwbFNvcnRLZXlQb3NpdGlvbgBfVnRibEdhcDVfNABlRGF0
YVR5cGUAbExlbmd0aABsUHJlY2lzaW9uAGxTY2FsZQBsQ29kZVBhZ2UAZ2V0X0Vycm9yUm93RGlz
cG9zaXRpb24AcGVEaXNwb3NpdGlvbgBnZXRfVHJ1bmNhdGlvblJvd0Rpc3Bvc2l0aW9uAF9WdGJs
R2FwNl8yAGdldF9FeHRlcm5hbE1ldGFkYXRhQ29sdW1uSUQAcGxFeHRlcm5hbE1ldGFkYXRhQ29s
dW1uSUQATWFwcGVkQ29sdW1uSUQARXJyb3JSb3dEaXNwb3NpdGlvbgBUcnVuY2F0aW9uUm93RGlz
cG9zaXRpb24ARXh0ZXJuYWxNZXRhZGF0YUNvbHVtbklEAFJEX05vdFVzZWQAUkRfSWdub3JlRmFp
bHVyZQBSRF9SZWRpcmVjdFJvdwBSRF9GYWlsQ29tcG9uZW50AERUX0VNUFRZAERUX05VTEwARFRf
STIARFRfSTQARFRfUjQARFRfUjgARFRfQ1kARFRfREFURQBEVF9CT09MAERUX0RFQ0lNQUwARFRf
STEARFRfVUkxAERUX1VJMgBEVF9VSTQARFRfSTgARFRfVUk4AERUX0ZJTEVUSU1FAERUX0dVSUQA
RFRfQllURVMARFRfU1RSAERUX1dTVFIARFRfTlVNRVJJQwBEVF9EQkRBVEUARFRfREJUSU1FAERU
X0RCVElNRVNUQU1QAERUX0RCVElNRTIARFRfREJUSU1FU1RBTVBPRkZTRVQARFRfSU1BR0UARFRf
VEVYVABEVF9OVEVYVABEVF9EQlRJTUVTVEFNUDIARFRfQllSRUZfSTIARFRfQllSRUZfSTQARFRf
QllSRUZfUjQARFRfQllSRUZfUjgARFRfQllSRUZfQ1kARFRfQllSRUZfREFURQBEVF9CWVJFRl9C
T09MAERUX0JZUkVGX0RFQ0lNQUwARFRfQllSRUZfSTEARFRfQllSRUZfVUkxAERUX0JZUkVGX1VJ
MgBEVF9CWVJFRl9VSTQARFRfQllSRUZfSTgARFRfQllSRUZfVUk4AERUX0JZUkVGX0ZJTEVUSU1F
AERUX0JZUkVGX0dVSUQARFRfQllSRUZfTlVNRVJJQwBEVF9CWVJFRl9EQkRBVEUARFRfQllSRUZf
REJUSU1FAERUX0JZUkVGX0RCVElNRVNUQU1QAERUX0JZUkVGX0RCVElNRTIARFRfQllSRUZfREJU
SU1FU1RBTVBPRkZTRVQARFRfQllSRUZfREJUSU1FU1RBTVAyAElEVFNFeGVjdXRhYmxlMTAwAElE
VFNJbmZvRXZlbnRzMTAwAFNUXzBjZWYyOWE5MzkzZjRlNGM4ZGRhMDIzZDkxMDUyNmU1LmNzcHJv
ai5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMAAAB/UwBUAF8AMABjAGUAZgAyADkAYQA5
ADMAOQAzAGYANABlADQAYwA4AGQAZABhADAAMgAzAGQAOQAxADAANQAyADYAZQA1AC4AYwBzAHAA
cgBvAGoALgBQAHIAbwBwAGUAcgB0AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAB1TAFQATwBD
AEsAOgBTAEUAUQBVAEUATgBDAEUAACVTAGUAcQB1AGUAbgBjAGUAIABDAG8AbgB0AGEAaQBuAGUA
cgAAE1MAUQBMAF8AUQB1AGUAcgB5AAANUwBFAEwARQBDAFQAAAEAC0UAeABlAGMAIAAAC08ATABF
AEQAQgAAGU8ATABFAEQAQgAgAFMAbwB1AHIAYwBlAACBDVAAcgBvAHYAaQBkAGUAcgA9AFMAUQBM
AE8ATABFAEQAQgAuADEAOwBEAGEAdABhACAAUwBvAHUAcgBjAGUAPQAxADcAMgAuADIANQAuADEA
NgA0AC4ANgAzADsASQBuAGkAdABpAGEAbAAgAEMAYQB0AGEAbABvAGcAPQBEAE0AXwBNAGUAdABh
AGQAYQB0AGEAOwBUAHIAdQBzAHQAZQBkAF8AQwBvAG4AbgBlAGMAdABpAG8AbgAgAD0AIABGAGEA
bABzAGUAOwAgAFUAcwBlAHIAIABJAEQAPQBzAGEAOwBQAGEAcwBzAHcAbwByAGQAPQBQAGEAcwBz
AHcAbwByAGQAMQAyADMAOwAAG1MAVABPAEMASwA6AFMAUQBMAFQAYQBzAGsAAAlOAGEAbQBlAAAj
RQB4AGUAYwB1AHQAZQAgAFAAcgBvAGMAZQBkAHUAcgBlAAAXRABlAHMAYwByAGkAcAB0AGkAbwBu
AAAVQwBvAG4AbgBlAGMAdABpAG8AbgAAJVMAcQBsAFMAdABhAHQAZQBtAGUAbgB0AFMAbwB1AHIA
YwBlAAAnUABhAGMAawBhAGcAZQBTAGEAdgBlAEwAbwBjAGEAdABpAG8AbgAACy4AZAB0AHMAeAAA
GU0AZQB0AGEARABhAHQAYQBDAG8AbgBuAABPWwBkAGIAbwBdAC4AWwBBAFQATQBUAE4AXwBHAEUA
VABfAEMATwBOAE4ARQBDAFQASQBPAE4AXwBEAEUAVABBAEkATABTAF8AUwBQAF0AABNDAGwAaQBl
AG4AdABfAEkARAAAFUAAQwBsAGkAZQBuAHQAXwBJAEQAABdAAFAAcgBvAGoAZQBjAHQAXwBJAEQA
ABVQAHIAbwBqAGUAYwB0AF8ASQBEAAAZQABUAGUAbQBwAGwAYQB0AGUAXwBJAGQAABdUAGUAbQBw
AGwAYQB0AGUAXwBJAGQAACVAAFAASwBHAF8AUwBhAHYAZQBfAEwAbwBjAGEAdABpAG8AbgAAGUAA
UwB0AGEAdAB1AHMAXwBjAG8AZABlAAARQABNAGUAcwBzAGEAZwBlAAARQABUAG8AbwBsAF8ASQBE
AAAPVABvAG8AbABfAEkARAAAE1MAUgBDAF8AUQB1AGUAcgB5AAAVVAByAGEAbgBzAF8AdAB5AHAA
ZQAAAyAAABNNAEUAUgBHAEUASgBPAEkATgAAFVMAUgBDAF8AUQB1AGUAcgB5ADIAAA1MAE8ATwBL
AFUAUAAAE0wASwBQAF8AUQB1AGUAcgB5AAAXTABLAFAAXwBDAG8AbAB1AG0AbgBzAAATRABTAFQA
XwBUAGEAYgBsAGUAABtUAGUAbQBwAGwAYQB0AGUAXwBOAGEAbQBlAAATVABhAHMAawBfAG4AYQBt
AGUAABVUAHIAYQBuAHMAXwBSAHUAbABlAAArRABTAFQAXwBDAG8AbgBuAGUAYwB0AGkAbwBuAF8A
UwB0AHIAaQBuAGcAACVTAG8AdQByAGMAZQBfAEMAbwBuAG4AXwBTAHQAcgBpAG4AZwAAa3MAZQBs
AGUAYwB0ACAAVAB5AHAAZQAgAEYAUgBPAE0AIABFAFQATABfAFQARQBNAFAATABBAFQARQBfAE0A
UwAgAFcASABFAFIARQAgAFQAZQBtAHAAbABhAHQAZQBfAEkARAAgAD0AIAAACVQAeQBwAGUAABFE
AEEAVABBAFQAWQBQAEUAAClQAHIAbwB2AGkAZABlAHIAPQBTAFEATABPAEwARQBEAEIALgAxADsA
AHlzAGUAbABlAGMAdAAgACcAMQAnACAAZgByAG8AbQAgAEkAbgBmAG8AcgBtAGEAdABpAG8AbgBf
AFMAYwBoAGUAbQBhAC4AVABhAGIAbABlAHMAIAB3AGgAZQByAGUAIABUAEEAQgBMAEUAXwBOAEEA
TQBFAD0AJwABAycAAUtbAGQAYgBvAF0ALgBbAEEAVABNAFQATgBfAEcARQBUAF8ARABBAFQAQQBU
AFkAUABFAF8ARABFAFQAQQBJAEwAUwBfAFMAUABdAAAZQABUAGEAYgBsAGUARQB4AGkAcwB0AHMA
ACNPAEwARQBEAEIAIABEAGUAcwB0AGkAbgBhAHQAaQBvAG4AACVTAFQATwBDAEsAOgBQAGkAcABl
AGwAaQBuAGUAVABhAHMAawAAA04AACdWAF8AUwBvAHUAcgBjAGUAUAByAG8AZAB1AGMAdABOAGEA
bQBlAAAJVQBzAGUAcgAAD1QARQBTAFQASQBOAEcAABVFAFgARQBDAFUAVABFAFMAUQBMAAAHUABS
AEUAAAMkAAANUwBUAFIASQBOAEcAABFEAEEAVABFAFQASQBNAEUAAAlEAEEAVABFAAADMAAADVUA
cwBlAHIAOgA6AAANUwBPAFUAUgBDAEUAAANZAAAJRABGAFQAXwAALUQAVABTAEEAZABhAHAAdABl
AHIALgBPAGwAZQBEAGIAUwBvAHUAcgBjAGUAABdPAEwARQBEAEIAUwBvAHUAcgBjAGUAABVBAGMA
YwBlAHMAcwBNAG8AZABlAAAVUwBxAGwAQwBvAG0AbQBhAG4AZAAAF08AbABlAEQAQgBTAG8AdQBy
AGMAZQAAIUMATwBOAEQASQBUAEkATwBOAEEATABTAFAATABJAFQAABtEAEUAUgBJAFYARQBEAEMA
TwBMAFUATQBOAAAZQwBIAEEAUgBBAEMAVABFAFIATQBBAFAAABNBAEcARwBSAEUARwBBAFQARQAA
EVIATwBXAEMATwBVAE4AVAAACVMATwBSAFQAADFTAE8AUgBUACYARQBMAEkATQBJAE4AQQBUAEUA
RABVAFAATABJAEMAQQBUAEUAUwAAEVUATgBJAE8ATgBBAEwATAAAC00ARQBSAEcARQAAGU8ATABF
AEQAQgBDAE8ATQBNAEEATgBEAAATTQBVAEwAVABJAEMAQQBTAFQAACVFAHgAZQBjAHUAdABlACAA
UAByAG8AYwBlAGQAdQByAGUAXwAAO0QAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4AQwBvAG4AZABp
AHQAaQBvAG4AYQBsAFMAcABsAGkAdAAAHUYAaQBsAHQAZQByAF8AUgBvAHUAdABlAHIAXwAAb0UA
dgBhAGwAdQBhAHQAZQBzACAAYQBuAGQAIABkAGkAcgBlAGMAdABzACAAcgBvAHcAcwAgAGkAbgAg
AGEAIABkAGEAdABhAHMAZQB0ACAAYgBhAHMAZQBkACAAYQAgAGMAbwBsAHUAbQBuAC4AACFDAG8A
bgBkAGkAdABpAG8AbgBhAGwAUwBwAGwAaQB0AAAbRABlAHIAaQB2AGUAZABDAG8AbAB1AG0AbgAA
GUMAaABhAHIAYQBjAHQAZQByAE0AYQBwAAATQQBnAGcAcgBlAGcAYQB0AGUAAA1MAG8AbwBrAHUA
cAAAEVIAbwB3AEMAbwB1AG4AdAAACVMAbwByAHQAABFVAG4AaQBvAG4AQQBsAGwAAAtNAGUAcgBn
AGUAABNNAGUAcgBnAGUASgBvAGkAbgAAE00AdQBsAHQAaQBDAGEAcwB0AAADWwAAA10AAB9FAHYA
YQBsAHUAYQB0AGkAbwBuAE8AcgBkAGUAcgAAJUYAcgBpAGUAbgBkAGwAeQBFAHgAcAByAGUAcwBz
AGkAbwBuAAA1RABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBEAGUAcgBpAHYAZQBkAEMAbwBsAHUA
bQBuAAApRABlAHIAaQB2AGUAZABDAG8AbABUAHIAYQBuAHMAZgBvAHIAbQBfAACAhU8AdgBlAHIA
cgBpAGQAZQAgAHQAaABlACAAbwByAGcAaQBuAGEAbAAgAGMAbwBsAHUAbQBuACAAewAwAH0AIAB3
AGkAdABoACAATwBUAEgARQBSAFMAIABpAGYAIAB0AGgAZQAgAHMAdAByAGkAbgBnACAAaQBzACAA
TgBVAEwATAAuAAAVRQB4AHAAcgBlAHMAcwBpAG8AbgAAM0QAVABTAFQAcgBhAG4AcwBmAG8AcgBt
AC4AQwBoAGEAcgBhAGMAdABlAHIATQBhAHAAADFjAGEAcABpAHQAYQBsAGkAcwBlACAAYQBsAGwA
IABpAG4AaQB0AGkAYQBsAHMAXwAAL2MAYQBwAGkAdABhAGwAaQBzAGUAIABhAGwAbAAgAGkAbgBp
AHQAaQBhAGwAcwAALUQAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4AQQBnAGcAcgBlAGcAYQB0AGUA
ABVBAGcAZwByAGUAZwBhAHQAZQBfAAALYwBvAHUAbgB0AAARYwBvAHUAbgB0AGEAbABsAAAbYwBv
AHUAbgB0AGQAaQBzAHQAaQBuAGMAdAAAB3MAdQBtAAAHYQB2AGcAAAdtAGkAbgAAB20AYQB4AAAn
QQBnAGcAcgBlAGcAYQB0AGkAbwBuAEMAbwBsAHUAbQBuAEkAZAAAH0EAZwBnAHIAZQBnAGEAdABp
AG8AbgBUAHkAcABlAAALSQBzAEIAaQBnAAA1QQBnAGcAcgBlAGcAYQB0AGkAbwBuAEMAbwBtAHAA
YQByAGkAcwBvAG4ARgBsAGEAZwBzAAAnRABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBMAG8AbwBr
AHUAcAAAD04ATwBNAEEAVABDAEgAAAMjAAAPIABXAEgARQBSAEUAIAAACyAAYQBuAGQAIAAAD0wA
bwBvAGsAdQBwAF8AABNDAGEAYwBoAGUAVAB5AHAAZQAAH04AbwBNAGEAdABjAGgAQgBlAGgAYQB2
AGkAbwByAAAHSQBOAF8AACtKAG8AaQBuAFQAbwBSAGUAZgBlAHIAZQBuAGMAZQBDAG8AbAB1AG0A
bgAACWYAcgBvAG0AAAN+AAAvQwBvAHAAeQBGAHIAbwBtAFIAZQBmAGUAcgBlAG4AYwBlAEMAbwBs
AHUAbQBuAAArRABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBSAG8AdwBDAG8AdQBuAHQAACFnAGUA
dAAgAHIAbwB3ACAAYwBvAHUAbgB0AGUAcgBfAAAhZwBlAHQAcwAgAHIAbwB3ACAAYwBvAHUAbgB0
AGUAcgAAGVYAYQByAGkAYQBiAGwAZQBOAGEAbQBlAAAjRABUAFMAVAByAGEAbgBzAGYAbwByAG0A
LgBTAG8AcgB0AAAdUwBvAHIAdABUAHIAYQBuAHMAZgBvAHIAbQBfAAAbUwBvAHIAdABjAG8AbQBw
AG8AbgBlAG4AdAAACUQARQBTAEMAACVOAGUAdwBTAG8AcgB0AEsAZQB5AFAAbwBzAGkAdABpAG8A
bgAAJ0UAbABpAG0AaQBuAGEAdABlAEQAdQBwAGwAaQBjAGEAdABlAHMAACtEAFQAUwBUAHIAYQBu
AHMAZgBvAHIAbQAuAFUAbgBpAG8AbgBBAGwAbAAAJVUAbgBpAG8AbgAgAEEAbABsACAAYwBvAGwA
dQBtAG4AcwBfAAAlRABUAFMAVAByAGEAbgBzAGYAbwByAG0ALgBNAGUAcgBnAGUAACVNAGUAcgBn
AGUAIABBAGwAbAAgAGMAbwBsAHUAbQBuAHMAXwAAM0QAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4A
TwBMAEUARABCAEMAbwBtAG0AYQBuAGQAAB9PAEwARQAgAEQAQgAgAEMAbwBtAG0AYQBuAGQAXwAA
GU8ATABFAEQAQgBTAG8AdQByAGMAZQAxAAAbTwBMAEUARABCACAAUwBvAHUAcgBjAGUAMgAADXIA
bwB3AF8AaQBkAAARTwBSAEQARQBSACAAQgBZAAAVIABPAHIAZABlAHIAIABiAHkAIAAAJU0AZQBy
AGcAZQBTAG8AcgB0AFQAcgBhAG4AcwBmAG8AcgBtAAALUwBvAHIAdAAxAAAtRABUAFMAVAByAGEA
bgBzAGYAbwByAG0ALgBNAGUAcgBnAGUASgBvAGkAbgAAC20AZQByAGcAZQAAEUoAbwBpAG4AVAB5
AHAAZQAALUQAVABTAFQAcgBhAG4AcwBmAG8AcgBtAC4ATQB1AGwAdABpAGMAYQBzAHQAABVNAHUA
bAB0AGkAYwBhAHMAdABfAAATTQB1AGwAdABpAGMAYQBzAHQAADFEAFQAUwBUAHIAYQBuAHMAZgBv
AHIAbQAuAEQAYQB0AGEAQwBvAG4AdgBlAHIAdAAAM0QAYQB0AGEAIABDAG8AbgB2AGUAcgBzAGkA
bwBuACAAQwBvAG0AcABvAG4AZQBuAHQAAC1EAGEAdABhAEMAbwBuAHYAZQByAHQAIABDAG8AbQBw
AG8AbgBlAG4AdABfAAAVQwBvAHAAeQBDAG8AbAB1AG0AbgAAgdFTAGUAbABlAGMAdAAgAEMATwBM
AFUATQBOAF8ATgBBAE0ARQAsAEQAQQBUAEEAXwBUAFkAUABFACwASQBzAG4AdQBsAGwAKABDAEgA
QQBSAEEAQwBUAEUAUgBfAE0AQQBYAEkATQBVAE0AXwBMAEUATgBHAFQASAAsADAAKQAgAEEAcwAg
AEMASABBAFIAQQBDAFQARQBSAF8ATQBBAFgASQBNAFUATQBfAEwARQBOAEcAVABIACwASQBzAG4A
dQBsAGwAKABOAFUATQBFAFIASQBDAF8AUABSAEUAQwBJAFMASQBPAE4ALAAwACkAIABBAHMAIABO
AFUATQBFAFIASQBDAF8AUABSAEUAQwBJAFMASQBPAE4ALABJAHMAbgB1AGwAbAAoAE4AVQBNAEUA
UgBJAEMAXwBTAEMAQQBMAEUALAAwACkAIABBAHMAIABOAFUATQBFAFIASQBDAF8AUwBDAEEATABF
ACAAZgByAG8AbQAgAEkAbgBmAG8AcgBtAGEAdABpAG8AbgBfAFMAYwBoAGUAbQBhAC4AQwBPAEwA
VQBNAE4AUwAgAHcAaABlAHIAZQAgAFQAQQBCAEwARQBfAE4AQQBNAEUAPQAnAAEXQwBPAEwAVQBN
AE4AXwBOAEEATQBFAAATRABBAFQAQQBfAFQAWQBQAEUAADFDAEgAQQBSAEEAQwBUAEUAUgBfAE0A
QQBYAEkATQBVAE0AXwBMAEUATgBHAFQASAAAI04AVQBNAEUAUgBJAEMAXwBQAFIARQBDAEkAUwBJ
AE8ATgAAG04AVQBNAEUAUgBJAEMAXwBTAEMAQQBMAEUAAA92AGEAcgBjAGgAYQByAAAJYwBoAGEA
cgAAEW4AdgBhAHIAYwBoAGEAcgAAD24AdQBtAGUAcgBpAGMAAAtmAGwAbwBhAHQAABFkAGEAdABl
AHQAaQBtAGUAAAlkAGEAdABlAAAPaQBuAHQAZQBnAGUAcgAAB2kAbgB0AAANYgBpAGcAaQBuAHQA
ABFzAG0AYQBsAGwAaQBuAHQAAA90AGkAbgB5AGkAbgB0AAAHYgBpAHQAADVTAG8AdQByAGMAZQBJ
AG4AcAB1AHQAQwBvAGwAdQBtAG4ATABpAG4AZQBhAGcAZQBJAEQAADdEAFQAUwBBAGQAYQBwAHQA
ZQByAC4ATwBsAGUARABiAEQAZQBzAHQAaQBuAGEAdABpAG8AbgAAI08ATABFAEQAQgBEAGUAcwB0
AGkAbgBhAHQAaQBvAG4AXwAAFU8AcABlAG4AUgBvAHcAcwBlAHQAAB9GAGEAcwB0AEwAbwBhAGQA
TwBwAHQAaQBvAG4AcwAAM1QAQQBCAEwATwBDAEsALABDAEgARQBDAEsAXwBDAE8ATgBTAFQAUgBB
AEkATgBUAFMAAEFEAGEAdABhAEMAbwBuAHYAZQByAHQAIABDAG8AbQBwAG8AbgBlAG4AdABfAE0A
dQBsAHQAaQBDAGEAcwB0AF8AAANfAAAjRQByAHIAbwByAFAAYQBjAGsAYQBnAGUALgBkAHQAcwB4
AAAAAFeH9e/I9fZLpE8VV5HPaZcACLd6XFYZNOCJCImEXc2AgMyRAwYSFQMGEhkDIAABBAAAEhUE
AAASGQUAAQESGQQIABIVBAgAEhkDBhIMBAAAEgwECAASDAIGCAMGERQEAAAAAAQBAAAABCABAQ4E
IAEBCAYAARJREVUEIAASWQYgAgEOElkEBwESFQUgAQERYQgBAAIAAAAAAAMAAAEDBhIcBCABAg4D
IAAOBiACAg4RdQQgABJ9BiABEoCBDgQgAQECBSAAEoCRBSAAEoCVBiABEoCZHAMgABwEIAEIDgQg
AQIIBQACDg4OBSAAEoChBiABEoClDgYAAg4OHRwFIAASgK0GIAESgLEcBSACARwcBgADDg4ODgkg
AwEOEnkSgLUGIAEBEoC9BiABARGAyQUgAgEOHAYgAQERgNUGIAEBEYDZBSAAEoDdCCABEoDNEoDN
BSAAEYDpBiABARKAuQUgABKA7QQgARwOBSACDg4OAyAAAgIGDgUAAgIODgkgBBKAmQ4CDhwGIAEd
Dh0DBSAAEoD9BSAAEoEBBQAAEYEFBiABEoEBCAYgAQERgQkEIAEBHAUgABKBDQsgAhKBERKAgRKA
gQQgABIoBCAAEiwEIAASMAQgABI4AyAACAUgARI8HAgAARKBORKApQUgAQESQAYgAhJEDhwIBhUS
gUUCDggHFRKBRQIOCAcgAgETABMBCCACAhMAEBMBBQACDhwcBCAAEkwEIAASUAQgABJUBSABElgc
BCAAElwFIAESYBwHIAIBElgSYAQgABJkBCAAEmgEIAASbAUgABKBbQUgARIcHAogBBJwCBJkCBF0
ByACElgReAgHIAMSRAgOHAQgABJ8BhUSgYUBDgUgAQETAAUgAB0TAAYVEoGJAQ4FIAIBHBgPEAEC
HgAdHgAVEoGJAR4AAwoBDgQAAQIOBSAAEoCABQACDg4cBSAAEoCEBSABEkQcBSAAEoCIBiABARGA
jAQgABJECiAFARGAkAgICAgJIAQSgIgICA4OBSAAEYCQCCAEEkQICA4cBiABEoCIHAUgARIsHAQA
AQgcBiABEoCUHAYgAggIEXQFIAEScAgIIAMSgJQICAgFAAEOHRyCKAeBGBJ5EoCFEoCNDggSgIES
gKUSgKkSgLkSgL0SgM0SgM0SgM0SgM0SgM0SgM0SgM0SgOESgO0ODg4ODg4ODg4OCBKAuRKAvRKA
7RKA4Q4SgLkSgL0SgO0SgOEIEoC5EoC9EoDNEoDNEoDNEoDNEoDNEoDNEoDhEoClEoClEoCBDggd
Dg4IEoCpDhKA+Q4SgQESgKkSIBIsEjQSLBIsEiwSLBIsEiwSLBIsEiwSLBIsEiwSLBIsEiwdDh0O
Dh0ODg4ICBKAgRKAqRKA+Q4ODg4SgQESMBJgEmQSaBJYCAgOHQ4OEhwSWBIwEmASZBJoEkQdDhUS
gYUBDg4ODg4OEhwIDhUSgYkBDhIYEnASgIgSRBIwEmASZBJoElgSHBIwEmASZBJYEmgSHA4OCBKA
iAgSRBKAiAgSRBIwEmASZBJoDg4SHBJwHQ4SWA4ODg4SgIgSMA4OEjAdDhJwEmQIDhIcCBIcEjAS
MBIwEjQSLA4dDh0OEjASZBJwEhwSHBIwEmASZAgSHBJgEmQSHBJEEkQSWAgSMBJgEmQIHQ4OEiwS
MBKAuRKAvRKA4RKA7QgODggICBJkElgIEoCIEiwSMBJgEmQSYBJkEoCAEnwSbBKAiBKAlBJwDggd
Dg4SLBIwEoC5EoC9EoDhEoDtCA4OCAgIEmQSWAgSgIgSLBIwEmASZBJgEmQSgIASfBJsEoCIEoCU
EnAOHQMdDggOCBKBbRKBfRwdDggdHAgBAA0AAAAAAAETCAEAZQAAAAAACAEAZgAAAAAACAEAbAAA
AAAACAEAcwAAAAAACAEAegAAAAAAAygADgUoABGAkAMoAAgpAQAkRDVEREI2MkMtQkJDRi00NzlG
LUJBQzItNDM4MkE5NTBCMzU2AAApAQAkNDEwRTkxRTktMkM0NS00ODdBLTg1MUEtNUIzREZFNzQ3
MzI5AAAFIAEBElFfAQBaU3lzdGVtLk9iamVjdCwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwg
Q3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5AAAIAQAMAAAA
AAABHAQoABIoBCgAEkwIAQAAAAAAAAABGwgBAA4AAAAAAAUoARIsHCkBACQwNzA3NTBGMi02MzFE
LTRFM0UtOEZFNS1CRTZCMUNERjI2MzIAAAkBAARJdGVtAAAIAQBnAAAAAAAIAQBoAAAAAAAIAQBp
AAAAAAAIAQByAAAAAAAIAQCFAAAAAAAEKAASXAQoABJUBSgAEoCEBCgAEjgpAQAkODg3QkQwNjEt
ODJENC00RjA2LUEyMjItMzM3RDQyRTdGODk2AAApAQAkRkY1REQzRjEtOTlDMS00RkZCLUIwOTct
MUIxQjJCOUU5QjJEAAAIAQALAAAAAAAIAQAQAAAAAAAIAQARAAAAAAAIAQATAAAAAAAIAQAUAAAA
AAAIAQAVAAAAAAAIAQAXAAAAAAAIAQAeAAAAAAABGQgBAB8AAAAAAAgBACEAAAAAAAUoARI8HCkB
ACREOTQyODg5My04QTk1LTRERkQtODI2Qy00MDM1RTU3MjhDNjAAAAQgABJABCgAEkApAQAkRDdG
RDFERkMtMzY0RS00N0IzLTk1OUEtQzY2QzFEREIzREE1AAApAQAkRTQ2OThBN0YtOUU0MC00N0FE
LUE2QzYtNzg0QkZBQ0EwQ0E5AAADKAAcKQEAJEEwODM2RTVFLTUwQ0YtNEIyOC05NTc3LUUyNTE3
MzcyNUYwQgAAKQEAJDZBMzMxRUJELUE5NTAtNDNCNS04M0EyLTAzMzU4NUY0MTdGNwAAKQEAJEUy
NUUyMzRDLTBGOUEtNEEyRC05M0E4LTFBQTA5N0U2MzU1QwAABSgBElgcKQEAJEU3MDA3MDZDLUYy
M0MtNDAwQS1CRDYyLUFDNzYwQjExQjk4NQAACAEAagAAAAAACAEAbwAAAAAABCgAEmwDKAACKQEA
JDg5QjhFMzA2LTdDMkEtNDcyRi04ODUwLTcyMDJCNERBRjE3QgAABSgBEmAcKQEAJDZBRjQxNTg0
LTcxRjItNDAxRS1CMTNFLUM2NzhCOTJEM0E1QQAACAEAdAAAAAAABSgAEoCABCgAEnwpAQAkNzMw
RDcyMkMtMkUwMC00QzdBLTg2NDEtMEQzNzgzNTNBOTQ0AAAEKAASaCkBACQ5OTQ0RjY4NC00OUM0
LTQzNTQtQUI3Ri1FRTQyMkE2NTBFMEUAAAgBAPz///8AAICrLAAAgKVTeXN0ZW0uUnVudGltZS5J
bnRlcm9wU2VydmljZXMuQ3VzdG9tTWFyc2hhbGVycy5FbnVtZXJhdG9yVG9FbnVtVmFyaWFudE1h
cnNoYWxlciwgQ3VzdG9tTWFyc2hhbGVycywgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRy
YWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EABSgBEhwcKQEAJDc3Rjg0MDAyLUM4
NzgtNEIzOC04NDJELUIxRTI1QTlGQkNDOAAABigBEoCIHCkBACRCQzk0MkZFQy0yQ0VBLTQ2NjUt
QTI5MS0zODIwMEEwQzk1OUYAAAgBAGsAAAAAACkBACQxQzE5RDRGOC0xMDc1LTQyOUEtOUFEOS01
N0IyQzNGNzE4ODQAAAMGEXQEAgAAAAUgAgEODl8BACQwQjRBRjE4Qi0zNjk5LTQyODQtOUJGNy1D
MjlEQkUzRDc4QkY1TWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUGlwZWxpbmUuV3JhcHBlci5EVFNV
c2FnZVR5cGUAAAMGEXhlAQAkMEI0QUYxOEItMzY5OS00Mjg0LTlCRjctQzI5REJFM0Q3OEJGO01p
Y3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlBpcGVsaW5lLldyYXBwZXIuRFRTSW5zZXJ0UGxhY2VtZW50
AAAGKAESgJQcKQEAJDI5MEM4OEU5LTFBOTYtNEEyQS04RjQxLTQ1NEI0OEFDOTBBRQAAKQEAJDI0
MjQ0RDQ4LTI3NjQtNEY3OS04RTMzLTRDOUE3QjhENEUyRAAABSgBEkQcKQEAJDJEOTFENkY1LTM0
OUUtNDUyRi04MEU0LUU3NzkzRjA4Qzg0MwAACAEAbgAAAAAABSAAEYCMCAEAdgAAAAAABSgAEYCM
KQEAJDNDN0ZDQkUwLTgyODctNEI5Ny1CNjMyLTdDNjBDNjNEQUFGNAAABAYRgIwEBAAAAGQBACQw
QjRBRjE4Qi0zNjk5LTQyODQtOUJGNy1DMjlEQkUzRDc4QkY6TWljcm9zb2Z0LlNxbFNlcnZlci5E
dHMuUGlwZWxpbmUuV3JhcHBlci5EVFNSb3dEaXNwb3NpdGlvbgAABAYRgJAEAwAAAAQFAAAABAYA
AAAEBwAAAAQLAAAABA4AAAAEEAAAAAQRAAAABBIAAAAEEwAAAAQUAAAABBUAAAAEQAAAAARIAAAA
BIAAAAAEgQAAAASCAAAABIMAAAAEhQAAAASGAAAABIcAAAAEkQAAAASSAAAABC0BAAAELgEAAAQv
AQAABDABAAAEAkAAAAQDQAAABARAAAAEBUAAAAQGQAAABAdAAAAEC0AAAAQOQAAABBBAAAAEEUAA
AAQSQAAABBNAAAAEFEAAAAQVQAAABEBAAAAESEAAAASDQAAABIVAAAAEhkAAAASHQAAABIhAAAAE
iUAAAASKQAAAWgEAJEI0NTJEQTVBLTU0RTItNEY2My04RDYxLTFCMTkzNzQ0OTA0RDBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lLldyYXBwZXIuRGF0YVR5cGUAACkBACQ1Q0NEMTQ0RS01
MUFELTQxMUYtQTlENC1FOUFFNTAxNjUwRjQAACkBACQyMDNFMjRCRC01MjAzLTRDNzYtQUZDNy03
Qzg1NDVFQkExQTAAACkBACQ0RTg1MzU3NC1DMkUzLTRDQUUtQjc5MS0yRDRBNUQxRDBDOTgAACkB
ACQ0OTA1MDcyNy0xRjM0LTQ0QkItODA2My0xNTJGRUZFRTREMDAAACkBACQyQzY0RjgzQi04RTdG
LTRBQzYtOTEzOC03NUJGMzYzMDAyRUUAABABAAtGaXJlV2FybmluZwAARwEAGi5ORVRGcmFtZXdv
cmssVmVyc2lvbj12NC4wAQBUDhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0
LwEAKlNUXzBjZWYyOWE5MzkzZjRlNGM4ZGRhMDIzZDkxMDUyNmU1LmNzcHJvagAABQEAAAAADQEA
CEhleGF3YXJlAAAeAQAZQ29weXJpZ2h0IEAgSGV4YXdhcmUgMjAxNQAACAEACAAAAAAAHgEAAQBU
AhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQAA8AYBAAAAAAAAAAAADgcBAAAgAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAHAQAAAAAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/
JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAA
AAABAAAAAABIAAAAWCABADQEAAAAAAAAAAAAADQENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJ
AE4ARgBPAAAAAAC9BO/+AAABAAAAAQAJZJgXAAABAAlkmBc/AAAAAAAAAAQAAAACAAAAAAAAAAAA
AAAAAAAARAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABh
AHQAaQBvAG4AAAAAAAAAsASUAwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABwAwAA
AQAwADAAMAAwADAANABiADAAAAA0AAkAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAAAEgAZQB4
AGEAdwBhAHIAZQAAAAAAgAArAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMA
VABfADAAYwBlAGYAMgA5AGEAOQAzADkAMwBmADQAZQA0AGMAOABkAGQAYQAwADIAMwBkADkAMQAw
ADUAMgA2AGUANQAuAGMAcwBwAHIAbwBqAAAAAABAAA8AAQBGAGkAbABlAFYAZQByAHMAaQBvAG4A
AAAAADEALgAwAC4ANgAwADQAMAAuADIANQA2ADAAOQAAAAAAgAAvAAEASQBuAHQAZQByAG4AYQBs
AE4AYQBtAGUAAABTAFQAXwAwAGMAZQBmADIAOQBhADkAMwA5ADMAZgA0AGUANABjADgAZABkAGEA
MAAyADMAZAA5ADEAMAA1ADIANgBlADUALgBjAHMAcAByAG8AagAuAGQAbABsAAAAAABYABoAAQBM
AGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIABIAGUA
eABhAHcAYQByAGUAIAAyADAAMQA1AAAAiAAvAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBh
AG0AZQAAAFMAVABfADAAYwBlAGYAMgA5AGEAOQAzADkAMwBmADQAZQA0AGMAOABkAGQAYQAwADIA
MwBkADkAMQAwADUAMgA2AGUANQAuAGMAcwBwAHIAbwBqAC4AZABsAGwAAAAAAHgAKwABAFAAcgBv
AGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMABjAGUAZgAyADkAYQA5ADMAOQAzAGYANABlADQA
YwA4AGQAZABhADAAMgAzAGQAOQAxADAANQAyADYAZQA1AC4AYwBzAHAAcgBvAGoAAAAAAEQADwAB
AFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANgAwADQAMAAuADIANQA2ADAA
OQAAAAAASAAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANgAw
ADQAMAAuADIANQA2ADAAOQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAwA
AAAgNwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="132,42"
          Id="Package\Script Task"
          TopLeft="42.5,42.084905660377" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>